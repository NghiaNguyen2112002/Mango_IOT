
Mango_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08008c80  08008c80  00018c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080092a8  080092a8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092a8  080092a8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080092b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001ec  0800949c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800949c  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff63  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00032ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00033bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2d8  00000000  00000000  00034ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014272  00000000  00000000  0004ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ede3  00000000  00000000  000630f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c44  00000000  00000000  000f1f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c68 	.word	0x08008c68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008c68 	.word	0x08008c68

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c6:	2afd      	cmp	r2, #253	; 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	; 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	; 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <__gesf2>:
 8000eb0:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb4:	e006      	b.n	8000ec4 <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__lesf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	e002      	b.n	8000ec4 <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__cmpsf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed4:	bf18      	it	ne
 8000ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eda:	d011      	beq.n	8000f00 <__cmpsf2+0x40>
 8000edc:	b001      	add	sp, #4
 8000ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee2:	bf18      	it	ne
 8000ee4:	ea90 0f01 	teqne	r0, r1
 8000ee8:	bf58      	it	pl
 8000eea:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eee:	bf88      	it	hi
 8000ef0:	17c8      	asrhi	r0, r1, #31
 8000ef2:	bf38      	it	cc
 8000ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef8:	bf18      	it	ne
 8000efa:	f040 0001 	orrne.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f04:	d102      	bne.n	8000f0c <__cmpsf2+0x4c>
 8000f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0a:	d105      	bne.n	8000f18 <__cmpsf2+0x58>
 8000f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f10:	d1e4      	bne.n	8000edc <__cmpsf2+0x1c>
 8000f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f16:	d0e1      	beq.n	8000edc <__cmpsf2+0x1c>
 8000f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_cfrcmple>:
 8000f20:	4684      	mov	ip, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4661      	mov	r1, ip
 8000f26:	e7ff      	b.n	8000f28 <__aeabi_cfcmpeq>

08000f28 <__aeabi_cfcmpeq>:
 8000f28:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2a:	f7ff ffc9 	bl	8000ec0 <__cmpsf2>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	bf48      	it	mi
 8000f32:	f110 0f00 	cmnmi.w	r0, #0
 8000f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f38 <__aeabi_fcmpeq>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff fff4 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f40:	bf0c      	ite	eq
 8000f42:	2001      	moveq	r0, #1
 8000f44:	2000      	movne	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmplt>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffea 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f54:	bf34      	ite	cc
 8000f56:	2001      	movcc	r0, #1
 8000f58:	2000      	movcs	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmple>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffe0 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpge>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffd2 	bl	8000f20 <__aeabi_cfrcmple>
 8000f7c:	bf94      	ite	ls
 8000f7e:	2001      	movls	r0, #1
 8000f80:	2000      	movhi	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmpgt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffc8 	bl	8000f20 <__aeabi_cfrcmple>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpun>:
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	d102      	bne.n	8000fb0 <__aeabi_fcmpun+0x14>
 8000faa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fcmpun+0x26>
 8000fb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_fcmpun+0x20>
 8000fb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fba:	d102      	bne.n	8000fc2 <__aeabi_fcmpun+0x26>
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0001 	mov.w	r0, #1
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_f2uiz>:
 8000fc8:	0042      	lsls	r2, r0, #1
 8000fca:	d20e      	bcs.n	8000fea <__aeabi_f2uiz+0x22>
 8000fcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fd0:	d30b      	bcc.n	8000fea <__aeabi_f2uiz+0x22>
 8000fd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fda:	d409      	bmi.n	8000ff0 <__aeabi_f2uiz+0x28>
 8000fdc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr
 8000ff0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff4:	d101      	bne.n	8000ffa <__aeabi_f2uiz+0x32>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	d102      	bne.n	8001000 <__aeabi_f2uiz+0x38>
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	4770      	bx	lr
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_d2lz>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4605      	mov	r5, r0
 800100c:	460c      	mov	r4, r1
 800100e:	2200      	movs	r2, #0
 8001010:	2300      	movs	r3, #0
 8001012:	4628      	mov	r0, r5
 8001014:	4621      	mov	r1, r4
 8001016:	f7ff fd8f 	bl	8000b38 <__aeabi_dcmplt>
 800101a:	b928      	cbnz	r0, 8001028 <__aeabi_d2lz+0x20>
 800101c:	4628      	mov	r0, r5
 800101e:	4621      	mov	r1, r4
 8001020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001024:	f000 b80a 	b.w	800103c <__aeabi_d2ulz>
 8001028:	4628      	mov	r0, r5
 800102a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800102e:	f000 f805 	bl	800103c <__aeabi_d2ulz>
 8001032:	4240      	negs	r0, r0
 8001034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001038:	bd38      	pop	{r3, r4, r5, pc}
 800103a:	bf00      	nop

0800103c <__aeabi_d2ulz>:
 800103c:	b5d0      	push	{r4, r6, r7, lr}
 800103e:	2200      	movs	r2, #0
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__aeabi_d2ulz+0x34>)
 8001042:	4606      	mov	r6, r0
 8001044:	460f      	mov	r7, r1
 8001046:	f7ff fb05 	bl	8000654 <__aeabi_dmul>
 800104a:	f7ff fdb3 	bl	8000bb4 <__aeabi_d2uiz>
 800104e:	4604      	mov	r4, r0
 8001050:	f7ff fa86 	bl	8000560 <__aeabi_ui2d>
 8001054:	2200      	movs	r2, #0
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <__aeabi_d2ulz+0x38>)
 8001058:	f7ff fafc 	bl	8000654 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4630      	mov	r0, r6
 8001062:	4639      	mov	r1, r7
 8001064:	f7ff f93e 	bl	80002e4 <__aeabi_dsub>
 8001068:	f7ff fda4 	bl	8000bb4 <__aeabi_d2uiz>
 800106c:	4621      	mov	r1, r4
 800106e:	bdd0      	pop	{r4, r6, r7, pc}
 8001070:	3df00000 	.word	0x3df00000
 8001074:	41f00000 	.word	0x41f00000

08001078 <ProcessMsg>:
uint8_t flag_config_mode, flag_connect_mode, flag_display_data_mode;

uint8_t msg[100];
//uint8_t msg_esp[100];

void ProcessMsg(char* msg){
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, node_id;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
		10    "P"
		11    30
		12    "K"
		13    40
*/
	token = strtok(msg, ":,{}");
 8001084:	4951      	ldr	r1, [pc, #324]	; (80011cc <ProcessMsg+0x154>)
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f005 fbd4 	bl	8006834 <strtok>
 800108c:	60b8      	str	r0, [r7, #8]

	for(i = 0; (i < 100) && (token != NULL); i++){
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e090      	b.n	80011b6 <ProcessMsg+0x13e>
		if(i == 1) {
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d118      	bne.n	80010cc <ProcessMsg+0x54>
			node_id = atoi(token);
 800109a:	68b8      	ldr	r0, [r7, #8]
 800109c:	f004 fc19 	bl	80058d2 <atoi>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73bb      	strb	r3, [r7, #14]
			_Data_node[node_id].node_id = node_id;
 80010a4:	7bba      	ldrb	r2, [r7, #14]
 80010a6:	494a      	ldr	r1, [pc, #296]	; (80011d0 <ProcessMsg+0x158>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	7bba      	ldrb	r2, [r7, #14]
 80010b4:	701a      	strb	r2, [r3, #0]
			_Data_node[node_id].is_connected = 1;
 80010b6:	7bba      	ldrb	r2, [r7, #14]
 80010b8:	4945      	ldr	r1, [pc, #276]	; (80011d0 <ProcessMsg+0x158>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	3310      	adds	r3, #16
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e06c      	b.n	80011a6 <ProcessMsg+0x12e>
		}
		else if(i == 3) _Data_node[node_id].temp = atoff(token);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d10d      	bne.n	80010ee <ProcessMsg+0x76>
 80010d2:	7bbc      	ldrb	r4, [r7, #14]
 80010d4:	68b8      	ldr	r0, [r7, #8]
 80010d6:	f004 fbf9 	bl	80058cc <atoff>
 80010da:	4602      	mov	r2, r0
 80010dc:	493c      	ldr	r1, [pc, #240]	; (80011d0 <ProcessMsg+0x158>)
 80010de:	4623      	mov	r3, r4
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4423      	add	r3, r4
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3304      	adds	r3, #4
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e05b      	b.n	80011a6 <ProcessMsg+0x12e>
		else if(i == 5) _Data_node[node_id].humid = atoff(token);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d10d      	bne.n	8001110 <ProcessMsg+0x98>
 80010f4:	7bbc      	ldrb	r4, [r7, #14]
 80010f6:	68b8      	ldr	r0, [r7, #8]
 80010f8:	f004 fbe8 	bl	80058cc <atoff>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4934      	ldr	r1, [pc, #208]	; (80011d0 <ProcessMsg+0x158>)
 8001100:	4623      	mov	r3, r4
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4423      	add	r3, r4
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3308      	adds	r3, #8
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e04a      	b.n	80011a6 <ProcessMsg+0x12e>
		else if(i == 7) _Data_node[node_id].adc = atoi(token);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d10f      	bne.n	8001136 <ProcessMsg+0xbe>
 8001116:	68b8      	ldr	r0, [r7, #8]
 8001118:	f004 fbdb 	bl	80058d2 <atoi>
 800111c:	4603      	mov	r3, r0
 800111e:	7bba      	ldrb	r2, [r7, #14]
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	492b      	ldr	r1, [pc, #172]	; (80011d0 <ProcessMsg+0x158>)
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	4602      	mov	r2, r0
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e037      	b.n	80011a6 <ProcessMsg+0x12e>
		else if(i == 9) _Data_node[node_id].nito = atoi(token);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b09      	cmp	r3, #9
 800113a:	d10f      	bne.n	800115c <ProcessMsg+0xe4>
 800113c:	68b8      	ldr	r0, [r7, #8]
 800113e:	f004 fbc8 	bl	80058d2 <atoi>
 8001142:	4603      	mov	r3, r0
 8001144:	7bba      	ldrb	r2, [r7, #14]
 8001146:	b2d8      	uxtb	r0, r3
 8001148:	4921      	ldr	r1, [pc, #132]	; (80011d0 <ProcessMsg+0x158>)
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	330d      	adds	r3, #13
 8001156:	4602      	mov	r2, r0
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e024      	b.n	80011a6 <ProcessMsg+0x12e>
		else if(i == 11) _Data_node[node_id].photpho = atoi(token);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b0b      	cmp	r3, #11
 8001160:	d10f      	bne.n	8001182 <ProcessMsg+0x10a>
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f004 fbb5 	bl	80058d2 <atoi>
 8001168:	4603      	mov	r3, r0
 800116a:	7bba      	ldrb	r2, [r7, #14]
 800116c:	b2d8      	uxtb	r0, r3
 800116e:	4918      	ldr	r1, [pc, #96]	; (80011d0 <ProcessMsg+0x158>)
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	330e      	adds	r3, #14
 800117c:	4602      	mov	r2, r0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e011      	b.n	80011a6 <ProcessMsg+0x12e>
		else if(i == 13) _Data_node[node_id].kali = atoi(token);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b0d      	cmp	r3, #13
 8001186:	d10e      	bne.n	80011a6 <ProcessMsg+0x12e>
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f004 fba2 	bl	80058d2 <atoi>
 800118e:	4603      	mov	r3, r0
 8001190:	7bba      	ldrb	r2, [r7, #14]
 8001192:	b2d8      	uxtb	r0, r3
 8001194:	490e      	ldr	r1, [pc, #56]	; (80011d0 <ProcessMsg+0x158>)
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	330f      	adds	r3, #15
 80011a2:	4602      	mov	r2, r0
 80011a4:	701a      	strb	r2, [r3, #0]
		token = strtok(NULL, ":,{}");
 80011a6:	4909      	ldr	r1, [pc, #36]	; (80011cc <ProcessMsg+0x154>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f005 fb43 	bl	8006834 <strtok>
 80011ae:	60b8      	str	r0, [r7, #8]
	for(i = 0; (i < 100) && (token != NULL); i++){
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3301      	adds	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	2b63      	cmp	r3, #99	; 0x63
 80011ba:	d803      	bhi.n	80011c4 <ProcessMsg+0x14c>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f af68 	bne.w	8001094 <ProcessMsg+0x1c>
	}
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	08008c80 	.word	0x08008c80
 80011d0:	20000270 	.word	0x20000270

080011d4 <SystemMode>:

uint8_t SystemMode(void){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return mode_sys;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <SystemMode+0x10>)
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	2000020a 	.word	0x2000020a

080011e8 <FSM_Init>:
//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	mode_data = INIT;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <FSM_Init+0x2c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
	mode_lcd = INIT;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <FSM_Init+0x30>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	mode_sys = INIT;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <FSM_Init+0x34>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]

	node_turn = 0;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <FSM_Init+0x38>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
	_time_screen = 50;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <FSM_Init+0x3c>)
 8001206:	2232      	movs	r2, #50	; 0x32
 8001208:	801a      	strh	r2, [r3, #0]

}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000209 	.word	0x20000209
 8001218:	20000208 	.word	0x20000208
 800121c:	2000020a 	.word	0x2000020a
 8001220:	2000020b 	.word	0x2000020b
 8001224:	200002a0 	.word	0x200002a0

08001228 <FSM_LcdDisplay>:

void FSM_LcdDisplay(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	switch(mode_lcd){
 800122c:	4bbe      	ldr	r3, [pc, #760]	; (8001528 <FSM_LcdDisplay+0x300>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b08      	cmp	r3, #8
 8001232:	f200 82fe 	bhi.w	8001832 <FSM_LcdDisplay+0x60a>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <FSM_LcdDisplay+0x14>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	08001261 	.word	0x08001261
 8001240:	0800129b 	.word	0x0800129b
 8001244:	080013c1 	.word	0x080013c1
 8001248:	080014bf 	.word	0x080014bf
 800124c:	080015fd 	.word	0x080015fd
 8001250:	080016bb 	.word	0x080016bb
 8001254:	08001745 	.word	0x08001745
 8001258:	08001763 	.word	0x08001763
 800125c:	08001789 	.word	0x08001789
	case INIT:
		CLCD_PrintStringBuffer(0, 0, SCREEN_INIT_0);
 8001260:	4ab2      	ldr	r2, [pc, #712]	; (800152c <FSM_LcdDisplay+0x304>)
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fe45 	bl	8001ef4 <CLCD_PrintStringBuffer>
		CLCD_PrintStringBuffer(1, 0, SCREEN_INIT_1);
 800126a:	4ab1      	ldr	r2, [pc, #708]	; (8001530 <FSM_LcdDisplay+0x308>)
 800126c:	2100      	movs	r1, #0
 800126e:	2001      	movs	r0, #1
 8001270:	f000 fe40 	bl	8001ef4 <CLCD_PrintStringBuffer>

		if(_time_screen < 5){
 8001274:	4baf      	ldr	r3, [pc, #700]	; (8001534 <FSM_LcdDisplay+0x30c>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	2b04      	cmp	r3, #4
 800127a:	f200 82de 	bhi.w	800183a <FSM_LcdDisplay+0x612>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800127e:	4aae      	ldr	r2, [pc, #696]	; (8001538 <FSM_LcdDisplay+0x310>)
 8001280:	2100      	movs	r1, #0
 8001282:	2000      	movs	r0, #0
 8001284:	f000 fe36 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001288:	4aa9      	ldr	r2, [pc, #676]	; (8001530 <FSM_LcdDisplay+0x308>)
 800128a:	2100      	movs	r1, #0
 800128c:	2001      	movs	r0, #1
 800128e:	f000 fe31 	bl	8001ef4 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONNECT_WF;
 8001292:	4ba5      	ldr	r3, [pc, #660]	; (8001528 <FSM_LcdDisplay+0x300>)
 8001294:	2208      	movs	r2, #8
 8001296:	701a      	strb	r2, [r3, #0]
//			mode_lcd = READY_DISPLAY;
		}
		break;
 8001298:	e2cf      	b.n	800183a <FSM_LcdDisplay+0x612>
	case READY_DISPLAY:

		CLCD_PrintCharBuffer(1, 12 + (_counter_time_elapsed/10) % 4, '.');
 800129a:	4ba8      	ldr	r3, [pc, #672]	; (800153c <FSM_LcdDisplay+0x314>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4aa8      	ldr	r2, [pc, #672]	; (8001540 <FSM_LcdDisplay+0x318>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	330c      	adds	r3, #12
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	222e      	movs	r2, #46	; 0x2e
 80012b6:	4619      	mov	r1, r3
 80012b8:	2001      	movs	r0, #1
 80012ba:	f000 fddf 	bl	8001e7c <CLCD_PrintCharBuffer>
		if((_counter_time_elapsed/10) % 4 == 3) CLCD_PrintStringBuffer(1, 0, SCREEN_READY_DISPLAY_1);
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <FSM_LcdDisplay+0x314>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	4a9f      	ldr	r2, [pc, #636]	; (8001540 <FSM_LcdDisplay+0x318>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d104      	bne.n	80012e0 <FSM_LcdDisplay+0xb8>
 80012d6:	4a9b      	ldr	r2, [pc, #620]	; (8001544 <FSM_LcdDisplay+0x31c>)
 80012d8:	2100      	movs	r1, #0
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fe0a 	bl	8001ef4 <CLCD_PrintStringBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 80012e0:	f7ff ff78 	bl	80011d4 <SystemMode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10d      	bne.n	8001306 <FSM_LcdDisplay+0xde>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 80012ea:	4a93      	ldr	r2, [pc, #588]	; (8001538 <FSM_LcdDisplay+0x310>)
 80012ec:	2100      	movs	r1, #0
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 fe00 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 80012f4:	4a8e      	ldr	r2, [pc, #568]	; (8001530 <FSM_LcdDisplay+0x308>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 fdfb 	bl	8001ef4 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONNECT_WF;
 80012fe:	4b8a      	ldr	r3, [pc, #552]	; (8001528 <FSM_LcdDisplay+0x300>)
 8001300:	2208      	movs	r2, #8
 8001302:	701a      	strb	r2, [r3, #0]
			mode_lcd = DISPLAY_DHT;
		}
		else{
			mode_lcd = TURN_NEXT_NODE;
		}
		break;
 8001304:	e2a6      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		else if(SystemMode() == SYS_CONFIG_WF){
 8001306:	f7ff ff65 	bl	80011d4 <SystemMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10d      	bne.n	800132c <FSM_LcdDisplay+0x104>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001310:	4a8d      	ldr	r2, [pc, #564]	; (8001548 <FSM_LcdDisplay+0x320>)
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f000 fded 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800131a:	4a85      	ldr	r2, [pc, #532]	; (8001530 <FSM_LcdDisplay+0x308>)
 800131c:	2100      	movs	r1, #0
 800131e:	2001      	movs	r0, #1
 8001320:	f000 fde8 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 8001324:	4b80      	ldr	r3, [pc, #512]	; (8001528 <FSM_LcdDisplay+0x300>)
 8001326:	2207      	movs	r2, #7
 8001328:	701a      	strb	r2, [r3, #0]
		break;
 800132a:	e293      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		else if(_Data_node[node_turn].is_connected){
 800132c:	4b87      	ldr	r3, [pc, #540]	; (800154c <FSM_LcdDisplay+0x324>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <FSM_LcdDisplay+0x328>)
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	3310      	adds	r3, #16
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d038      	beq.n	80013b8 <FSM_LcdDisplay+0x190>
			_time_screen = TIME_SCREEN;
 8001346:	4b7b      	ldr	r3, [pc, #492]	; (8001534 <FSM_LcdDisplay+0x30c>)
 8001348:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800134c:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_TEMP_HUMI_0);
 800134e:	4a81      	ldr	r2, [pc, #516]	; (8001554 <FSM_LcdDisplay+0x32c>)
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f000 fdce 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TEMP_HUMI_1);
 8001358:	4a7f      	ldr	r2, [pc, #508]	; (8001558 <FSM_LcdDisplay+0x330>)
 800135a:	2100      	movs	r1, #0
 800135c:	2001      	movs	r0, #1
 800135e:	f000 fdc9 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(0, INDEX_LCD_CEL_SYMBOL, 0xDF);
 8001362:	22df      	movs	r2, #223	; 0xdf
 8001364:	210e      	movs	r1, #14
 8001366:	2000      	movs	r0, #0
 8001368:	f000 fd88 	bl	8001e7c <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
 800136c:	4b77      	ldr	r3, [pc, #476]	; (800154c <FSM_LcdDisplay+0x324>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	4a77      	ldr	r2, [pc, #476]	; (8001550 <FSM_LcdDisplay+0x328>)
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3330      	adds	r3, #48	; 0x30
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fd77 	bl	8001e7c <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <FSM_LcdDisplay+0x324>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4a6e      	ldr	r2, [pc, #440]	; (8001550 <FSM_LcdDisplay+0x328>)
 8001396:	460b      	mov	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3330      	adds	r3, #48	; 0x30
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	2100      	movs	r1, #0
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 fd66 	bl	8001e7c <CLCD_PrintCharBuffer>
			mode_lcd = DISPLAY_DHT;
 80013b0:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <FSM_LcdDisplay+0x300>)
 80013b2:	2202      	movs	r2, #2
 80013b4:	701a      	strb	r2, [r3, #0]
		break;
 80013b6:	e24d      	b.n	8001854 <FSM_LcdDisplay+0x62c>
			mode_lcd = TURN_NEXT_NODE;
 80013b8:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <FSM_LcdDisplay+0x300>)
 80013ba:	2206      	movs	r2, #6
 80013bc:	701a      	strb	r2, [r3, #0]
		break;
 80013be:	e249      	b.n	8001854 <FSM_LcdDisplay+0x62c>
	case DISPLAY_DHT:
		CLCD_PrintFloatBuffer(0, INDEX_LCD_TEMP, _Data_node[node_turn].temp);
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <FSM_LcdDisplay+0x324>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4a62      	ldr	r2, [pc, #392]	; (8001550 <FSM_LcdDisplay+0x328>)
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	2109      	movs	r1, #9
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 fe34 	bl	8002048 <CLCD_PrintFloatBuffer>
		CLCD_PrintFloatBuffer(1, INDEX_LCD_HUMI, _Data_node[node_turn].humid);
 80013e0:	4b5a      	ldr	r3, [pc, #360]	; (800154c <FSM_LcdDisplay+0x324>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4a5a      	ldr	r2, [pc, #360]	; (8001550 <FSM_LcdDisplay+0x328>)
 80013e8:	460b      	mov	r3, r1
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2109      	movs	r1, #9
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fe24 	bl	8002048 <CLCD_PrintFloatBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001400:	f7ff fee8 	bl	80011d4 <SystemMode>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d10d      	bne.n	8001426 <FSM_LcdDisplay+0x1fe>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800140a:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <FSM_LcdDisplay+0x310>)
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fd70 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001414:	4a46      	ldr	r2, [pc, #280]	; (8001530 <FSM_LcdDisplay+0x308>)
 8001416:	2100      	movs	r1, #0
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fd6b 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 800141e:	4b42      	ldr	r3, [pc, #264]	; (8001528 <FSM_LcdDisplay+0x300>)
 8001420:	2208      	movs	r2, #8
 8001422:	701a      	strb	r2, [r3, #0]
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');

			mode_lcd = DISPLAY_SOILHUMID_NITO;
		}
		break;
 8001424:	e20b      	b.n	800183e <FSM_LcdDisplay+0x616>
		else if(SystemMode() == SYS_CONFIG_WF){
 8001426:	f7ff fed5 	bl	80011d4 <SystemMode>
 800142a:	4603      	mov	r3, r0
 800142c:	2b02      	cmp	r3, #2
 800142e:	d10d      	bne.n	800144c <FSM_LcdDisplay+0x224>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <FSM_LcdDisplay+0x320>)
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fd5d 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <FSM_LcdDisplay+0x308>)
 800143c:	2100      	movs	r1, #0
 800143e:	2001      	movs	r0, #1
 8001440:	f000 fd58 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <FSM_LcdDisplay+0x300>)
 8001446:	2207      	movs	r2, #7
 8001448:	701a      	strb	r2, [r3, #0]
		break;
 800144a:	e1f8      	b.n	800183e <FSM_LcdDisplay+0x616>
		else if(_time_screen < 5){
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <FSM_LcdDisplay+0x30c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2b04      	cmp	r3, #4
 8001452:	f200 81f4 	bhi.w	800183e <FSM_LcdDisplay+0x616>
			_time_screen = TIME_SCREEN;
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <FSM_LcdDisplay+0x30c>)
 8001458:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800145c:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_SOILHUMID_NITO_0);
 800145e:	4a3f      	ldr	r2, [pc, #252]	; (800155c <FSM_LcdDisplay+0x334>)
 8001460:	2100      	movs	r1, #0
 8001462:	2000      	movs	r0, #0
 8001464:	f000 fd46 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_SOILHUMID_NITO_1);
 8001468:	4a3d      	ldr	r2, [pc, #244]	; (8001560 <FSM_LcdDisplay+0x338>)
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f000 fd41 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <FSM_LcdDisplay+0x324>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	4a35      	ldr	r2, [pc, #212]	; (8001550 <FSM_LcdDisplay+0x328>)
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	3330      	adds	r3, #48	; 0x30
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	2000      	movs	r0, #0
 8001490:	f000 fcf4 	bl	8001e7c <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <FSM_LcdDisplay+0x324>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <FSM_LcdDisplay+0x328>)
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3330      	adds	r3, #48	; 0x30
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2001      	movs	r0, #1
 80014b2:	f000 fce3 	bl	8001e7c <CLCD_PrintCharBuffer>
			mode_lcd = DISPLAY_SOILHUMID_NITO;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <FSM_LcdDisplay+0x300>)
 80014b8:	2203      	movs	r2, #3
 80014ba:	701a      	strb	r2, [r3, #0]
		break;
 80014bc:	e1bf      	b.n	800183e <FSM_LcdDisplay+0x616>
	case DISPLAY_SOILHUMID_NITO:
		CLCD_PrintNumBuffer(0, INDEX_LCD_SHUMI, _Data_node[node_turn].adc);
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <FSM_LcdDisplay+0x324>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4a22      	ldr	r2, [pc, #136]	; (8001550 <FSM_LcdDisplay+0x328>)
 80014c6:	460b      	mov	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	330c      	adds	r3, #12
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	2109      	movs	r1, #9
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 fd40 	bl	8001f60 <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(1, INDEX_LCD_N, _Data_node[node_turn].nito);
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <FSM_LcdDisplay+0x324>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <FSM_LcdDisplay+0x328>)
 80014e8:	460b      	mov	r3, r1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	330d      	adds	r3, #13
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	2105      	movs	r1, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	f000 fd2f 	bl	8001f60 <CLCD_PrintNumBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001502:	f7ff fe67 	bl	80011d4 <SystemMode>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d12b      	bne.n	8001564 <FSM_LcdDisplay+0x33c>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <FSM_LcdDisplay+0x310>)
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f000 fcef 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <FSM_LcdDisplay+0x308>)
 8001518:	2100      	movs	r1, #0
 800151a:	2001      	movs	r0, #1
 800151c:	f000 fcea 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 8001520:	4b01      	ldr	r3, [pc, #4]	; (8001528 <FSM_LcdDisplay+0x300>)
 8001522:	2208      	movs	r2, #8
 8001524:	701a      	strb	r2, [r3, #0]
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');

			mode_lcd = DISPLAY_PHOTPHO_KALI;
		}
		break;
 8001526:	e18c      	b.n	8001842 <FSM_LcdDisplay+0x61a>
 8001528:	20000208 	.word	0x20000208
 800152c:	08008c88 	.word	0x08008c88
 8001530:	08008c9c 	.word	0x08008c9c
 8001534:	200002a0 	.word	0x200002a0
 8001538:	08008cb0 	.word	0x08008cb0
 800153c:	200002a4 	.word	0x200002a4
 8001540:	cccccccd 	.word	0xcccccccd
 8001544:	08008cc4 	.word	0x08008cc4
 8001548:	08008cd8 	.word	0x08008cd8
 800154c:	2000020b 	.word	0x2000020b
 8001550:	20000270 	.word	0x20000270
 8001554:	08008cec 	.word	0x08008cec
 8001558:	08008d00 	.word	0x08008d00
 800155c:	08008d14 	.word	0x08008d14
 8001560:	08008d28 	.word	0x08008d28
		else if(SystemMode() == SYS_CONFIG_WF){
 8001564:	f7ff fe36 	bl	80011d4 <SystemMode>
 8001568:	4603      	mov	r3, r0
 800156a:	2b02      	cmp	r3, #2
 800156c:	d10d      	bne.n	800158a <FSM_LcdDisplay+0x362>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 800156e:	4aba      	ldr	r2, [pc, #744]	; (8001858 <FSM_LcdDisplay+0x630>)
 8001570:	2100      	movs	r1, #0
 8001572:	2000      	movs	r0, #0
 8001574:	f000 fcbe 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 8001578:	4ab8      	ldr	r2, [pc, #736]	; (800185c <FSM_LcdDisplay+0x634>)
 800157a:	2100      	movs	r1, #0
 800157c:	2001      	movs	r0, #1
 800157e:	f000 fcb9 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 8001582:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001584:	2207      	movs	r2, #7
 8001586:	701a      	strb	r2, [r3, #0]
		break;
 8001588:	e15b      	b.n	8001842 <FSM_LcdDisplay+0x61a>
		else if(_time_screen < 5){
 800158a:	4bb6      	ldr	r3, [pc, #728]	; (8001864 <FSM_LcdDisplay+0x63c>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	2b04      	cmp	r3, #4
 8001590:	f200 8157 	bhi.w	8001842 <FSM_LcdDisplay+0x61a>
			_time_screen = TIME_SCREEN;
 8001594:	4bb3      	ldr	r3, [pc, #716]	; (8001864 <FSM_LcdDisplay+0x63c>)
 8001596:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800159a:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_PHOTPHO_KALI_0);
 800159c:	4ab2      	ldr	r2, [pc, #712]	; (8001868 <FSM_LcdDisplay+0x640>)
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f000 fca7 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_PHOTPHO_KALI_1);
 80015a6:	4ab1      	ldr	r2, [pc, #708]	; (800186c <FSM_LcdDisplay+0x644>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 fca2 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
 80015b0:	4baf      	ldr	r3, [pc, #700]	; (8001870 <FSM_LcdDisplay+0x648>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4aaf      	ldr	r2, [pc, #700]	; (8001874 <FSM_LcdDisplay+0x64c>)
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3330      	adds	r3, #48	; 0x30
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 fc55 	bl	8001e7c <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');
 80015d2:	4ba7      	ldr	r3, [pc, #668]	; (8001870 <FSM_LcdDisplay+0x648>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4aa6      	ldr	r2, [pc, #664]	; (8001874 <FSM_LcdDisplay+0x64c>)
 80015da:	460b      	mov	r3, r1
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3330      	adds	r3, #48	; 0x30
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	2100      	movs	r1, #0
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fc44 	bl	8001e7c <CLCD_PrintCharBuffer>
			mode_lcd = DISPLAY_PHOTPHO_KALI;
 80015f4:	4b9a      	ldr	r3, [pc, #616]	; (8001860 <FSM_LcdDisplay+0x638>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	701a      	strb	r2, [r3, #0]
		break;
 80015fa:	e122      	b.n	8001842 <FSM_LcdDisplay+0x61a>
	case DISPLAY_PHOTPHO_KALI:
		CLCD_PrintNumBuffer(0, INDEX_LCD_P, _Data_node[node_turn].photpho);
 80015fc:	4b9c      	ldr	r3, [pc, #624]	; (8001870 <FSM_LcdDisplay+0x648>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	4a9c      	ldr	r2, [pc, #624]	; (8001874 <FSM_LcdDisplay+0x64c>)
 8001604:	460b      	mov	r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	330e      	adds	r3, #14
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b21b      	sxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	2105      	movs	r1, #5
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fca1 	bl	8001f60 <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(1, INDEX_LCD_K, _Data_node[node_turn].kali);
 800161e:	4b94      	ldr	r3, [pc, #592]	; (8001870 <FSM_LcdDisplay+0x648>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4a93      	ldr	r2, [pc, #588]	; (8001874 <FSM_LcdDisplay+0x64c>)
 8001626:	460b      	mov	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	330f      	adds	r3, #15
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	2105      	movs	r1, #5
 800163a:	2001      	movs	r0, #1
 800163c:	f000 fc90 	bl	8001f60 <CLCD_PrintNumBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001640:	f7ff fdc8 	bl	80011d4 <SystemMode>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10d      	bne.n	8001666 <FSM_LcdDisplay+0x43e>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800164a:	4a8b      	ldr	r2, [pc, #556]	; (8001878 <FSM_LcdDisplay+0x650>)
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f000 fc50 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001654:	4a81      	ldr	r2, [pc, #516]	; (800185c <FSM_LcdDisplay+0x634>)
 8001656:	2100      	movs	r1, #0
 8001658:	2001      	movs	r0, #1
 800165a:	f000 fc4b 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 800165e:	4b80      	ldr	r3, [pc, #512]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001660:	2208      	movs	r2, #8
 8001662:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_RELAY_CUR_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_RELAY_CUR_1);

			mode_lcd = DISPLAY_RELAY_CUR;
		}
		break;
 8001664:	e0ef      	b.n	8001846 <FSM_LcdDisplay+0x61e>
		else if(SystemMode() == SYS_CONFIG_WF){
 8001666:	f7ff fdb5 	bl	80011d4 <SystemMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b02      	cmp	r3, #2
 800166e:	d10d      	bne.n	800168c <FSM_LcdDisplay+0x464>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001670:	4a79      	ldr	r2, [pc, #484]	; (8001858 <FSM_LcdDisplay+0x630>)
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f000 fc3d 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800167a:	4a78      	ldr	r2, [pc, #480]	; (800185c <FSM_LcdDisplay+0x634>)
 800167c:	2100      	movs	r1, #0
 800167e:	2001      	movs	r0, #1
 8001680:	f000 fc38 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 8001684:	4b76      	ldr	r3, [pc, #472]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001686:	2207      	movs	r2, #7
 8001688:	701a      	strb	r2, [r3, #0]
		break;
 800168a:	e0dc      	b.n	8001846 <FSM_LcdDisplay+0x61e>
		else if(_time_screen < 5){
 800168c:	4b75      	ldr	r3, [pc, #468]	; (8001864 <FSM_LcdDisplay+0x63c>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	2b04      	cmp	r3, #4
 8001692:	f200 80d8 	bhi.w	8001846 <FSM_LcdDisplay+0x61e>
			_time_screen = TIME_SCREEN;
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <FSM_LcdDisplay+0x63c>)
 8001698:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800169c:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_RELAY_CUR_0);
 800169e:	4a77      	ldr	r2, [pc, #476]	; (800187c <FSM_LcdDisplay+0x654>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 fc26 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_RELAY_CUR_1);
 80016a8:	4a75      	ldr	r2, [pc, #468]	; (8001880 <FSM_LcdDisplay+0x658>)
 80016aa:	2100      	movs	r1, #0
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fc21 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_RELAY_CUR;
 80016b2:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <FSM_LcdDisplay+0x638>)
 80016b4:	2205      	movs	r2, #5
 80016b6:	701a      	strb	r2, [r3, #0]
		break;
 80016b8:	e0c5      	b.n	8001846 <FSM_LcdDisplay+0x61e>
	case DISPLAY_RELAY_CUR:
		CLCD_PrintStringBuffer(0, INDEX_LCD_RELAY, RELAYSTATESTR(_Data_gateway.relay));
 80016ba:	4b72      	ldr	r3, [pc, #456]	; (8001884 <FSM_LcdDisplay+0x65c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <FSM_LcdDisplay+0x49e>
 80016c2:	4b71      	ldr	r3, [pc, #452]	; (8001888 <FSM_LcdDisplay+0x660>)
 80016c4:	e000      	b.n	80016c8 <FSM_LcdDisplay+0x4a0>
 80016c6:	4b71      	ldr	r3, [pc, #452]	; (800188c <FSM_LcdDisplay+0x664>)
 80016c8:	461a      	mov	r2, r3
 80016ca:	2107      	movs	r1, #7
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fc11 	bl	8001ef4 <CLCD_PrintStringBuffer>
		CLCD_PrintFloatBuffer(1, INDEX_LCD_CUR, _Data_gateway.cur);
 80016d2:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <FSM_LcdDisplay+0x65c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2105      	movs	r1, #5
 80016da:	2001      	movs	r0, #1
 80016dc:	f000 fcb4 	bl	8002048 <CLCD_PrintFloatBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 80016e0:	f7ff fd78 	bl	80011d4 <SystemMode>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10d      	bne.n	8001706 <FSM_LcdDisplay+0x4de>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 80016ea:	4a63      	ldr	r2, [pc, #396]	; (8001878 <FSM_LcdDisplay+0x650>)
 80016ec:	2100      	movs	r1, #0
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 fc00 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 80016f4:	4a59      	ldr	r2, [pc, #356]	; (800185c <FSM_LcdDisplay+0x634>)
 80016f6:	2100      	movs	r1, #0
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 fbfb 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001700:	2208      	movs	r2, #8
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e011      	b.n	800172a <FSM_LcdDisplay+0x502>
		}
		else if(SystemMode() == SYS_CONFIG_WF){
 8001706:	f7ff fd65 	bl	80011d4 <SystemMode>
 800170a:	4603      	mov	r3, r0
 800170c:	2b02      	cmp	r3, #2
 800170e:	d10c      	bne.n	800172a <FSM_LcdDisplay+0x502>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001710:	4a51      	ldr	r2, [pc, #324]	; (8001858 <FSM_LcdDisplay+0x630>)
 8001712:	2100      	movs	r1, #0
 8001714:	2000      	movs	r0, #0
 8001716:	f000 fbed 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800171a:	4a50      	ldr	r2, [pc, #320]	; (800185c <FSM_LcdDisplay+0x634>)
 800171c:	2100      	movs	r1, #0
 800171e:	2001      	movs	r0, #1
 8001720:	f000 fbe8 	bl	8001ef4 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONFIG_WF;
 8001724:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001726:	2207      	movs	r2, #7
 8001728:	701a      	strb	r2, [r3, #0]
		}
		if(_time_screen < 5){
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <FSM_LcdDisplay+0x63c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	2b04      	cmp	r3, #4
 8001730:	f200 808b 	bhi.w	800184a <FSM_LcdDisplay+0x622>
			_time_screen = TIME_SCREEN;
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <FSM_LcdDisplay+0x63c>)
 8001736:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800173a:	801a      	strh	r2, [r3, #0]
			mode_lcd = TURN_NEXT_NODE;
 800173c:	4b48      	ldr	r3, [pc, #288]	; (8001860 <FSM_LcdDisplay+0x638>)
 800173e:	2206      	movs	r2, #6
 8001740:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001742:	e082      	b.n	800184a <FSM_LcdDisplay+0x622>
	case TURN_NEXT_NODE:

		node_turn = (node_turn + 1) % NO_OF_NODES;
 8001744:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <FSM_LcdDisplay+0x648>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	bfb8      	it	lt
 8001752:	425b      	neglt	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <FSM_LcdDisplay+0x648>)
 8001758:	701a      	strb	r2, [r3, #0]

		mode_lcd = READY_DISPLAY;
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <FSM_LcdDisplay+0x638>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
		break;
 8001760:	e078      	b.n	8001854 <FSM_LcdDisplay+0x62c>
	case DISPLAY_CONFIG_WF:

		if(SystemMode() == SYS_CONNECT_WF) {
 8001762:	f7ff fd37 	bl	80011d4 <SystemMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d170      	bne.n	800184e <FSM_LcdDisplay+0x626>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800176c:	4a42      	ldr	r2, [pc, #264]	; (8001878 <FSM_LcdDisplay+0x650>)
 800176e:	2100      	movs	r1, #0
 8001770:	2000      	movs	r0, #0
 8001772:	f000 fbbf 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001776:	4a39      	ldr	r2, [pc, #228]	; (800185c <FSM_LcdDisplay+0x634>)
 8001778:	2100      	movs	r1, #0
 800177a:	2001      	movs	r0, #1
 800177c:	f000 fbba 	bl	8001ef4 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONNECT_WF;
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001782:	2208      	movs	r2, #8
 8001784:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001786:	e062      	b.n	800184e <FSM_LcdDisplay+0x626>
	case DISPLAY_CONNECT_WF:
		//every 500ms print a '.'
		CLCD_PrintCharBuffer(1, 6 + (_counter_time_elapsed/10) % 5, '.');
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <FSM_LcdDisplay+0x668>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4a41      	ldr	r2, [pc, #260]	; (8001894 <FSM_LcdDisplay+0x66c>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <FSM_LcdDisplay+0x66c>)
 8001798:	fba3 1302 	umull	r1, r3, r3, r2
 800179c:	0899      	lsrs	r1, r3, #2
 800179e:	460b      	mov	r3, r1
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3306      	adds	r3, #6
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	222e      	movs	r2, #46	; 0x2e
 80017b0:	4619      	mov	r1, r3
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 fb62 	bl	8001e7c <CLCD_PrintCharBuffer>

		if((_counter_time_elapsed/10) % 5 == 4) CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <FSM_LcdDisplay+0x668>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4a35      	ldr	r2, [pc, #212]	; (8001894 <FSM_LcdDisplay+0x66c>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <FSM_LcdDisplay+0x66c>)
 80017c8:	fba3 1302 	umull	r1, r3, r3, r2
 80017cc:	0899      	lsrs	r1, r3, #2
 80017ce:	460b      	mov	r3, r1
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d104      	bne.n	80017e6 <FSM_LcdDisplay+0x5be>
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <FSM_LcdDisplay+0x634>)
 80017de:	2100      	movs	r1, #0
 80017e0:	2001      	movs	r0, #1
 80017e2:	f000 fb87 	bl	8001ef4 <CLCD_PrintStringBuffer>

		if(SystemMode() == SYS_CONFIG_WF){
 80017e6:	f7ff fcf5 	bl	80011d4 <SystemMode>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d10d      	bne.n	800180c <FSM_LcdDisplay+0x5e4>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <FSM_LcdDisplay+0x630>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 fb7d 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <FSM_LcdDisplay+0x634>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 fb78 	bl	8001ef4 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONFIG_WF;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001806:	2207      	movs	r2, #7
 8001808:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_READY_DISPLAY_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_READY_DISPLAY_1);

			mode_lcd = READY_DISPLAY;
		}
		break;
 800180a:	e022      	b.n	8001852 <FSM_LcdDisplay+0x62a>
		else if(SystemMode() == SYS_PROCESS_DATA) {
 800180c:	f7ff fce2 	bl	80011d4 <SystemMode>
 8001810:	4603      	mov	r3, r0
 8001812:	2b03      	cmp	r3, #3
 8001814:	d11d      	bne.n	8001852 <FSM_LcdDisplay+0x62a>
			CLCD_PrintStringBuffer(0, 0, SCREEN_READY_DISPLAY_0);
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <FSM_LcdDisplay+0x670>)
 8001818:	2100      	movs	r1, #0
 800181a:	2000      	movs	r0, #0
 800181c:	f000 fb6a 	bl	8001ef4 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_READY_DISPLAY_1);
 8001820:	4a1e      	ldr	r2, [pc, #120]	; (800189c <FSM_LcdDisplay+0x674>)
 8001822:	2100      	movs	r1, #0
 8001824:	2001      	movs	r0, #1
 8001826:	f000 fb65 	bl	8001ef4 <CLCD_PrintStringBuffer>
			mode_lcd = READY_DISPLAY;
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <FSM_LcdDisplay+0x638>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
		break;
 8001830:	e00f      	b.n	8001852 <FSM_LcdDisplay+0x62a>
	default:
		mode_lcd = INIT;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <FSM_LcdDisplay+0x638>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
	}

}
 8001838:	e00c      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 800183a:	bf00      	nop
 800183c:	e00a      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 800183e:	bf00      	nop
 8001840:	e008      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 8001842:	bf00      	nop
 8001844:	e006      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 8001846:	bf00      	nop
 8001848:	e004      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 800184a:	bf00      	nop
 800184c:	e002      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <FSM_LcdDisplay+0x62c>
		break;
 8001852:	bf00      	nop
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	08008cd8 	.word	0x08008cd8
 800185c:	08008c9c 	.word	0x08008c9c
 8001860:	20000208 	.word	0x20000208
 8001864:	200002a0 	.word	0x200002a0
 8001868:	08008d3c 	.word	0x08008d3c
 800186c:	08008d50 	.word	0x08008d50
 8001870:	2000020b 	.word	0x2000020b
 8001874:	20000270 	.word	0x20000270
 8001878:	08008cb0 	.word	0x08008cb0
 800187c:	08008d64 	.word	0x08008d64
 8001880:	08008d78 	.word	0x08008d78
 8001884:	20000298 	.word	0x20000298
 8001888:	08008d8c 	.word	0x08008d8c
 800188c:	08008d90 	.word	0x08008d90
 8001890:	200002a4 	.word	0x200002a4
 8001894:	cccccccd 	.word	0xcccccccd
 8001898:	08008d94 	.word	0x08008d94
 800189c:	08008cc4 	.word	0x08008cc4

080018a0 <FSM_SystemControl>:

void FSM_SystemControl(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	switch(mode_sys){
 80018a4:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <FSM_SystemControl+0x1bc>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f200 80cb 	bhi.w	8001a44 <FSM_SystemControl+0x1a4>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <FSM_SystemControl+0x14>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018d5 	.word	0x080018d5
 80018bc:	08001927 	.word	0x08001927
 80018c0:	08001973 	.word	0x08001973
	case INIT:
		UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 80018c4:	2108      	movs	r1, #8
 80018c6:	4866      	ldr	r0, [pc, #408]	; (8001a60 <FSM_SystemControl+0x1c0>)
 80018c8:	f001 f9e6 	bl	8002c98 <UESP_SendMsg>

		mode_sys = SYS_CONNECT_WF;
 80018cc:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <FSM_SystemControl+0x1bc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
		break;
 80018d2:	e0c0      	b.n	8001a56 <FSM_SystemControl+0x1b6>
	case SYS_CONNECT_WF:

		if(IN_IsPressed_ms(BT_CONFIG, 2000)){
 80018d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 f93b 	bl	8001b54 <IN_IsPressed_ms>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <FSM_SystemControl+0x54>
			UESP_SendMsg(CMD_CONFIG_WF, sizeof(CMD_CONFIG_WF));
 80018e4:	2107      	movs	r1, #7
 80018e6:	485f      	ldr	r0, [pc, #380]	; (8001a64 <FSM_SystemControl+0x1c4>)
 80018e8:	f001 f9d6 	bl	8002c98 <UESP_SendMsg>

			mode_sys = SYS_CONFIG_WF;
 80018ec:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <FSM_SystemControl+0x1bc>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
			UESP_SendMsg(CMD_TRANSMIT_DATA, sizeof(CMD_TRANSMIT_DATA));

			mode_sys = SYS_PROCESS_DATA;
			}
		}
		break;
 80018f2:	e0ab      	b.n	8001a4c <FSM_SystemControl+0x1ac>
		else if(UESP_IsReceivedMsg()){
 80018f4:	f001 f9e6 	bl	8002cc4 <UESP_IsReceivedMsg>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80a6 	beq.w	8001a4c <FSM_SystemControl+0x1ac>
			if(strcmp(UESP_GetMsg(), CONNECT_WF_SUCCESS) == 0){
 8001900:	f001 f9f2 	bl	8002ce8 <UESP_GetMsg>
 8001904:	4603      	mov	r3, r0
 8001906:	4958      	ldr	r1, [pc, #352]	; (8001a68 <FSM_SystemControl+0x1c8>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fc21 	bl	8000150 <strcmp>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 809b 	bne.w	8001a4c <FSM_SystemControl+0x1ac>
			UESP_SendMsg(CMD_TRANSMIT_DATA, sizeof(CMD_TRANSMIT_DATA));
 8001916:	2109      	movs	r1, #9
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <FSM_SystemControl+0x1cc>)
 800191a:	f001 f9bd 	bl	8002c98 <UESP_SendMsg>
			mode_sys = SYS_PROCESS_DATA;
 800191e:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <FSM_SystemControl+0x1bc>)
 8001920:	2203      	movs	r2, #3
 8001922:	701a      	strb	r2, [r3, #0]
		break;
 8001924:	e092      	b.n	8001a4c <FSM_SystemControl+0x1ac>
	case SYS_CONFIG_WF:
		if(UESP_IsReceivedMsg()){
 8001926:	f001 f9cd 	bl	8002cc4 <UESP_IsReceivedMsg>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d012      	beq.n	8001956 <FSM_SystemControl+0xb6>
			if((strcmp(UESP_GetMsg(), CONFIG_WF_SUCCESS == 0))) {
 8001930:	f001 f9da 	bl	8002ce8 <UESP_GetMsg>
 8001934:	4603      	mov	r3, r0
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fc09 	bl	8000150 <strcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8085 	beq.w	8001a50 <FSM_SystemControl+0x1b0>
				UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 8001946:	2108      	movs	r1, #8
 8001948:	4845      	ldr	r0, [pc, #276]	; (8001a60 <FSM_SystemControl+0x1c0>)
 800194a:	f001 f9a5 	bl	8002c98 <UESP_SendMsg>

				mode_sys = SYS_CONNECT_WF;
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <FSM_SystemControl+0x1bc>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
		else if(IN_IsPressed(BT_CONFIG)) {
			UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));

			mode_sys = SYS_CONNECT_WF;
		}
		break;
 8001954:	e07c      	b.n	8001a50 <FSM_SystemControl+0x1b0>
		else if(IN_IsPressed(BT_CONFIG)) {
 8001956:	2000      	movs	r0, #0
 8001958:	f000 f8e8 	bl	8001b2c <IN_IsPressed>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d076      	beq.n	8001a50 <FSM_SystemControl+0x1b0>
			UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 8001962:	2108      	movs	r1, #8
 8001964:	483e      	ldr	r0, [pc, #248]	; (8001a60 <FSM_SystemControl+0x1c0>)
 8001966:	f001 f997 	bl	8002c98 <UESP_SendMsg>
			mode_sys = SYS_CONNECT_WF;
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <FSM_SystemControl+0x1bc>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
		break;
 8001970:	e06e      	b.n	8001a50 <FSM_SystemControl+0x1b0>
	case SYS_PROCESS_DATA:

		if(_time_read_data < 5) {
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <FSM_SystemControl+0x1d0>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d803      	bhi.n	8001982 <FSM_SystemControl+0xe2>
			_time_read_data = TIME_READ_DATA;
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <FSM_SystemControl+0x1d0>)
 800197c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001980:	801a      	strh	r2, [r3, #0]
//			_Data_gateway.cur = IN_ReadADC();
		}

		if(ULORA_IsReceivedMsg()) {
 8001982:	f001 f9bb 	bl	8002cfc <ULORA_IsReceivedMsg>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00f      	beq.n	80019ac <FSM_SystemControl+0x10c>
//			process data received from lora
//			=> stm32 send to esp => esp send to server


			UESP_SendMsg(msg, sprintf(msg, ULORA_GetMsg()));
 800198c:	f001 f9c8 	bl	8002d20 <ULORA_GetMsg>
 8001990:	4603      	mov	r3, r0
 8001992:	4619      	mov	r1, r3
 8001994:	4837      	ldr	r0, [pc, #220]	; (8001a74 <FSM_SystemControl+0x1d4>)
 8001996:	f004 f8cf 	bl	8005b38 <siprintf>
 800199a:	4603      	mov	r3, r0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4619      	mov	r1, r3
 80019a0:	4834      	ldr	r0, [pc, #208]	; (8001a74 <FSM_SystemControl+0x1d4>)
 80019a2:	f001 f979 	bl	8002c98 <UESP_SendMsg>

			ProcessMsg(msg);
 80019a6:	4833      	ldr	r0, [pc, #204]	; (8001a74 <FSM_SystemControl+0x1d4>)
 80019a8:	f7ff fb66 	bl	8001078 <ProcessMsg>
		}


		if(UESP_IsReceivedMsg()){
 80019ac:	f001 f98a 	bl	8002cc4 <UESP_IsReceivedMsg>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d036      	beq.n	8001a24 <FSM_SystemControl+0x184>
			if(strcmp(UESP_GetMsg(), DISCONNECT_WF) == 0){
 80019b6:	f001 f997 	bl	8002ce8 <UESP_GetMsg>
 80019ba:	4603      	mov	r3, r0
 80019bc:	492e      	ldr	r1, [pc, #184]	; (8001a78 <FSM_SystemControl+0x1d8>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fbc6 	bl	8000150 <strcmp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <FSM_SystemControl+0x13a>
				UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 80019ca:	2108      	movs	r1, #8
 80019cc:	4824      	ldr	r0, [pc, #144]	; (8001a60 <FSM_SystemControl+0x1c0>)
 80019ce:	f001 f963 	bl	8002c98 <UESP_SendMsg>

				mode_sys = SYS_CONNECT_WF;
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <FSM_SystemControl+0x1bc>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e024      	b.n	8001a24 <FSM_SystemControl+0x184>
			}
			else if(strcmp(UESP_GetMsg(), ONRELAY) == 0){
 80019da:	f001 f985 	bl	8002ce8 <UESP_GetMsg>
 80019de:	4603      	mov	r3, r0
 80019e0:	4926      	ldr	r1, [pc, #152]	; (8001a7c <FSM_SystemControl+0x1dc>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fbb4 	bl	8000150 <strcmp>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <FSM_SystemControl+0x160>
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2104      	movs	r1, #4
 80019f2:	4823      	ldr	r0, [pc, #140]	; (8001a80 <FSM_SystemControl+0x1e0>)
 80019f4:	f001 fda3 	bl	800353e <HAL_GPIO_WritePin>
				_Data_gateway.relay = 1;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <FSM_SystemControl+0x1e4>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e011      	b.n	8001a24 <FSM_SystemControl+0x184>
			}
			else if(strcmp(UESP_GetMsg(), OFFRELAY) == 0){
 8001a00:	f001 f972 	bl	8002ce8 <UESP_GetMsg>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4920      	ldr	r1, [pc, #128]	; (8001a88 <FSM_SystemControl+0x1e8>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fba1 	bl	8000150 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <FSM_SystemControl+0x184>
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2104      	movs	r1, #4
 8001a18:	4819      	ldr	r0, [pc, #100]	; (8001a80 <FSM_SystemControl+0x1e0>)
 8001a1a:	f001 fd90 	bl	800353e <HAL_GPIO_WritePin>
				_Data_gateway.relay = 0;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <FSM_SystemControl+0x1e4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

			}
		}

		if(IN_IsPressed_ms(BT_CONFIG, 2000)){
 8001a24:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f893 	bl	8001b54 <IN_IsPressed_ms>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00f      	beq.n	8001a54 <FSM_SystemControl+0x1b4>
			UESP_SendMsg(CMD_CONFIG_WF, sizeof(CMD_CONFIG_WF));
 8001a34:	2107      	movs	r1, #7
 8001a36:	480b      	ldr	r0, [pc, #44]	; (8001a64 <FSM_SystemControl+0x1c4>)
 8001a38:	f001 f92e 	bl	8002c98 <UESP_SendMsg>

			mode_sys = SYS_CONFIG_WF;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <FSM_SystemControl+0x1bc>)
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001a42:	e007      	b.n	8001a54 <FSM_SystemControl+0x1b4>
	default:
		mode_sys = INIT;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <FSM_SystemControl+0x1bc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	}
}
 8001a4a:	e004      	b.n	8001a56 <FSM_SystemControl+0x1b6>
		break;
 8001a4c:	bf00      	nop
 8001a4e:	e002      	b.n	8001a56 <FSM_SystemControl+0x1b6>
		break;
 8001a50:	bf00      	nop
 8001a52:	e000      	b.n	8001a56 <FSM_SystemControl+0x1b6>
		break;
 8001a54:	bf00      	nop
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000020a 	.word	0x2000020a
 8001a60:	08008da8 	.word	0x08008da8
 8001a64:	08008db0 	.word	0x08008db0
 8001a68:	08008db8 	.word	0x08008db8
 8001a6c:	08008dc8 	.word	0x08008dc8
 8001a70:	200002a2 	.word	0x200002a2
 8001a74:	2000020c 	.word	0x2000020c
 8001a78:	08008dd4 	.word	0x08008dd4
 8001a7c:	08008de0 	.word	0x08008de0
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	20000298 	.word	0x20000298
 8001a88:	08008de8 	.word	0x08008de8

08001a8c <IN_ReadButton>:
uint8_t IN_ReadADC(void){
//	return HAL_ADC_GetValue(adc) / 4095 * 100;
}

//this function is called every 50ms
void IN_ReadButton(void){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	e039      	b.n	8001b0c <IN_ReadButton+0x80>
		if(HAL_GPIO_ReadPin(PORT_BUTTON[i], PIN_BUTTON[i]) == BUTTON_IS_PRESSED){
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <IN_ReadButton+0x90>)
 8001a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	491f      	ldr	r1, [pc, #124]	; (8001b20 <IN_ReadButton+0x94>)
 8001aa4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f001 fd30 	bl	8003510 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <IN_ReadButton+0x4a>
			if(Counter_button_press[i] < MAX_COUNTER){
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <IN_ReadButton+0x98>)
 8001aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001abe:	2bc7      	cmp	r3, #199	; 0xc7
 8001ac0:	d821      	bhi.n	8001b06 <IN_ReadButton+0x7a>
				Counter_button_press[i]++;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <IN_ReadButton+0x98>)
 8001ac6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aca:	3201      	adds	r2, #1
 8001acc:	b291      	uxth	r1, r2
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <IN_ReadButton+0x98>)
 8001ad0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ad4:	e017      	b.n	8001b06 <IN_ReadButton+0x7a>
			}
		}
		else {
			Flag_for_button_press[i] = (Counter_button_press[i] > 0) && (Counter_button_press[i] < 10);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <IN_ReadButton+0x98>)
 8001ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <IN_ReadButton+0x66>
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <IN_ReadButton+0x98>)
 8001ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	d801      	bhi.n	8001af2 <IN_ReadButton+0x66>
 8001aee:	2201      	movs	r2, #1
 8001af0:	e000      	b.n	8001af4 <IN_ReadButton+0x68>
 8001af2:	2200      	movs	r2, #0
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	b2d1      	uxtb	r1, r2
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <IN_ReadButton+0x9c>)
 8001afa:	54d1      	strb	r1, [r2, r3]
			Counter_button_press[i] = 0;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <IN_ReadButton+0x98>)
 8001b00:	2100      	movs	r1, #0
 8001b02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0c2      	beq.n	8001a98 <IN_ReadButton+0xc>
		}
	}
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	200002ac 	.word	0x200002ac
 8001b28:	200002a8 	.word	0x200002a8

08001b2c <IN_IsPressed>:

uint8_t IN_IsPressed(uint8_t index){
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <IN_IsPressed+0x14>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e002      	b.n	8001b46 <IN_IsPressed+0x1a>

	return Flag_for_button_press[index];
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <IN_IsPressed+0x24>)
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	200002a8 	.word	0x200002a8

08001b54 <IN_IsPressed_ms>:

uint8_t IN_IsPressed_ms(uint8_t index, uint16_t duration){
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80bb      	strh	r3, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <IN_IsPressed_ms+0x1a>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e00e      	b.n	8001b8c <IN_IsPressed_ms+0x38>

	//button is read every 50ms -> counter += 1 every 50ms if button is held
	return Counter_button_press[index] >= (duration / 50);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <IN_IsPressed_ms+0x44>)
 8001b72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	4908      	ldr	r1, [pc, #32]	; (8001b9c <IN_IsPressed_ms+0x48>)
 8001b7a:	fba1 1303 	umull	r1, r3, r1, r3
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	429a      	cmp	r2, r3
 8001b84:	bf2c      	ite	cs
 8001b86:	2301      	movcs	r3, #1
 8001b88:	2300      	movcc	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200002ac 	.word	0x200002ac
 8001b9c:	51eb851f 	.word	0x51eb851f

08001ba0 <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 f949 	bl	8002e44 <HAL_Delay>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <WriteI2C>:


static void WriteI2C(uint8_t data, uint8_t mode){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f023 030f 	bic.w	r3, r3, #15
 8001bd2:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <WriteI2C+0x90>)
 8001bdc:	7adb      	ldrb	r3, [r3, #11]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <WriteI2C+0x4c>
		dataH |= LCD_RS;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <WriteI2C+0x90>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <WriteI2C+0x90>)
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	b299      	uxth	r1, r3
 8001c32:	f107 0208 	add.w	r2, r7, #8
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	f001 fdf3 	bl	8003828 <HAL_I2C_Master_Transmit>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002b4 	.word	0x200002b4

08001c50 <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	70fb      	strb	r3, [r7, #3]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70bb      	strb	r3, [r7, #2]
 8001c66:	4613      	mov	r3, r2
 8001c68:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 8001c6a:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <CLCD_Init+0x144>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 8001c70:	4a48      	ldr	r2, [pc, #288]	; (8001d94 <CLCD_Init+0x144>)
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 8001c76:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <CLCD_Init+0x144>)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <CLCD_Init+0x144>)
 8001c7e:	78bb      	ldrb	r3, [r7, #2]
 8001c80:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <CLCD_Init+0x144>)
 8001c84:	2228      	movs	r2, #40	; 0x28
 8001c86:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <CLCD_Init+0x144>)
 8001c8a:	2206      	movs	r2, #6
 8001c8c:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <CLCD_Init+0x144>)
 8001c90:	220c      	movs	r2, #12
 8001c92:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <CLCD_Init+0x144>)
 8001c96:	2214      	movs	r2, #20
 8001c98:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <CLCD_Init+0x144>)
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	72da      	strb	r2, [r3, #11]

	Delay(50);
 8001ca0:	2032      	movs	r0, #50	; 0x32
 8001ca2:	f7ff ff7d 	bl	8001ba0 <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 8001ca6:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <CLCD_Init+0x148>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <CLCD_Init+0x68>
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <CLCD_Init+0x148>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fe44 	bl	8005940 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 8001cb8:	78bb      	ldrb	r3, [r7, #2]
 8001cba:	787a      	ldrb	r2, [r7, #1]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fe34 	bl	8005930 <malloc>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <CLCD_Init+0x148>)
 8001cce:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e008      	b.n	8001ce8 <CLCD_Init+0x98>
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <CLCD_Init+0x148>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	4413      	add	r3, r2
 8001cde:	2220      	movs	r2, #32
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <CLCD_Init+0x144>)
 8001cec:	799b      	ldrb	r3, [r3, #6]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <CLCD_Init+0x144>)
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbec      	blt.n	8001cd6 <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2033      	movs	r0, #51	; 0x33
 8001d00:	f7ff ff5c 	bl	8001bbc <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2033      	movs	r0, #51	; 0x33
 8001d08:	f7ff ff58 	bl	8001bbc <WriteI2C>
	Delay(5);
 8001d0c:	2005      	movs	r0, #5
 8001d0e:	f7ff ff47 	bl	8001ba0 <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2032      	movs	r0, #50	; 0x32
 8001d16:	f7ff ff51 	bl	8001bbc <WriteI2C>
	Delay(5);
 8001d1a:	2005      	movs	r0, #5
 8001d1c:	f7ff ff40 	bl	8001ba0 <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 8001d20:	2100      	movs	r1, #0
 8001d22:	2020      	movs	r0, #32
 8001d24:	f7ff ff4a 	bl	8001bbc <WriteI2C>
	Delay(5);
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f7ff ff39 	bl	8001ba0 <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <CLCD_Init+0x144>)
 8001d30:	79db      	ldrb	r3, [r3, #7]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff41 	bl	8001bbc <WriteI2C>
	Delay(1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff ff30 	bl	8001ba0 <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <CLCD_Init+0x144>)
 8001d42:	7a5b      	ldrb	r3, [r3, #9]
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff38 	bl	8001bbc <WriteI2C>
	Delay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff ff27 	bl	8001ba0 <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <CLCD_Init+0x144>)
 8001d54:	7a9b      	ldrb	r3, [r3, #10]
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff2f 	bl	8001bbc <WriteI2C>
	Delay(1);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff ff1e 	bl	8001ba0 <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <CLCD_Init+0x144>)
 8001d66:	7a1b      	ldrb	r3, [r3, #8]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff26 	bl	8001bbc <WriteI2C>
	Delay(1);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff ff15 	bl	8001ba0 <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 8001d76:	2100      	movs	r1, #0
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff ff1f 	bl	8001bbc <WriteI2C>
	Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff ff0e 	bl	8001ba0 <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8001d84:	2100      	movs	r1, #0
 8001d86:	2002      	movs	r0, #2
 8001d88:	f7ff ff18 	bl	8001bbc <WriteI2C>
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200002b4 	.word	0x200002b4
 8001d98:	200002b0 	.word	0x200002b0

08001d9c <SetCursor>:

void SetCursor(uint8_t row, uint8_t col){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	460a      	mov	r2, r1
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <SetCursor+0x8c>)
 8001db2:	799a      	ldrb	r2, [r3, #6]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dba:	fb01 f202 	mul.w	r2, r1, r2
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <SetCursor+0x8c>)
 8001dc4:	795a      	ldrb	r2, [r3, #5]
 8001dc6:	79bb      	ldrb	r3, [r7, #6]
 8001dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dcc:	fb01 f202 	mul.w	r2, r1, r2
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	71bb      	strb	r3, [r7, #6]

	switch(row){
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d819      	bhi.n	8001e0e <SetCursor+0x72>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <SetCursor+0x44>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001df7 	.word	0x08001df7
 8001de8:	08001dff 	.word	0x08001dff
 8001dec:	08001e07 	.word	0x08001e07
	case 0:
		address_dram = 0x00 + col;
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	73fb      	strb	r3, [r7, #15]
		break;
 8001df4:	e00b      	b.n	8001e0e <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	3340      	adds	r3, #64	; 0x40
 8001dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8001dfc:	e007      	b.n	8001e0e <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 8001dfe:	79bb      	ldrb	r3, [r7, #6]
 8001e00:	3314      	adds	r3, #20
 8001e02:	73fb      	strb	r3, [r7, #15]
		break;
 8001e04:	e003      	b.n	8001e0e <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	3354      	adds	r3, #84	; 0x54
 8001e0a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e0c:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fecf 	bl	8001bbc <WriteI2C>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200002b4 	.word	0x200002b4

08001e2c <UpdateCharBuffer>:

void UpdateCharBuffer(uint8_t c){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <UpdateCharBuffer+0x40>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <UpdateCharBuffer+0x44>)
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <UpdateCharBuffer+0x48>)
 8001e42:	7952      	ldrb	r2, [r2, #5]
 8001e44:	fb01 f202 	mul.w	r2, r1, r2
 8001e48:	490b      	ldr	r1, [pc, #44]	; (8001e78 <UpdateCharBuffer+0x4c>)
 8001e4a:	7809      	ldrb	r1, [r1, #0]
 8001e4c:	440a      	add	r2, r1
 8001e4e:	4413      	add	r3, r2
 8001e50:	79fa      	ldrb	r2, [r7, #7]
 8001e52:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <UpdateCharBuffer+0x4c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <UpdateCharBuffer+0x4c>)
 8001e5e:	701a      	strb	r2, [r3, #0]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	200002b0 	.word	0x200002b0
 8001e70:	200002c1 	.word	0x200002c1
 8001e74:	200002b4 	.word	0x200002b4
 8001e78:	200002c0 	.word	0x200002c0

08001e7c <CLCD_PrintCharBuffer>:

void CLCD_PrintCharBuffer(uint8_t row, uint8_t col, char c){
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	460b      	mov	r3, r1
 8001e88:	71bb      	strb	r3, [r7, #6]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	717b      	strb	r3, [r7, #5]
	currentRow = row % LCD.ROW;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <CLCD_PrintCharBuffer+0x68>)
 8001e90:	799a      	ldrb	r2, [r3, #6]
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e98:	fb01 f202 	mul.w	r2, r1, r2
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <CLCD_PrintCharBuffer+0x6c>)
 8001ea2:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <CLCD_PrintCharBuffer+0x68>)
 8001ea6:	795a      	ldrb	r2, [r3, #5]
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001eae:	fb01 f202 	mul.w	r2, r1, r2
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <CLCD_PrintCharBuffer+0x70>)
 8001eb8:	701a      	strb	r2, [r3, #0]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <CLCD_PrintCharBuffer+0x74>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <CLCD_PrintCharBuffer+0x6c>)
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <CLCD_PrintCharBuffer+0x68>)
 8001ec6:	7952      	ldrb	r2, [r2, #5]
 8001ec8:	fb01 f202 	mul.w	r2, r1, r2
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <CLCD_PrintCharBuffer+0x70>)
 8001ece:	7809      	ldrb	r1, [r1, #0]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	797a      	ldrb	r2, [r7, #5]
 8001ed6:	701a      	strb	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200002b4 	.word	0x200002b4
 8001ee8:	200002c1 	.word	0x200002c1
 8001eec:	200002c0 	.word	0x200002c0
 8001ef0:	200002b0 	.word	0x200002b0

08001ef4 <CLCD_PrintStringBuffer>:

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	603a      	str	r2, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	460b      	mov	r3, r1
 8001f02:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <CLCD_PrintStringBuffer+0x60>)
 8001f06:	799a      	ldrb	r2, [r3, #6]
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <CLCD_PrintStringBuffer+0x64>)
 8001f18:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <CLCD_PrintStringBuffer+0x60>)
 8001f1c:	795a      	ldrb	r2, [r3, #5]
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f24:	fb01 f202 	mul.w	r2, r1, r2
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <CLCD_PrintStringBuffer+0x68>)
 8001f2e:	701a      	strb	r2, [r3, #0]
	while(*str){
 8001f30:	e006      	b.n	8001f40 <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	603a      	str	r2, [r7, #0]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff76 	bl	8001e2c <UpdateCharBuffer>
	while(*str){
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f4      	bne.n	8001f32 <CLCD_PrintStringBuffer+0x3e>
	}
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002b4 	.word	0x200002b4
 8001f58:	200002c1 	.word	0x200002c1
 8001f5c:	200002c0 	.word	0x200002c0

08001f60 <CLCD_PrintNumBuffer>:

void CLCD_PrintNumBuffer(uint8_t row, uint8_t col, int16_t num){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	71bb      	strb	r3, [r7, #6]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80bb      	strh	r3, [r7, #4]
    char flag_num = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
    unsigned char i;
    unsigned long power_of_10 = 1000000000;
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <CLCD_PrintNumBuffer+0xd8>)
 8001f78:	60bb      	str	r3, [r7, #8]
    currentRow = row % 2;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <CLCD_PrintNumBuffer+0xdc>)
 8001f84:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <CLCD_PrintNumBuffer+0xe0>)
 8001f90:	701a      	strb	r2, [r3, #0]

    if(num < 0) {
 8001f92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da07      	bge.n	8001faa <CLCD_PrintNumBuffer+0x4a>
        num *= -1;
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	80bb      	strh	r3, [r7, #4]
        UpdateCharBuffer('-');
 8001fa2:	202d      	movs	r0, #45	; 0x2d
 8001fa4:	f7ff ff42 	bl	8001e2c <UpdateCharBuffer>
 8001fa8:	e011      	b.n	8001fce <CLCD_PrintNumBuffer+0x6e>
    }
    else if(num == 0){
 8001faa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <CLCD_PrintNumBuffer+0x60>
    	UpdateCharBuffer('0');
 8001fb2:	2030      	movs	r0, #48	; 0x30
 8001fb4:	f7ff ff3a 	bl	8001e2c <UpdateCharBuffer>
    	UpdateCharBuffer('0');
 8001fb8:	2030      	movs	r0, #48	; 0x30
 8001fba:	f7ff ff37 	bl	8001e2c <UpdateCharBuffer>
//        UpdateCharBuffer(' ');
//        UpdateCharBuffer(' ');
        return;
 8001fbe:	e038      	b.n	8002032 <CLCD_PrintNumBuffer+0xd2>
    }

    else if(num < 10){
 8001fc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	dc02      	bgt.n	8001fce <CLCD_PrintNumBuffer+0x6e>
        UpdateCharBuffer('0');
 8001fc8:	2030      	movs	r0, #48	; 0x30
 8001fca:	f7ff ff2f 	bl	8001e2c <UpdateCharBuffer>
//        UpdateCharBuffer(num + '0');
    }

    for(i = 10; i > 0; i--){
 8001fce:	230a      	movs	r3, #10
 8001fd0:	73bb      	strb	r3, [r7, #14]
 8001fd2:	e02b      	b.n	800202c <CLCD_PrintNumBuffer+0xcc>
        if( (num / power_of_10) != 0){
 8001fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d80d      	bhi.n	8001ffa <CLCD_PrintNumBuffer+0x9a>
            flag_num = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
            UpdateCharBuffer(num / power_of_10 + '0');
 8001fe2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3330      	adds	r3, #48	; 0x30
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff1a 	bl	8001e2c <UpdateCharBuffer>
 8001ff8:	e005      	b.n	8002006 <CLCD_PrintNumBuffer+0xa6>
        }
        else{
            if(flag_num != 0) UpdateCharBuffer('0');
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <CLCD_PrintNumBuffer+0xa6>
 8002000:	2030      	movs	r0, #48	; 0x30
 8002002:	f7ff ff13 	bl	8001e2c <UpdateCharBuffer>
        }
        num %= power_of_10;
 8002006:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	fb01 f202 	mul.w	r2, r1, r2
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	80bb      	strh	r3, [r7, #4]
        power_of_10 /= 10;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4a09      	ldr	r2, [pc, #36]	; (8002044 <CLCD_PrintNumBuffer+0xe4>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	60bb      	str	r3, [r7, #8]
    for(i = 10; i > 0; i--){
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	3b01      	subs	r3, #1
 800202a:	73bb      	strb	r3, [r7, #14]
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1d0      	bne.n	8001fd4 <CLCD_PrintNumBuffer+0x74>
    }

//    UpdateCharBuffer(' ');
//    UpdateCharBuffer(' ');
}
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	3b9aca00 	.word	0x3b9aca00
 800203c:	200002c1 	.word	0x200002c1
 8002040:	200002c0 	.word	0x200002c0
 8002044:	cccccccd 	.word	0xcccccccd

08002048 <CLCD_PrintFloatBuffer>:

void CLCD_PrintFloatBuffer(uint8_t row, uint8_t col, float f){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	603a      	str	r2, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	460b      	mov	r3, r1
 8002056:	71bb      	strb	r3, [r7, #6]
	uint8_t integer_part, decimal_part;

	if(f >= 100) return;
 8002058:	492f      	ldr	r1, [pc, #188]	; (8002118 <CLCD_PrintFloatBuffer+0xd0>)
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	f7fe ff8a 	bl	8000f74 <__aeabi_fcmpge>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d153      	bne.n	800210e <CLCD_PrintFloatBuffer+0xc6>

    currentRow = row % 2;
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <CLCD_PrintFloatBuffer+0xd4>)
 8002070:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <CLCD_PrintFloatBuffer+0xd8>)
 800207c:	701a      	strb	r2, [r3, #0]

    integer_part = (uint8_t) f;
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f7fe ffa2 	bl	8000fc8 <__aeabi_f2uiz>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
    decimal_part = (uint8_t) ((f - integer_part)*10);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe febc 	bl	8000e08 <__aeabi_i2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f7fe fe01 	bl	8000c9c <__aeabi_fsub>
 800209a:	4603      	mov	r3, r0
 800209c:	4921      	ldr	r1, [pc, #132]	; (8002124 <CLCD_PrintFloatBuffer+0xdc>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f868 	bl	8000174 <__aeabi_fmul>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe ff8e 	bl	8000fc8 <__aeabi_f2uiz>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73bb      	strb	r3, [r7, #14]

    UpdateCharBuffer(integer_part / 10 + '0');
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <CLCD_PrintFloatBuffer+0xe0>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3330      	adds	r3, #48	; 0x30
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff feb3 	bl	8001e2c <UpdateCharBuffer>
    UpdateCharBuffer(integer_part % 10 + '0');
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <CLCD_PrintFloatBuffer+0xe0>)
 80020ca:	fba3 1302 	umull	r1, r3, r3, r2
 80020ce:	08d9      	lsrs	r1, r3, #3
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3330      	adds	r3, #48	; 0x30
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fea3 	bl	8001e2c <UpdateCharBuffer>
    UpdateCharBuffer('.');
 80020e6:	202e      	movs	r0, #46	; 0x2e
 80020e8:	f7ff fea0 	bl	8001e2c <UpdateCharBuffer>
    UpdateCharBuffer(decimal_part % 10 + '0');
 80020ec:	7bba      	ldrb	r2, [r7, #14]
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <CLCD_PrintFloatBuffer+0xe0>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	08d9      	lsrs	r1, r3, #3
 80020f6:	460b      	mov	r3, r1
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3330      	adds	r3, #48	; 0x30
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fe90 	bl	8001e2c <UpdateCharBuffer>
 800210c:	e000      	b.n	8002110 <CLCD_PrintFloatBuffer+0xc8>
	if(f >= 100) return;
 800210e:	bf00      	nop
}
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	42c80000 	.word	0x42c80000
 800211c:	200002c1 	.word	0x200002c1
 8002120:	200002c0 	.word	0x200002c0
 8002124:	41200000 	.word	0x41200000
 8002128:	cccccccd 	.word	0xcccccccd

0800212c <CLCD_DisplayScreen>:
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
}

void CLCD_DisplayScreen(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 8002132:	2300      	movs	r3, #0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	e021      	b.n	800217c <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe2d 	bl	8001d9c <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 8002142:	2300      	movs	r3, #0
 8002144:	71bb      	strb	r3, [r7, #6]
 8002146:	e011      	b.n	800216c <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <CLCD_DisplayScreen+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	4911      	ldr	r1, [pc, #68]	; (8002194 <CLCD_DisplayScreen+0x68>)
 8002150:	7949      	ldrb	r1, [r1, #5]
 8002152:	fb02 f101 	mul.w	r1, r2, r1
 8002156:	79ba      	ldrb	r2, [r7, #6]
 8002158:	440a      	add	r2, r1
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fd2b 	bl	8001bbc <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	3301      	adds	r3, #1
 800216a:	71bb      	strb	r3, [r7, #6]
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <CLCD_DisplayScreen+0x68>)
 800216e:	795b      	ldrb	r3, [r3, #5]
 8002170:	79ba      	ldrb	r2, [r7, #6]
 8002172:	429a      	cmp	r2, r3
 8002174:	d3e8      	bcc.n	8002148 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	3301      	adds	r3, #1
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <CLCD_DisplayScreen+0x68>)
 800217e:	799b      	ldrb	r3, [r3, #6]
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3d8      	bcc.n	8002138 <CLCD_DisplayScreen+0xc>
		}
	}
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200002b0 	.word	0x200002b0
 8002194:	200002b4 	.word	0x200002b4

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219c:	f000 fdf0 	bl	8002d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a0:	f000 f86e 	bl	8002280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a4:	f000 f976 	bl	8002494 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021a8:	f000 f8a6 	bl	80022f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021ac:	f000 f91e 	bl	80023ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80021b0:	f000 f8d0 	bl	8002354 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80021b4:	f000 f944 	bl	8002440 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  IN_Init(&hadc1);
  CLCD_Init(&hi2c1, 0x3F, 2, 16);
 80021b8:	2310      	movs	r3, #16
 80021ba:	2202      	movs	r2, #2
 80021bc:	213f      	movs	r1, #63	; 0x3f
 80021be:	4827      	ldr	r0, [pc, #156]	; (800225c <main+0xc4>)
 80021c0:	f7ff fd46 	bl	8001c50 <CLCD_Init>

  UART_Init(&huart1, &huart2);
 80021c4:	4926      	ldr	r1, [pc, #152]	; (8002260 <main+0xc8>)
 80021c6:	4827      	ldr	r0, [pc, #156]	; (8002264 <main+0xcc>)
 80021c8:	f000 fd2a 	bl	8002c20 <UART_Init>
  FSM_Init();
 80021cc:	f7ff f80c 	bl	80011e8 <FSM_Init>

  TM_Init(&htim2);
 80021d0:	4825      	ldr	r0, [pc, #148]	; (8002268 <main+0xd0>)
 80021d2:	f000 fc51 	bl	8002a78 <TM_Init>
  TM_SetTime(50);
 80021d6:	2032      	movs	r0, #50	; 0x32
 80021d8:	f000 fc6e 	bl	8002ab8 <TM_SetTime>

  HAL_Delay(1000);
 80021dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021e0:	f000 fe30 	bl	8002e44 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 80021e4:	f000 fc8a 	bl	8002afc <TM_IsFlag>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0fa      	beq.n	80021e4 <main+0x4c>
		  _counter_time_elapsed += 1;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <main+0xd4>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <main+0xd4>)
 80021f8:	801a      	strh	r2, [r3, #0]

		  IN_ReadButton();
 80021fa:	f7ff fc47 	bl	8001a8c <IN_ReadButton>

		  if(_time_screen >= 5) _time_screen -= 5;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <main+0xd8>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d905      	bls.n	8002212 <main+0x7a>
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <main+0xd8>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	3b05      	subs	r3, #5
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <main+0xd8>)
 8002210:	801a      	strh	r2, [r3, #0]
		  if(_time_read_data >= 5) _time_read_data -= 5;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <main+0xdc>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d905      	bls.n	8002226 <main+0x8e>
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <main+0xdc>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	3b05      	subs	r3, #5
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <main+0xdc>)
 8002224:	801a      	strh	r2, [r3, #0]

		  FSM_SystemControl();
 8002226:	f7ff fb3b 	bl	80018a0 <FSM_SystemControl>
//		  FSM_DataTransfer();
		  FSM_LcdDisplay();
 800222a:	f7fe fffd 	bl	8001228 <FSM_LcdDisplay>

		  if(_counter_time_elapsed % 10 == 0) HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <main+0xd4>)
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <main+0xe0>)
 8002234:	fba3 1302 	umull	r1, r3, r3, r2
 8002238:	08d9      	lsrs	r1, r3, #3
 800223a:	460b      	mov	r3, r1
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <main+0xbc>
 800224a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <main+0xe4>)
 8002250:	f001 f98d 	bl	800356e <HAL_GPIO_TogglePin>

		  CLCD_DisplayScreen();
 8002254:	f7ff ff6a 	bl	800212c <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 8002258:	e7c4      	b.n	80021e4 <main+0x4c>
 800225a:	bf00      	nop
 800225c:	200002c4 	.word	0x200002c4
 8002260:	200003a4 	.word	0x200003a4
 8002264:	20000360 	.word	0x20000360
 8002268:	20000318 	.word	0x20000318
 800226c:	200002a4 	.word	0x200002a4
 8002270:	200002a0 	.word	0x200002a0
 8002274:	200002a2 	.word	0x200002a2
 8002278:	cccccccd 	.word	0xcccccccd
 800227c:	40011000 	.word	0x40011000

08002280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b090      	sub	sp, #64	; 0x40
 8002284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	2228      	movs	r2, #40	; 0x28
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fb5e 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a6:	2301      	movs	r3, #1
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022aa:	2310      	movs	r3, #16
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fdbc 	bl	8003e34 <HAL_RCC_OscConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80022c2:	f000 f969 	bl	8002598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c6:	230f      	movs	r3, #15
 80022c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 f82a 	bl	8004338 <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80022ea:	f000 f955 	bl	8002598 <Error_Handler>
  }
}
 80022ee:	bf00      	nop
 80022f0:	3740      	adds	r7, #64	; 0x40
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_I2C1_Init+0x50>)
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <MX_I2C1_Init+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_I2C1_Init+0x50>)
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_I2C1_Init+0x58>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_I2C1_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_I2C1_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_I2C1_Init+0x50>)
 8002316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_I2C1_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_I2C1_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_I2C1_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_I2C1_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_I2C1_Init+0x50>)
 8002336:	f001 f933 	bl	80035a0 <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 f92a 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200002c4 	.word	0x200002c4
 800234c:	40005400 	.word	0x40005400
 8002350:	000186a0 	.word	0x000186a0

08002354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_TIM2_Init+0x94>)
 800237a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800237e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002388:	2231      	movs	r2, #49	; 0x31
 800238a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_TIM2_Init+0x94>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002398:	4813      	ldr	r0, [pc, #76]	; (80023e8 <MX_TIM2_Init+0x94>)
 800239a:	f002 f965 	bl	8004668 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023a4:	f000 f8f8 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <MX_TIM2_Init+0x94>)
 80023b6:	f002 fb01 	bl	80049bc <HAL_TIM_ConfigClockSource>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023c0:	f000 f8ea 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_TIM2_Init+0x94>)
 80023d2:	f002 fcd3 	bl	8004d7c <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023dc:	f000 f8dc 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000318 	.word	0x20000318

080023ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_USART1_UART_Init+0x50>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 80023f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002424:	f002 fd1a 	bl	8004e5c <HAL_UART_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800242e:	f000 f8b3 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000360 	.word	0x20000360
 800243c:	40013800 	.word	0x40013800

08002440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <MX_USART2_UART_Init+0x50>)
 8002448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800244c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002466:	220c      	movs	r2, #12
 8002468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002478:	f002 fcf0 	bl	8004e5c <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002482:	f000 f889 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200003a4 	.word	0x200003a4
 8002490:	40004400 	.word	0x40004400

08002494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a36      	ldr	r2, [pc, #216]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a30      	ldr	r2, [pc, #192]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a2a      	ldr	r2, [pc, #168]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <MX_GPIO_Init+0xf4>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024f6:	4825      	ldr	r0, [pc, #148]	; (800258c <MX_GPIO_Init+0xf8>)
 80024f8:	f001 f821 	bl	800353e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2130      	movs	r1, #48	; 0x30
 8002500:	4823      	ldr	r0, [pc, #140]	; (8002590 <MX_GPIO_Init+0xfc>)
 8002502:	f001 f81c 	bl	800353e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	2104      	movs	r1, #4
 800250a:	4822      	ldr	r0, [pc, #136]	; (8002594 <MX_GPIO_Init+0x100>)
 800250c:	f001 f817 	bl	800353e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2302      	movs	r3, #2
 8002520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4619      	mov	r1, r3
 8002528:	4818      	ldr	r0, [pc, #96]	; (800258c <MX_GPIO_Init+0xf8>)
 800252a:	f000 fe6d 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800252e:	2330      	movs	r3, #48	; 0x30
 8002530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002532:	2301      	movs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2302      	movs	r3, #2
 800253c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	4812      	ldr	r0, [pc, #72]	; (8002590 <MX_GPIO_Init+0xfc>)
 8002546:	f000 fe5f 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT0_Pin */
  GPIO_InitStruct.Pin = BT0_Pin;
 800254a:	2302      	movs	r3, #2
 800254c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT0_GPIO_Port, &GPIO_InitStruct);
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4619      	mov	r1, r3
 800255c:	480d      	ldr	r0, [pc, #52]	; (8002594 <MX_GPIO_Init+0x100>)
 800255e:	f000 fe53 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8002562:	2304      	movs	r3, #4
 8002564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256a:	2301      	movs	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2302      	movs	r3, #2
 8002570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	4619      	mov	r1, r3
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <MX_GPIO_Init+0x100>)
 800257a:	f000 fe45 	bl	8003208 <HAL_GPIO_Init>

}
 800257e:	bf00      	nop
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40011000 	.word	0x40011000
 8002590:	40010800 	.word	0x40010800
 8002594:	40010c00 	.word	0x40010c00

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_MspInit+0x5c>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4a14      	ldr	r2, [pc, #80]	; (8002600 <HAL_MspInit+0x5c>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6193      	str	r3, [r2, #24]
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_MspInit+0x5c>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_MspInit+0x5c>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_MspInit+0x5c>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_MspInit+0x5c>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_MspInit+0x60>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_MspInit+0x60>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000

08002608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <HAL_I2C_MspInit+0x70>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d123      	bne.n	8002670 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <HAL_I2C_MspInit+0x74>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <HAL_I2C_MspInit+0x74>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_I2C_MspInit+0x74>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002640:	23c0      	movs	r3, #192	; 0xc0
 8002642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4619      	mov	r1, r3
 8002652:	480b      	ldr	r0, [pc, #44]	; (8002680 <HAL_I2C_MspInit+0x78>)
 8002654:	f000 fdd8 	bl	8003208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_I2C_MspInit+0x74>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <HAL_I2C_MspInit+0x74>)
 800265e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002662:	61d3      	str	r3, [r2, #28]
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_I2C_MspInit+0x74>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40005400 	.word	0x40005400
 800267c:	40021000 	.word	0x40021000
 8002680:	40010c00 	.word	0x40010c00

08002684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d113      	bne.n	80026be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_TIM_Base_MspInit+0x44>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_TIM_Base_MspInit+0x44>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_TIM_Base_MspInit+0x44>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	201c      	movs	r0, #28
 80026b4:	f000 fcc1 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026b8:	201c      	movs	r0, #28
 80026ba:	f000 fcda 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <HAL_UART_MspInit+0x118>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d13a      	bne.n	8002762 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ec:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800271c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	4619      	mov	r1, r3
 8002730:	482e      	ldr	r0, [pc, #184]	; (80027ec <HAL_UART_MspInit+0x120>)
 8002732:	f000 fd69 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	4619      	mov	r1, r3
 800274a:	4828      	ldr	r0, [pc, #160]	; (80027ec <HAL_UART_MspInit+0x120>)
 800274c:	f000 fd5c 	bl	8003208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2025      	movs	r0, #37	; 0x25
 8002756:	f000 fc70 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800275a:	2025      	movs	r0, #37	; 0x25
 800275c:	f000 fc89 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002760:	e03c      	b.n	80027dc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_UART_MspInit+0x124>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d137      	bne.n	80027dc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002776:	61d3      	str	r3, [r2, #28]
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800279c:	2304      	movs	r3, #4
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0318 	add.w	r3, r7, #24
 80027ac:	4619      	mov	r1, r3
 80027ae:	480f      	ldr	r0, [pc, #60]	; (80027ec <HAL_UART_MspInit+0x120>)
 80027b0:	f000 fd2a 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027b4:	2308      	movs	r3, #8
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0318 	add.w	r3, r7, #24
 80027c4:	4619      	mov	r1, r3
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_UART_MspInit+0x120>)
 80027c8:	f000 fd1e 	bl	8003208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2026      	movs	r0, #38	; 0x26
 80027d2:	f000 fc32 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027d6:	2026      	movs	r0, #38	; 0x26
 80027d8:	f000 fc4b 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 80027dc:	bf00      	nop
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40013800 	.word	0x40013800
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40004400 	.word	0x40004400

080027f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <NMI_Handler+0x4>

080027fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <HardFault_Handler+0x4>

08002800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <MemManage_Handler+0x4>

08002806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <UsageFault_Handler+0x4>

08002812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283a:	f000 fae7 	bl	8002e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <TIM2_IRQHandler+0x10>)
 800284a:	f001 ffaf 	bl	80047ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000318 	.word	0x20000318

08002858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <USART1_IRQHandler+0x10>)
 800285e:	f002 fc0d 	bl	800507c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000360 	.word	0x20000360

0800286c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <USART2_IRQHandler+0x10>)
 8002872:	f002 fc03 	bl	800507c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200003a4 	.word	0x200003a4

08002880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <_kill>:

int _kill(int pid, int sig)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002898:	f003 f820 	bl	80058dc <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	2216      	movs	r2, #22
 80028a0:	601a      	str	r2, [r3, #0]
  return -1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <_exit>:

void _exit (int status)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffe7 	bl	800288e <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c0:	e7fe      	b.n	80028c0 <_exit+0x12>

080028c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e00a      	b.n	80028ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d4:	f3af 8000 	nop.w
 80028d8:	4601      	mov	r1, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	60ba      	str	r2, [r7, #8]
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbf0      	blt.n	80028d4 <_read+0x12>
  }

  return len;
 80028f2:	687b      	ldr	r3, [r7, #4]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e009      	b.n	8002922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	60ba      	str	r2, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf1      	blt.n	800290e <_write+0x12>
  }
  return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_close>:

int _close(int file)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295a:	605a      	str	r2, [r3, #4]
  return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <_isatty>:

int _isatty(int file)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <_sbrk+0x5c>)
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <_sbrk+0x60>)
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <_sbrk+0x64>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <_sbrk+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c4:	f002 ff8a 	bl	80058dc <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e009      	b.n	80029e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <_sbrk+0x64>)
 80029e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20005000 	.word	0x20005000
 80029f4:	00000400 	.word	0x00000400
 80029f8:	200003e8 	.word	0x200003e8
 80029fc:	200004e0 	.word	0x200004e0

08002a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint8_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <RunSoftwareTimer+0x38>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <RunSoftwareTimer+0x2e>
		counter_timer--;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <RunSoftwareTimer+0x38>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <RunSoftwareTimer+0x38>)
 8002a22:	701a      	strb	r2, [r3, #0]
		if(counter_timer == 0){
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <RunSoftwareTimer+0x38>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <RunSoftwareTimer+0x2e>
			counter_timer = MUL_timer;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <RunSoftwareTimer+0x3c>)
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <RunSoftwareTimer+0x38>)
 8002a32:	701a      	strb	r2, [r3, #0]
			flag_timer = 1;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <RunSoftwareTimer+0x40>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200003f1 	.word	0x200003f1
 8002a48:	2000000d 	.word	0x2000000d
 8002a4c:	200003f0 	.word	0x200003f0

08002a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 8002a66:	f7ff ffd1 	bl	8002a0c <RunSoftwareTimer>
	}
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200003ec 	.word	0x200003ec

08002a78 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	stimer = htim;
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <TM_Init+0x30>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <TM_Init+0x34>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <TM_Init+0x38>)
 8002a8c:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <TM_Init+0x3c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <TM_Init+0x30>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fe35 	bl	8004708 <HAL_TIM_Base_Start_IT>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200003ec 	.word	0x200003ec
 8002aac:	2000000d 	.word	0x2000000d
 8002ab0:	200003f1 	.word	0x200003f1
 8002ab4:	200003f0 	.word	0x200003f0

08002ab8 <TM_SetTime>:

void TM_SetTime(uint16_t duration){
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4a09      	ldr	r2, [pc, #36]	; (8002aec <TM_SetTime+0x34>)
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <TM_SetTime+0x38>)
 8002ad0:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <TM_SetTime+0x38>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <TM_SetTime+0x3c>)
 8002ad8:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <TM_SetTime+0x40>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c
 8002af0:	2000000d 	.word	0x2000000d
 8002af4:	200003f1 	.word	0x200003f1
 8002af8:	200003f0 	.word	0x200003f0

08002afc <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
	if(flag_timer) {
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <TM_IsFlag+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d004      	beq.n	8002b12 <TM_IsFlag+0x16>
		flag_timer = 0;
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <TM_IsFlag+0x20>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
		return 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <TM_IsFlag+0x18>
	}
	return 0;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	200003f0 	.word	0x200003f0

08002b20 <HAL_UART_RxCpltCallback>:
uint8_t byte_esp_received, byte_lora_received;
uint8_t flag_esp_received_str, flag_lora_received_str;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == u_esp->Instance){
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <HAL_UART_RxCpltCallback+0xd8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d12a      	bne.n	8002b8c <HAL_UART_RxCpltCallback+0x6c>
		if(byte_esp_received == '!'){
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_UART_RxCpltCallback+0xdc>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b21      	cmp	r3, #33	; 0x21
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_RxCpltCallback+0x2c>
			index_msg_esp = 0;
 8002b3e:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
			flag_esp_received_str = 0;
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_UART_RxCpltCallback+0xe4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e018      	b.n	8002b7e <HAL_UART_RxCpltCallback+0x5e>
		}
		else if(byte_esp_received == '#'){
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_UART_RxCpltCallback+0xdc>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b23      	cmp	r3, #35	; 0x23
 8002b52:	d109      	bne.n	8002b68 <HAL_UART_RxCpltCallback+0x48>
			msg_esp[index_msg_esp] = '\0';
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_UART_RxCpltCallback+0xe8>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5499      	strb	r1, [r3, r2]
			flag_esp_received_str = 1;
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_UART_RxCpltCallback+0xe4>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e00a      	b.n	8002b7e <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			msg_esp[index_msg_esp++] = byte_esp_received;
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	b2d1      	uxtb	r1, r2
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_UART_RxCpltCallback+0xe0>)
 8002b72:	7011      	strb	r1, [r2, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_UART_RxCpltCallback+0xdc>)
 8002b78:	7819      	ldrb	r1, [r3, #0]
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_UART_RxCpltCallback+0xe8>)
 8002b7c:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(u_esp, &byte_esp_received, 1);
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_UART_RxCpltCallback+0xd8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	491d      	ldr	r1, [pc, #116]	; (8002bfc <HAL_UART_RxCpltCallback+0xdc>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fa47 	bl	800501a <HAL_UART_Receive_IT>
	}

	if(huart->Instance == u_lora->Instance){
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <HAL_UART_RxCpltCallback+0xec>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d12a      	bne.n	8002bf0 <HAL_UART_RxCpltCallback+0xd0>
		if(byte_lora_received == '!'){
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_UART_RxCpltCallback+0xf0>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b21      	cmp	r3, #33	; 0x21
 8002ba0:	d106      	bne.n	8002bb0 <HAL_UART_RxCpltCallback+0x90>
			index_msg_lora = 0;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_UART_RxCpltCallback+0xf4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
			flag_lora_received_str = 0;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_UART_RxCpltCallback+0xf8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e018      	b.n	8002be2 <HAL_UART_RxCpltCallback+0xc2>
		}
		else if(byte_lora_received == '#'){
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_UART_RxCpltCallback+0xf0>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b23      	cmp	r3, #35	; 0x23
 8002bb6:	d109      	bne.n	8002bcc <HAL_UART_RxCpltCallback+0xac>
			msg_lora[index_msg_lora] = '\0';
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_UART_RxCpltCallback+0xf4>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_UART_RxCpltCallback+0xfc>)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]
			flag_lora_received_str = 1;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_UART_RxCpltCallback+0xf8>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e00a      	b.n	8002be2 <HAL_UART_RxCpltCallback+0xc2>
		}
		else {
			msg_lora[index_msg_lora++] = byte_lora_received;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_UART_RxCpltCallback+0xf4>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	b2d1      	uxtb	r1, r2
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_UART_RxCpltCallback+0xf4>)
 8002bd6:	7011      	strb	r1, [r2, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_UART_RxCpltCallback+0xf0>)
 8002bdc:	7819      	ldrb	r1, [r3, #0]
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_UART_RxCpltCallback+0xfc>)
 8002be0:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(u_lora, &byte_lora_received, 1);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_UART_RxCpltCallback+0xec>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	4909      	ldr	r1, [pc, #36]	; (8002c10 <HAL_UART_RxCpltCallback+0xf0>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fa15 	bl	800501a <HAL_UART_Receive_IT>
	}
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200003f4 	.word	0x200003f4
 8002bfc:	200004c6 	.word	0x200004c6
 8002c00:	200004c4 	.word	0x200004c4
 8002c04:	200004c8 	.word	0x200004c8
 8002c08:	200003fc 	.word	0x200003fc
 8002c0c:	200003f8 	.word	0x200003f8
 8002c10:	200004c7 	.word	0x200004c7
 8002c14:	200004c5 	.word	0x200004c5
 8002c18:	200004c9 	.word	0x200004c9
 8002c1c:	20000460 	.word	0x20000460

08002c20 <UART_Init>:




//==================HIGH LEVEL FUNCTION==================//
void UART_Init(UART_HandleTypeDef* uart_esp, UART_HandleTypeDef* uart_lora){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	u_esp = uart_esp;
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <UART_Init+0x58>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6013      	str	r3, [r2, #0]
	u_lora = uart_lora;
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <UART_Init+0x5c>)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6013      	str	r3, [r2, #0]
	index_msg_esp = index_msg_lora = 0;
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <UART_Init+0x60>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <UART_Init+0x60>)
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <UART_Init+0x64>)
 8002c42:	701a      	strb	r2, [r3, #0]
	flag_esp_received_str = flag_lora_received_str = 0;
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <UART_Init+0x68>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <UART_Init+0x68>)
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <UART_Init+0x6c>)
 8002c50:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(u_esp, &byte_esp_received, 1);
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <UART_Init+0x58>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	490d      	ldr	r1, [pc, #52]	; (8002c90 <UART_Init+0x70>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 f9dd 	bl	800501a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(u_lora, &byte_lora_received, 1);
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <UART_Init+0x5c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	490b      	ldr	r1, [pc, #44]	; (8002c94 <UART_Init+0x74>)
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 f9d6 	bl	800501a <HAL_UART_Receive_IT>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200003f4 	.word	0x200003f4
 8002c7c:	200003f8 	.word	0x200003f8
 8002c80:	200004c5 	.word	0x200004c5
 8002c84:	200004c4 	.word	0x200004c4
 8002c88:	200004c9 	.word	0x200004c9
 8002c8c:	200004c8 	.word	0x200004c8
 8002c90:	200004c6 	.word	0x200004c6
 8002c94:	200004c7 	.word	0x200004c7

08002c98 <UESP_SendMsg>:

void UESP_SendMsg(char* msg, uint8_t size){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
//	HAL_UART_Transmit(u_esp, msg, sizeof(msg), 1000);
	HAL_UART_Transmit(u_esp, msg, size, 1000);
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <UESP_SendMsg+0x28>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	f002 f920 	bl	8004ef6 <HAL_UART_Transmit>

}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200003f4 	.word	0x200003f4

08002cc4 <UESP_IsReceivedMsg>:

uint8_t UESP_IsReceivedMsg(void){
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
	uint8_t temp = flag_esp_received_str;
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <UESP_IsReceivedMsg+0x20>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]

	flag_esp_received_str = 0;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <UESP_IsReceivedMsg+0x20>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
	return temp;
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	200004c8 	.word	0x200004c8

08002ce8 <UESP_GetMsg>:

uint8_t* UESP_GetMsg(void){
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

	return msg_esp;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <UESP_GetMsg+0x10>)
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200003fc 	.word	0x200003fc

08002cfc <ULORA_IsReceivedMsg>:

void ULORA_SendMsg(char* msg, uint8_t size){
	HAL_UART_Transmit(u_lora, msg, size, 1000);
}

uint8_t ULORA_IsReceivedMsg(void){
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
	uint8_t temp = flag_lora_received_str;
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <ULORA_IsReceivedMsg+0x20>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]

	flag_lora_received_str = 0;
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <ULORA_IsReceivedMsg+0x20>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
	return temp;
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	200004c9 	.word	0x200004c9

08002d20 <ULORA_GetMsg>:

uint8_t* ULORA_GetMsg(void){
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
//	if(!flag_lora_received_str) return "";

//	flag_lora_received_str = 0;

	return msg_lora;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <ULORA_GetMsg+0x10>)
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000460 	.word	0x20000460

08002d34 <Reset_Handler>:
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <LoopFillZerobss+0x12>)
 8002d36:	490d      	ldr	r1, [pc, #52]	; (8002d6c <LoopFillZerobss+0x16>)
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <LoopFillZerobss+0x1a>)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:
 8002d3e:	58d4      	ldr	r4, [r2, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:
 8002d44:	18c4      	adds	r4, r0, r3
 8002d46:	428c      	cmp	r4, r1
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <LoopFillZerobss+0x1e>)
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <LoopFillZerobss+0x22>)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:
 8002d56:	42a2      	cmp	r2, r4
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>
 8002d5a:	f7ff fe51 	bl	8002a00 <SystemInit>
 8002d5e:	f002 fdc3 	bl	80058e8 <__libc_init_array>
 8002d62:	f7ff fa19 	bl	8002198 <main>
 8002d66:	4770      	bx	lr
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	200001ec 	.word	0x200001ec
 8002d70:	080092b0 	.word	0x080092b0
 8002d74:	200001ec 	.word	0x200001ec
 8002d78:	200004e0 	.word	0x200004e0

08002d7c <ADC1_2_IRQHandler>:
 8002d7c:	e7fe      	b.n	8002d7c <ADC1_2_IRQHandler>
	...

08002d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_Init+0x28>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_Init+0x28>)
 8002d8a:	f043 0310 	orr.w	r3, r3, #16
 8002d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f000 f947 	bl	8003024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d96:	200f      	movs	r0, #15
 8002d98:	f000 f808 	bl	8002dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9c:	f7ff fc02 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40022000 	.word	0x40022000

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x54>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x58>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f95f 	bl	800308e <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f000 f927 	bl	800303a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_InitTick+0x5c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000008 	.word	0x20000008
 8002e04:	20000014 	.word	0x20000014
 8002e08:	20000010 	.word	0x20000010

08002e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_IncTick+0x1c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_IncTick+0x20>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <HAL_IncTick+0x20>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	20000014 	.word	0x20000014
 8002e2c:	200004cc 	.word	0x200004cc

08002e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <HAL_GetTick+0x10>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	200004cc 	.word	0x200004cc

08002e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d005      	beq.n	8002e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_Delay+0x44>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e6a:	bf00      	nop
 8002e6c:	f7ff ffe0 	bl	8002e30 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d8f7      	bhi.n	8002e6c <HAL_Delay+0x28>
  {
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000014 	.word	0x20000014

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4906      	ldr	r1, [pc, #24]	; (8002f24 <__NVIC_EnableIRQ+0x34>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff0:	d301      	bcc.n	8002ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00f      	b.n	8003016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <SysTick_Config+0x40>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffe:	210f      	movs	r1, #15
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f7ff ff90 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SysTick_Config+0x40>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <SysTick_Config+0x40>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	e000e010 	.word	0xe000e010

08003024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff2d 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff42 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff90 	bl	8002f7c <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5f 	bl	8002f28 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff35 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffa2 	bl	8002fe0 <SysTick_Config>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2204      	movs	r2, #4
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 020e 	bic.w	r2, r2, #14
 80030dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800312e:	2b02      	cmp	r3, #2
 8003130:	d005      	beq.n	800313e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e051      	b.n	80031e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020e 	bic.w	r2, r2, #14
 800314c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_DMA_Abort_IT+0xd0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d029      	beq.n	80031bc <HAL_DMA_Abort_IT+0xa0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <HAL_DMA_Abort_IT+0xd4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d022      	beq.n	80031b8 <HAL_DMA_Abort_IT+0x9c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_DMA_Abort_IT+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d01a      	beq.n	80031b2 <HAL_DMA_Abort_IT+0x96>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_DMA_Abort_IT+0xdc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d012      	beq.n	80031ac <HAL_DMA_Abort_IT+0x90>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_DMA_Abort_IT+0xe0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00a      	beq.n	80031a6 <HAL_DMA_Abort_IT+0x8a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_DMA_Abort_IT+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d102      	bne.n	80031a0 <HAL_DMA_Abort_IT+0x84>
 800319a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319e:	e00e      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	e00b      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031aa:	e008      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b0:	e005      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b6:	e002      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031b8:	2310      	movs	r3, #16
 80031ba:	e000      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031bc:	2301      	movs	r3, #1
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_DMA_Abort_IT+0xe8>)
 80031c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
    } 
  }
  return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40020008 	.word	0x40020008
 80031f0:	4002001c 	.word	0x4002001c
 80031f4:	40020030 	.word	0x40020030
 80031f8:	40020044 	.word	0x40020044
 80031fc:	40020058 	.word	0x40020058
 8003200:	4002006c 	.word	0x4002006c
 8003204:	40020000 	.word	0x40020000

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b08b      	sub	sp, #44	; 0x2c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321a:	e169      	b.n	80034f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800321c:	2201      	movs	r2, #1
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8158 	bne.w	80034ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a9a      	ldr	r2, [pc, #616]	; (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d05e      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003244:	4a98      	ldr	r2, [pc, #608]	; (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d875      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800324a:	4a98      	ldr	r2, [pc, #608]	; (80034ac <HAL_GPIO_Init+0x2a4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d058      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003250:	4a96      	ldr	r2, [pc, #600]	; (80034ac <HAL_GPIO_Init+0x2a4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d86f      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003256:	4a96      	ldr	r2, [pc, #600]	; (80034b0 <HAL_GPIO_Init+0x2a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d052      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 800325c:	4a94      	ldr	r2, [pc, #592]	; (80034b0 <HAL_GPIO_Init+0x2a8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d869      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003262:	4a94      	ldr	r2, [pc, #592]	; (80034b4 <HAL_GPIO_Init+0x2ac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04c      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003268:	4a92      	ldr	r2, [pc, #584]	; (80034b4 <HAL_GPIO_Init+0x2ac>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d863      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800326e:	4a92      	ldr	r2, [pc, #584]	; (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d046      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003274:	4a90      	ldr	r2, [pc, #576]	; (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d85d      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800327a:	2b12      	cmp	r3, #18
 800327c:	d82a      	bhi.n	80032d4 <HAL_GPIO_Init+0xcc>
 800327e:	2b12      	cmp	r3, #18
 8003280:	d859      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_GPIO_Init+0x80>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003303 	.word	0x08003303
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032ef 	.word	0x080032ef
 8003294:	08003331 	.word	0x08003331
 8003298:	08003337 	.word	0x08003337
 800329c:	08003337 	.word	0x08003337
 80032a0:	08003337 	.word	0x08003337
 80032a4:	08003337 	.word	0x08003337
 80032a8:	08003337 	.word	0x08003337
 80032ac:	08003337 	.word	0x08003337
 80032b0:	08003337 	.word	0x08003337
 80032b4:	08003337 	.word	0x08003337
 80032b8:	08003337 	.word	0x08003337
 80032bc:	08003337 	.word	0x08003337
 80032c0:	08003337 	.word	0x08003337
 80032c4:	08003337 	.word	0x08003337
 80032c8:	08003337 	.word	0x08003337
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	4a79      	ldr	r2, [pc, #484]	; (80034bc <HAL_GPIO_Init+0x2b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032da:	e02c      	b.n	8003336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	623b      	str	r3, [r7, #32]
          break;
 80032e2:	e029      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e024      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	3308      	adds	r3, #8
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e01f      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	330c      	adds	r3, #12
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e01a      	b.n	8003338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330a:	2304      	movs	r3, #4
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e013      	b.n	8003338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003318:	2308      	movs	r3, #8
 800331a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	611a      	str	r2, [r3, #16]
          break;
 8003322:	e009      	b.n	8003338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	615a      	str	r2, [r3, #20]
          break;
 800332e:	e003      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x130>
          break;
 8003336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	d801      	bhi.n	8003342 <HAL_GPIO_Init+0x13a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	e001      	b.n	8003346 <HAL_GPIO_Init+0x13e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d802      	bhi.n	8003354 <HAL_GPIO_Init+0x14c>
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	e002      	b.n	800335a <HAL_GPIO_Init+0x152>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	3b08      	subs	r3, #8
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	210f      	movs	r1, #15
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80b1 	beq.w	80034ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003388:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a4c      	ldr	r2, [pc, #304]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6193      	str	r3, [r2, #24]
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a0:	4a48      	ldr	r2, [pc, #288]	; (80034c4 <HAL_GPIO_Init+0x2bc>)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <HAL_GPIO_Init+0x2c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1ec>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_GPIO_Init+0x2c4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1e8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3e      	ldr	r2, [pc, #248]	; (80034d0 <HAL_GPIO_Init+0x2c8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1e4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <HAL_GPIO_Init+0x2cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1e0>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e004      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f4:	2300      	movs	r3, #0
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	f002 0203 	and.w	r2, r2, #3
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	4093      	lsls	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003406:	492f      	ldr	r1, [pc, #188]	; (80034c4 <HAL_GPIO_Init+0x2bc>)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	492c      	ldr	r1, [pc, #176]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4928      	ldr	r1, [pc, #160]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4922      	ldr	r1, [pc, #136]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	43db      	mvns	r3, r3
 800345e:	491e      	ldr	r1, [pc, #120]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003460:	4013      	ands	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4918      	ldr	r1, [pc, #96]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	43db      	mvns	r3, r3
 8003486:	4914      	ldr	r1, [pc, #80]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003488:	4013      	ands	r3, r2
 800348a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d021      	beq.n	80034dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
 80034a4:	e021      	b.n	80034ea <HAL_GPIO_Init+0x2e2>
 80034a6:	bf00      	nop
 80034a8:	10320000 	.word	0x10320000
 80034ac:	10310000 	.word	0x10310000
 80034b0:	10220000 	.word	0x10220000
 80034b4:	10210000 	.word	0x10210000
 80034b8:	10120000 	.word	0x10120000
 80034bc:	10110000 	.word	0x10110000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010800 	.word	0x40010800
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_GPIO_Init+0x304>)
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	4909      	ldr	r1, [pc, #36]	; (800350c <HAL_GPIO_Init+0x304>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f47f ae8e 	bne.w	800321c <HAL_GPIO_Init+0x14>
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	372c      	adds	r7, #44	; 0x2c
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40010400 	.word	0x40010400

08003510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	887b      	ldrh	r3, [r7, #2]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e001      	b.n	8003532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	807b      	strh	r3, [r7, #2]
 800354a:	4613      	mov	r3, r2
 800354c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800354e:	787b      	ldrb	r3, [r7, #1]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003554:	887a      	ldrh	r2, [r7, #2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800355a:	e003      	b.n	8003564 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800355c:	887b      	ldrh	r3, [r7, #2]
 800355e:	041a      	lsls	r2, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	041a      	lsls	r2, r3, #16
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43d9      	mvns	r1, r3
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	400b      	ands	r3, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e12b      	b.n	800380a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff f81e 	bl	8002608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003604:	f000 ffea 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8003608:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4a81      	ldr	r2, [pc, #516]	; (8003814 <HAL_I2C_Init+0x274>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d807      	bhi.n	8003624 <HAL_I2C_Init+0x84>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a80      	ldr	r2, [pc, #512]	; (8003818 <HAL_I2C_Init+0x278>)
 8003618:	4293      	cmp	r3, r2
 800361a:	bf94      	ite	ls
 800361c:	2301      	movls	r3, #1
 800361e:	2300      	movhi	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e006      	b.n	8003632 <HAL_I2C_Init+0x92>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a7d      	ldr	r2, [pc, #500]	; (800381c <HAL_I2C_Init+0x27c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	bf94      	ite	ls
 800362c:	2301      	movls	r3, #1
 800362e:	2300      	movhi	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0e7      	b.n	800380a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a78      	ldr	r2, [pc, #480]	; (8003820 <HAL_I2C_Init+0x280>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0c9b      	lsrs	r3, r3, #18
 8003644:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <HAL_I2C_Init+0x274>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d802      	bhi.n	8003674 <HAL_I2C_Init+0xd4>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3301      	adds	r3, #1
 8003672:	e009      	b.n	8003688 <HAL_I2C_Init+0xe8>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	4a69      	ldr	r2, [pc, #420]	; (8003824 <HAL_I2C_Init+0x284>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	3301      	adds	r3, #1
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	430b      	orrs	r3, r1
 800368e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800369a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	495c      	ldr	r1, [pc, #368]	; (8003814 <HAL_I2C_Init+0x274>)
 80036a4:	428b      	cmp	r3, r1
 80036a6:	d819      	bhi.n	80036dc <HAL_I2C_Init+0x13c>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e59      	subs	r1, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036bc:	400b      	ands	r3, r1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_I2C_Init+0x138>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e59      	subs	r1, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d6:	e051      	b.n	800377c <HAL_I2C_Init+0x1dc>
 80036d8:	2304      	movs	r3, #4
 80036da:	e04f      	b.n	800377c <HAL_I2C_Init+0x1dc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <HAL_I2C_Init+0x168>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1e58      	subs	r0, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	440b      	add	r3, r1
 80036f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e012      	b.n	800372e <HAL_I2C_Init+0x18e>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	0099      	lsls	r1, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	fbb0 f3f3 	udiv	r3, r0, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Init+0x196>
 8003732:	2301      	movs	r3, #1
 8003734:	e022      	b.n	800377c <HAL_I2C_Init+0x1dc>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10e      	bne.n	800375c <HAL_I2C_Init+0x1bc>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1e58      	subs	r0, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	440b      	add	r3, r1
 800374c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375a:	e00f      	b.n	800377c <HAL_I2C_Init+0x1dc>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e58      	subs	r0, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	0099      	lsls	r1, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	6809      	ldr	r1, [r1, #0]
 8003780:	4313      	orrs	r3, r2
 8003782:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6911      	ldr	r1, [r2, #16]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	430b      	orrs	r3, r1
 80037be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	000186a0 	.word	0x000186a0
 8003818:	001e847f 	.word	0x001e847f
 800381c:	003d08ff 	.word	0x003d08ff
 8003820:	431bde83 	.word	0x431bde83
 8003824:	10624dd3 	.word	0x10624dd3

08003828 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	460b      	mov	r3, r1
 8003836:	817b      	strh	r3, [r7, #10]
 8003838:	4613      	mov	r3, r2
 800383a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff faf8 	bl	8002e30 <HAL_GetTick>
 8003840:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	f040 80e0 	bne.w	8003a10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2319      	movs	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	4970      	ldr	r1, [pc, #448]	; (8003a1c <HAL_I2C_Master_Transmit+0x1f4>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f964 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
 8003868:	e0d3      	b.n	8003a12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_I2C_Master_Transmit+0x50>
 8003874:	2302      	movs	r3, #2
 8003876:	e0cc      	b.n	8003a12 <HAL_I2C_Master_Transmit+0x1ea>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d007      	beq.n	800389e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2221      	movs	r2, #33	; 0x21
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2210      	movs	r2, #16
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	893a      	ldrh	r2, [r7, #8]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a50      	ldr	r2, [pc, #320]	; (8003a20 <HAL_I2C_Master_Transmit+0x1f8>)
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f89c 	bl	8003a24 <I2C_MasterRequestWrite>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e08d      	b.n	8003a12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800390c:	e066      	b.n	80039dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f9de 	bl	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e06b      	b.n	8003a12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b04      	cmp	r3, #4
 8003976:	d11b      	bne.n	80039b0 <HAL_I2C_Master_Transmit+0x188>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d017      	beq.n	80039b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	6a39      	ldr	r1, [r7, #32]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f9ce 	bl	8003d56 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d107      	bne.n	80039d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e01a      	b.n	8003a12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d194      	bne.n	800390e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	00100002 	.word	0x00100002
 8003a20:	ffff0000 	.word	0xffff0000

08003a24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	460b      	mov	r3, r1
 8003a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d006      	beq.n	8003a4e <I2C_MasterRequestWrite+0x2a>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d003      	beq.n	8003a4e <I2C_MasterRequestWrite+0x2a>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a4c:	d108      	bne.n	8003a60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e00b      	b.n	8003a78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	2b12      	cmp	r3, #18
 8003a66:	d107      	bne.n	8003a78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f84f 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9e:	d103      	bne.n	8003aa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e035      	b.n	8003b18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab4:	d108      	bne.n	8003ac8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	e01b      	b.n	8003b00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ac8:	897b      	ldrh	r3, [r7, #10]
 8003aca:	11db      	asrs	r3, r3, #7
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0306 	and.w	r3, r3, #6
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f063 030f 	orn	r3, r3, #15
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <I2C_MasterRequestWrite+0xfc>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f875 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e010      	b.n	8003b18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4907      	ldr	r1, [pc, #28]	; (8003b24 <I2C_MasterRequestWrite+0x100>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f865 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	00010008 	.word	0x00010008
 8003b24:	00010002 	.word	0x00010002

08003b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b38:	e025      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d021      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7ff f975 	bl	8002e30 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d116      	bne.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e023      	b.n	8003bce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10d      	bne.n	8003bac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	e00c      	b.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d0b6      	beq.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be4:	e051      	b.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d123      	bne.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f043 0204 	orr.w	r2, r3, #4
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e046      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d021      	beq.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7ff f8f3 	bl	8002e30 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d116      	bne.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e020      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d10c      	bne.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e00b      	b.n	8003cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d18d      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce0:	e02d      	b.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f878 	bl	8003dd8 <I2C_IsAcknowledgeFailed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02d      	b.n	8003d4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d021      	beq.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7ff f899 	bl	8002e30 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d116      	bne.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d1ca      	bne.n	8003ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d62:	e02d      	b.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f837 	bl	8003dd8 <I2C_IsAcknowledgeFailed>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e02d      	b.n	8003dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d021      	beq.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7ff f858 	bl	8002e30 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e007      	b.n	8003dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d1ca      	bne.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dee:	d11b      	bne.n	8003e28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0204 	orr.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e272      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8087 	beq.w	8003f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e54:	4b92      	ldr	r3, [pc, #584]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d00c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e60:	4b8f      	ldr	r3, [pc, #572]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d112      	bne.n	8003e92 <HAL_RCC_OscConfig+0x5e>
 8003e6c:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d10b      	bne.n	8003e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7a:	4b89      	ldr	r3, [pc, #548]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d06c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x12c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d168      	bne.n	8003f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e24c      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x76>
 8003e9c:	4b80      	ldr	r3, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a7f      	ldr	r2, [pc, #508]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	e02e      	b.n	8003f08 <HAL_RCC_OscConfig+0xd4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x98>
 8003eb2:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b78      	ldr	r3, [pc, #480]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a77      	ldr	r2, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e01d      	b.n	8003f08 <HAL_RCC_OscConfig+0xd4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xbc>
 8003ed6:	4b72      	ldr	r3, [pc, #456]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a71      	ldr	r2, [pc, #452]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b6f      	ldr	r3, [pc, #444]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6e      	ldr	r2, [pc, #440]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0xd4>
 8003ef0:	4b6b      	ldr	r3, [pc, #428]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6a      	ldr	r2, [pc, #424]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4b68      	ldr	r3, [pc, #416]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a67      	ldr	r2, [pc, #412]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fe ff8e 	bl	8002e30 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe ff8a 	bl	8002e30 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e200      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0xe4>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe ff7a 	bl	8002e30 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe ff76 	bl	8002e30 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e1ec      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	4b53      	ldr	r3, [pc, #332]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x10c>
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d063      	beq.n	8004036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d11c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x18c>
 8003f86:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d116      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1c0      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4939      	ldr	r1, [pc, #228]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	e03a      	b.n	8004036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe ff2f 	bl	8002e30 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fe ff2b 	bl	8002e30 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e1a1      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4927      	ldr	r1, [pc, #156]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
 8004008:	e015      	b.n	8004036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fe ff0e 	bl	8002e30 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004018:	f7fe ff0a 	bl	8002e30 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e180      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03a      	beq.n	80040b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d019      	beq.n	800407e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004050:	f7fe feee 	bl	8002e30 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7fe feea 	bl	8002e30 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e160      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_RCC_OscConfig+0x26c>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004076:	2001      	movs	r0, #1
 8004078:	f000 fad8 	bl	800462c <RCC_Delay>
 800407c:	e01c      	b.n	80040b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fe fed4 	bl	8002e30 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408a:	e00f      	b.n	80040ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408c:	f7fe fed0 	bl	8002e30 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d908      	bls.n	80040ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e146      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	42420000 	.word	0x42420000
 80040a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b92      	ldr	r3, [pc, #584]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e9      	bne.n	800408c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a6 	beq.w	8004212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b8b      	ldr	r3, [pc, #556]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	4b88      	ldr	r3, [pc, #544]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4a87      	ldr	r2, [pc, #540]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	61d3      	str	r3, [r2, #28]
 80040e2:	4b85      	ldr	r3, [pc, #532]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b82      	ldr	r3, [pc, #520]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b7f      	ldr	r3, [pc, #508]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7e      	ldr	r2, [pc, #504]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fe fe91 	bl	8002e30 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fe fe8d 	bl	8002e30 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b64      	cmp	r3, #100	; 0x64
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e103      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	4b75      	ldr	r3, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x4c8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x312>
 8004138:	4b6f      	ldr	r3, [pc, #444]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a6e      	ldr	r2, [pc, #440]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	e02d      	b.n	80041a2 <HAL_RCC_OscConfig+0x36e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x334>
 800414e:	4b6a      	ldr	r3, [pc, #424]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a69      	ldr	r2, [pc, #420]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6213      	str	r3, [r2, #32]
 800415a:	4b67      	ldr	r3, [pc, #412]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	f023 0304 	bic.w	r3, r3, #4
 8004164:	6213      	str	r3, [r2, #32]
 8004166:	e01c      	b.n	80041a2 <HAL_RCC_OscConfig+0x36e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d10c      	bne.n	800418a <HAL_RCC_OscConfig+0x356>
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4a60      	ldr	r2, [pc, #384]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	6213      	str	r3, [r2, #32]
 800417c:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a5d      	ldr	r2, [pc, #372]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6213      	str	r3, [r2, #32]
 8004188:	e00b      	b.n	80041a2 <HAL_RCC_OscConfig+0x36e>
 800418a:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4a5a      	ldr	r2, [pc, #360]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	6213      	str	r3, [r2, #32]
 8004196:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4a57      	ldr	r2, [pc, #348]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d015      	beq.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fe fe41 	bl	8002e30 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fe fe3d 	bl	8002e30 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e0b1      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ee      	beq.n	80041b2 <HAL_RCC_OscConfig+0x37e>
 80041d4:	e014      	b.n	8004200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fe fe2b 	bl	8002e30 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe fe27 	bl	8002e30 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e09b      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ee      	bne.n	80041de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004206:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8087 	beq.w	800432a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b08      	cmp	r3, #8
 8004226:	d061      	beq.n	80042ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d146      	bne.n	80042be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	4b33      	ldr	r3, [pc, #204]	; (8004300 <HAL_RCC_OscConfig+0x4cc>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fe fdfb 	bl	8002e30 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe fdf7 	bl	8002e30 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e06d      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d108      	bne.n	8004278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4921      	ldr	r1, [pc, #132]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a19      	ldr	r1, [r3, #32]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	430b      	orrs	r3, r1
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4cc>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fe fdcb 	bl	8002e30 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429e:	f7fe fdc7 	bl	8002e30 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e03d      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x46a>
 80042bc:	e035      	b.n	800432a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x4cc>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe fdb4 	bl	8002e30 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe fdb0 	bl	8002e30 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e026      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x498>
 80042ea:	e01e      	b.n	800432a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e019      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
 8004300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x500>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	429a      	cmp	r2, r3
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0d0      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b67      	ldr	r3, [pc, #412]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	4965      	ldr	r1, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800439e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d040      	beq.n	8004458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d115      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e073      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06b      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f023 0203 	bic.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4936      	ldr	r1, [pc, #216]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004428:	f7fe fd02 	bl	8002e30 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7fe fcfe 	bl	8002e30 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e053      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 020c 	and.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	429a      	cmp	r2, r3
 8004456:	d1eb      	bne.n	8004430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d210      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0207 	bic.w	r2, r3, #7
 800446e:	4922      	ldr	r1, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1cc>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1d0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fc60 	bl	8002dac <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40021000 	.word	0x40021000
 8004500:	08008e04 	.word	0x08008e04
 8004504:	20000008 	.word	0x20000008
 8004508:	20000010 	.word	0x20000010

0800450c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b490      	push	{r4, r7}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004512:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004514:	1d3c      	adds	r4, r7, #4
 8004516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800451c:	f240 2301 	movw	r3, #513	; 0x201
 8004520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004536:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b04      	cmp	r3, #4
 8004544:	d002      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004546:	2b08      	cmp	r3, #8
 8004548:	d003      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0x46>
 800454a:	e02b      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800454c:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800454e:	623b      	str	r3, [r7, #32]
      break;
 8004550:	e02b      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3328      	adds	r3, #40	; 0x28
 800455c:	443b      	add	r3, r7
 800455e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004562:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	0c5b      	lsrs	r3, r3, #17
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	3328      	adds	r3, #40	; 0x28
 800457a:	443b      	add	r3, r7
 800457c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004586:	fb03 f202 	mul.w	r2, r3, r2
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	e004      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	623b      	str	r3, [r7, #32]
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045a6:	623b      	str	r3, [r7, #32]
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc90      	pop	{r4, r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	08008df4 	.word	0x08008df4
 80045bc:	40021000 	.word	0x40021000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	003d0900 	.word	0x003d0900

080045c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	20000008 	.word	0x20000008

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff2 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000
 8004600:	08008e14 	.word	0x08008e14

08004604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004608:	f7ff ffde 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	0adb      	lsrs	r3, r3, #11
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	08008e14 	.word	0x08008e14

0800462c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <RCC_Delay+0x34>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <RCC_Delay+0x38>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	0a5b      	lsrs	r3, r3, #9
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004648:	bf00      	nop
  }
  while (Delay --);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	60fa      	str	r2, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <RCC_Delay+0x1c>
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	20000008 	.word	0x20000008
 8004664:	10624dd3 	.word	0x10624dd3

08004668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e041      	b.n	80046fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd fff8 	bl	8002684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f000 fa70 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d001      	beq.n	8004720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e03a      	b.n	8004796 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_TIM_Base_Start_IT+0x98>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x58>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d009      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x58>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x58>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d111      	bne.n	8004784 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b06      	cmp	r3, #6
 8004770:	d010      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004782:	e007      	b.n	8004794 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800

080047ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0202 	mvn.w	r2, #2
 80047d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f9b1 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9a4 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f9b3 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0204 	mvn.w	r2, #4
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f987 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f97a 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f989 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0208 	mvn.w	r2, #8
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2204      	movs	r2, #4
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f95d 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f950 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f95f 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0210 	mvn.w	r2, #16
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2208      	movs	r2, #8
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f933 	bl	8004b56 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f926 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f935 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0201 	mvn.w	r2, #1
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fe f890 	bl	8002a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d10e      	bne.n	800495c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004948:	2b80      	cmp	r3, #128	; 0x80
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa77 	bl	8004e4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8f9 	bl	8004b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d107      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0220 	mvn.w	r2, #32
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa42 	bl	8004e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0b3      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x180>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xd0>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	f000 8085 	beq.w	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xa2>
 8004a28:	2b70      	cmp	r3, #112	; 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x116>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xf6>
 8004a38:	2b50      	cmp	r3, #80	; 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x136>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x156>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x156>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x156>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f000 f966 	bl	8004d3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04e      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f000 f94f 	bl	8004d3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 f8c6 	bl	8004c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	; 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f91d 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 f8e4 	bl	8004cac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	; 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f90d 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 f8a6 	bl	8004c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f8fd 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00b      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 f8f4 	bl	8004d0a <TIM_ITRx_SetConfig>
        break;
 8004b22:	e002      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <TIM_Base_SetConfig+0xb8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d007      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <TIM_Base_SetConfig+0xbc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_Base_SetConfig+0x30>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <TIM_Base_SetConfig+0xc0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d108      	bne.n	8004bce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <TIM_Base_SetConfig+0xb8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d007      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <TIM_Base_SetConfig+0xbc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <TIM_Base_SetConfig+0xc0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <TIM_Base_SetConfig+0xb8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d103      	bne.n	8004c34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	615a      	str	r2, [r3, #20]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	40012c00 	.word	0x40012c00
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800

08004c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f023 030a 	bic.w	r3, r3, #10
 8004c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0210 	bic.w	r2, r3, #16
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	031b      	lsls	r3, r3, #12
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f043 0307 	orr.w	r3, r3, #7
 8004d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	609a      	str	r2, [r3, #8]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e046      	b.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d009      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10c      	bne.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	40012c00 	.word	0x40012c00
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800

08004e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e03f      	b.n	8004eee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fd fc22 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	; 0x24
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fc85 	bl	80057b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b08a      	sub	sp, #40	; 0x28
 8004efa:	af02      	add	r7, sp, #8
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d17c      	bne.n	8005010 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_UART_Transmit+0x2c>
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e075      	b.n	8005012 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UART_Transmit+0x3e>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e06e      	b.n	8005012 <HAL_UART_Transmit+0x11c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2221      	movs	r2, #33	; 0x21
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4a:	f7fd ff71 	bl	8002e30 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f64:	d108      	bne.n	8004f78 <HAL_UART_Transmit+0x82>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e003      	b.n	8004f80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f88:	e02a      	b.n	8004fe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2180      	movs	r1, #128	; 0x80
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fa38 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e036      	b.n	8005012 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e007      	b.n	8004fd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1cf      	bne.n	8004f8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2140      	movs	r1, #64	; 0x40
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fa08 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b20      	cmp	r3, #32
 8005032:	d11d      	bne.n	8005070 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Receive_IT+0x26>
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e016      	b.n	8005072 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_UART_Receive_IT+0x38>
 800504e:	2302      	movs	r3, #2
 8005050:	e00f      	b.n	8005072 <HAL_UART_Receive_IT+0x58>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	461a      	mov	r2, r3
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fa19 	bl	800549e <UART_Start_Receive_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	e000      	b.n	8005072 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10d      	bne.n	80050ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_UART_IRQHandler+0x52>
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fac9 	bl	800565e <UART_Receive_IT>
      return;
 80050cc:	e17b      	b.n	80053c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80b1 	beq.w	8005238 <HAL_UART_IRQHandler+0x1bc>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <HAL_UART_IRQHandler+0x70>
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 80a6 	beq.w	8005238 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_UART_IRQHandler+0x90>
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f043 0201 	orr.w	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_UART_IRQHandler+0xb0>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	f043 0202 	orr.w	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_UART_IRQHandler+0xd0>
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f043 0204 	orr.w	r2, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00f      	beq.n	8005176 <HAL_UART_IRQHandler+0xfa>
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <HAL_UART_IRQHandler+0xee>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0208 	orr.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 811e 	beq.w	80053bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_UART_IRQHandler+0x11e>
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa62 	bl	800565e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <HAL_UART_IRQHandler+0x146>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d031      	beq.n	8005226 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f9a4 	bl	8005510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d023      	beq.n	800521e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d013      	beq.n	8005216 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	4a76      	ldr	r2, [pc, #472]	; (80053cc <HAL_UART_IRQHandler+0x350>)
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fd ff8e 	bl	800311c <HAL_DMA_Abort_IT>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005210:	4610      	mov	r0, r2
 8005212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	e00e      	b.n	8005234 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8e3 	bl	80053e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521c:	e00a      	b.n	8005234 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8df 	bl	80053e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	e006      	b.n	8005234 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8db 	bl	80053e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005232:	e0c3      	b.n	80053bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	bf00      	nop
    return;
 8005236:	e0c1      	b.n	80053bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 80a1 	bne.w	8005384 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 809b 	beq.w	8005384 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8095 	beq.w	8005384 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d04e      	beq.n	800531c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005288:	8a3b      	ldrh	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8098 	beq.w	80053c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005294:	8a3a      	ldrh	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	f080 8092 	bcs.w	80053c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8a3a      	ldrh	r2, [r7, #16]
 80052a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d02b      	beq.n	8005304 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695a      	ldr	r2, [r3, #20]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0210 	bic.w	r2, r2, #16
 80052f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fd fed1 	bl	80030a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530c:	b29b      	uxth	r3, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f86d 	bl	80053f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800531a:	e051      	b.n	80053c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005324:	b29b      	uxth	r3, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d047      	beq.n	80053c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005334:	8a7b      	ldrh	r3, [r7, #18]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d044      	beq.n	80053c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005348:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0210 	bic.w	r2, r2, #16
 8005376:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005378:	8a7b      	ldrh	r3, [r7, #18]
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f839 	bl	80053f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005382:	e01f      	b.n	80053c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_UART_IRQHandler+0x324>
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8f9 	bl	8005590 <UART_Transmit_IT>
    return;
 800539e:	e012      	b.n	80053c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <HAL_UART_IRQHandler+0x34a>
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f93a 	bl	800562e <UART_EndTransmit_IT>
    return;
 80053ba:	e004      	b.n	80053c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80053c4:	bf00      	nop
  }
}
 80053c6:	3728      	adds	r7, #40	; 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08005569 	.word	0x08005569

080053d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541a:	e02c      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d028      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x30>
 800542a:	f7fd fd01 	bl	8002e30 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	429a      	cmp	r2, r3
 8005438:	d21d      	bcs.n	8005476 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005448:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695a      	ldr	r2, [r3, #20]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d0c3      	beq.n	800541c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2222      	movs	r2, #34	; 0x22
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0220 	orr.w	r2, r2, #32
 8005502:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0210 	bic.w	r2, r2, #16
 800554e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff ff2d 	bl	80053e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b21      	cmp	r3, #33	; 0x21
 80055a2:	d13e      	bne.n	8005622 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ac:	d114      	bne.n	80055d8 <UART_Transmit_IT+0x48>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d110      	bne.n	80055d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]
 80055d6:	e008      	b.n	80055ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	1c59      	adds	r1, r3, #1
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6211      	str	r1, [r2, #32]
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4619      	mov	r1, r3
 80055f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005644:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff febe 	bl	80053d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b22      	cmp	r3, #34	; 0x22
 8005670:	f040 8099 	bne.w	80057a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d117      	bne.n	80056ae <UART_Receive_IT+0x50>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d113      	bne.n	80056ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569c:	b29a      	uxth	r2, r3
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	1c9a      	adds	r2, r3, #2
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
 80056ac:	e026      	b.n	80056fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c0:	d007      	beq.n	80056d2 <UART_Receive_IT+0x74>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <UART_Receive_IT+0x82>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e008      	b.n	80056f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4619      	mov	r1, r3
 800570a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800570c:	2b00      	cmp	r3, #0
 800570e:	d148      	bne.n	80057a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0220 	bic.w	r2, r2, #32
 800571e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800572e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	2b01      	cmp	r3, #1
 800574e:	d123      	bne.n	8005798 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0210 	bic.w	r2, r2, #16
 8005764:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d10a      	bne.n	800578a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fe2f 	bl	80053f4 <HAL_UARTEx_RxEventCallback>
 8005796:	e002      	b.n	800579e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fd f9c1 	bl	8002b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e002      	b.n	80057a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e000      	b.n	80057a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057ea:	f023 030c 	bic.w	r3, r3, #12
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2c      	ldr	r2, [pc, #176]	; (80058c4 <UART_SetConfig+0x114>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d103      	bne.n	8005820 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005818:	f7fe fef4 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	e002      	b.n	8005826 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fe fedc 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8005824:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <UART_SetConfig+0x118>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	0119      	lsls	r1, r3, #4
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009a      	lsls	r2, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	fbb2 f2f3 	udiv	r2, r2, r3
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <UART_SetConfig+0x118>)
 800585e:	fba3 0302 	umull	r0, r3, r3, r2
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	2064      	movs	r0, #100	; 0x64
 8005866:	fb00 f303 	mul.w	r3, r0, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	3332      	adds	r3, #50	; 0x32
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <UART_SetConfig+0x118>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587c:	4419      	add	r1, r3
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009a      	lsls	r2, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fbb2 f2f3 	udiv	r2, r2, r3
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <UART_SetConfig+0x118>)
 8005896:	fba3 0302 	umull	r0, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2064      	movs	r0, #100	; 0x64
 800589e:	fb00 f303 	mul.w	r3, r0, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	3332      	adds	r3, #50	; 0x32
 80058a8:	4a07      	ldr	r2, [pc, #28]	; (80058c8 <UART_SetConfig+0x118>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	440a      	add	r2, r1
 80058ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40013800 	.word	0x40013800
 80058c8:	51eb851f 	.word	0x51eb851f

080058cc <atoff>:
 80058cc:	2100      	movs	r1, #0
 80058ce:	f000 bf5f 	b.w	8006790 <strtof>

080058d2 <atoi>:
 80058d2:	220a      	movs	r2, #10
 80058d4:	2100      	movs	r1, #0
 80058d6:	f001 b885 	b.w	80069e4 <strtol>
	...

080058dc <__errno>:
 80058dc:	4b01      	ldr	r3, [pc, #4]	; (80058e4 <__errno+0x8>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000018 	.word	0x20000018

080058e8 <__libc_init_array>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	2600      	movs	r6, #0
 80058ec:	4d0c      	ldr	r5, [pc, #48]	; (8005920 <__libc_init_array+0x38>)
 80058ee:	4c0d      	ldr	r4, [pc, #52]	; (8005924 <__libc_init_array+0x3c>)
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d109      	bne.n	800590c <__libc_init_array+0x24>
 80058f8:	f003 f9b6 	bl	8008c68 <_init>
 80058fc:	2600      	movs	r6, #0
 80058fe:	4d0a      	ldr	r5, [pc, #40]	; (8005928 <__libc_init_array+0x40>)
 8005900:	4c0a      	ldr	r4, [pc, #40]	; (800592c <__libc_init_array+0x44>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	42a6      	cmp	r6, r4
 8005908:	d105      	bne.n	8005916 <__libc_init_array+0x2e>
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005910:	4798      	blx	r3
 8005912:	3601      	adds	r6, #1
 8005914:	e7ee      	b.n	80058f4 <__libc_init_array+0xc>
 8005916:	f855 3b04 	ldr.w	r3, [r5], #4
 800591a:	4798      	blx	r3
 800591c:	3601      	adds	r6, #1
 800591e:	e7f2      	b.n	8005906 <__libc_init_array+0x1e>
 8005920:	080092a8 	.word	0x080092a8
 8005924:	080092a8 	.word	0x080092a8
 8005928:	080092a8 	.word	0x080092a8
 800592c:	080092ac 	.word	0x080092ac

08005930 <malloc>:
 8005930:	4b02      	ldr	r3, [pc, #8]	; (800593c <malloc+0xc>)
 8005932:	4601      	mov	r1, r0
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	f000 b87b 	b.w	8005a30 <_malloc_r>
 800593a:	bf00      	nop
 800593c:	20000018 	.word	0x20000018

08005940 <free>:
 8005940:	4b02      	ldr	r3, [pc, #8]	; (800594c <free+0xc>)
 8005942:	4601      	mov	r1, r0
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	f000 b80b 	b.w	8005960 <_free_r>
 800594a:	bf00      	nop
 800594c:	20000018 	.word	0x20000018

08005950 <memset>:
 8005950:	4603      	mov	r3, r0
 8005952:	4402      	add	r2, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <_free_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4605      	mov	r5, r0
 8005964:	2900      	cmp	r1, #0
 8005966:	d040      	beq.n	80059ea <_free_r+0x8a>
 8005968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800596c:	1f0c      	subs	r4, r1, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	bfb8      	it	lt
 8005972:	18e4      	addlt	r4, r4, r3
 8005974:	f001 fbf6 	bl	8007164 <__malloc_lock>
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <_free_r+0x8c>)
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	b933      	cbnz	r3, 800598c <_free_r+0x2c>
 800597e:	6063      	str	r3, [r4, #4]
 8005980:	6014      	str	r4, [r2, #0]
 8005982:	4628      	mov	r0, r5
 8005984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005988:	f001 bbf2 	b.w	8007170 <__malloc_unlock>
 800598c:	42a3      	cmp	r3, r4
 800598e:	d908      	bls.n	80059a2 <_free_r+0x42>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	1821      	adds	r1, r4, r0
 8005994:	428b      	cmp	r3, r1
 8005996:	bf01      	itttt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	1809      	addeq	r1, r1, r0
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	e7ed      	b.n	800597e <_free_r+0x1e>
 80059a2:	461a      	mov	r2, r3
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b10b      	cbz	r3, 80059ac <_free_r+0x4c>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d9fa      	bls.n	80059a2 <_free_r+0x42>
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	1850      	adds	r0, r2, r1
 80059b0:	42a0      	cmp	r0, r4
 80059b2:	d10b      	bne.n	80059cc <_free_r+0x6c>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	4401      	add	r1, r0
 80059b8:	1850      	adds	r0, r2, r1
 80059ba:	4283      	cmp	r3, r0
 80059bc:	6011      	str	r1, [r2, #0]
 80059be:	d1e0      	bne.n	8005982 <_free_r+0x22>
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4401      	add	r1, r0
 80059c6:	6011      	str	r1, [r2, #0]
 80059c8:	6053      	str	r3, [r2, #4]
 80059ca:	e7da      	b.n	8005982 <_free_r+0x22>
 80059cc:	d902      	bls.n	80059d4 <_free_r+0x74>
 80059ce:	230c      	movs	r3, #12
 80059d0:	602b      	str	r3, [r5, #0]
 80059d2:	e7d6      	b.n	8005982 <_free_r+0x22>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	1821      	adds	r1, r4, r0
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf01      	itttt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	1809      	addeq	r1, r1, r0
 80059e2:	6021      	streq	r1, [r4, #0]
 80059e4:	6063      	str	r3, [r4, #4]
 80059e6:	6054      	str	r4, [r2, #4]
 80059e8:	e7cb      	b.n	8005982 <_free_r+0x22>
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	200004d0 	.word	0x200004d0

080059f0 <sbrk_aligned>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	4e0e      	ldr	r6, [pc, #56]	; (8005a2c <sbrk_aligned+0x3c>)
 80059f4:	460c      	mov	r4, r1
 80059f6:	6831      	ldr	r1, [r6, #0]
 80059f8:	4605      	mov	r5, r0
 80059fa:	b911      	cbnz	r1, 8005a02 <sbrk_aligned+0x12>
 80059fc:	f000 f88c 	bl	8005b18 <_sbrk_r>
 8005a00:	6030      	str	r0, [r6, #0]
 8005a02:	4621      	mov	r1, r4
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f887 	bl	8005b18 <_sbrk_r>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	d00a      	beq.n	8005a24 <sbrk_aligned+0x34>
 8005a0e:	1cc4      	adds	r4, r0, #3
 8005a10:	f024 0403 	bic.w	r4, r4, #3
 8005a14:	42a0      	cmp	r0, r4
 8005a16:	d007      	beq.n	8005a28 <sbrk_aligned+0x38>
 8005a18:	1a21      	subs	r1, r4, r0
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f000 f87c 	bl	8005b18 <_sbrk_r>
 8005a20:	3001      	adds	r0, #1
 8005a22:	d101      	bne.n	8005a28 <sbrk_aligned+0x38>
 8005a24:	f04f 34ff 	mov.w	r4, #4294967295
 8005a28:	4620      	mov	r0, r4
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	200004d4 	.word	0x200004d4

08005a30 <_malloc_r>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	1ccd      	adds	r5, r1, #3
 8005a36:	f025 0503 	bic.w	r5, r5, #3
 8005a3a:	3508      	adds	r5, #8
 8005a3c:	2d0c      	cmp	r5, #12
 8005a3e:	bf38      	it	cc
 8005a40:	250c      	movcc	r5, #12
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	4607      	mov	r7, r0
 8005a46:	db01      	blt.n	8005a4c <_malloc_r+0x1c>
 8005a48:	42a9      	cmp	r1, r5
 8005a4a:	d905      	bls.n	8005a58 <_malloc_r+0x28>
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	2600      	movs	r6, #0
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	4630      	mov	r0, r6
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	4e2e      	ldr	r6, [pc, #184]	; (8005b14 <_malloc_r+0xe4>)
 8005a5a:	f001 fb83 	bl	8007164 <__malloc_lock>
 8005a5e:	6833      	ldr	r3, [r6, #0]
 8005a60:	461c      	mov	r4, r3
 8005a62:	bb34      	cbnz	r4, 8005ab2 <_malloc_r+0x82>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4638      	mov	r0, r7
 8005a68:	f7ff ffc2 	bl	80059f0 <sbrk_aligned>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	4604      	mov	r4, r0
 8005a70:	d14d      	bne.n	8005b0e <_malloc_r+0xde>
 8005a72:	6834      	ldr	r4, [r6, #0]
 8005a74:	4626      	mov	r6, r4
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	d140      	bne.n	8005afc <_malloc_r+0xcc>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4638      	mov	r0, r7
 8005a80:	eb04 0803 	add.w	r8, r4, r3
 8005a84:	f000 f848 	bl	8005b18 <_sbrk_r>
 8005a88:	4580      	cmp	r8, r0
 8005a8a:	d13a      	bne.n	8005b02 <_malloc_r+0xd2>
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	3503      	adds	r5, #3
 8005a90:	1a6d      	subs	r5, r5, r1
 8005a92:	f025 0503 	bic.w	r5, r5, #3
 8005a96:	3508      	adds	r5, #8
 8005a98:	2d0c      	cmp	r5, #12
 8005a9a:	bf38      	it	cc
 8005a9c:	250c      	movcc	r5, #12
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7ff ffa5 	bl	80059f0 <sbrk_aligned>
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d02b      	beq.n	8005b02 <_malloc_r+0xd2>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	442b      	add	r3, r5
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	e00e      	b.n	8005ad0 <_malloc_r+0xa0>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	1b52      	subs	r2, r2, r5
 8005ab6:	d41e      	bmi.n	8005af6 <_malloc_r+0xc6>
 8005ab8:	2a0b      	cmp	r2, #11
 8005aba:	d916      	bls.n	8005aea <_malloc_r+0xba>
 8005abc:	1961      	adds	r1, r4, r5
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	6025      	str	r5, [r4, #0]
 8005ac2:	bf18      	it	ne
 8005ac4:	6059      	strne	r1, [r3, #4]
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	bf08      	it	eq
 8005aca:	6031      	streq	r1, [r6, #0]
 8005acc:	5162      	str	r2, [r4, r5]
 8005ace:	604b      	str	r3, [r1, #4]
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f104 060b 	add.w	r6, r4, #11
 8005ad6:	f001 fb4b 	bl	8007170 <__malloc_unlock>
 8005ada:	f026 0607 	bic.w	r6, r6, #7
 8005ade:	1d23      	adds	r3, r4, #4
 8005ae0:	1af2      	subs	r2, r6, r3
 8005ae2:	d0b6      	beq.n	8005a52 <_malloc_r+0x22>
 8005ae4:	1b9b      	subs	r3, r3, r6
 8005ae6:	50a3      	str	r3, [r4, r2]
 8005ae8:	e7b3      	b.n	8005a52 <_malloc_r+0x22>
 8005aea:	6862      	ldr	r2, [r4, #4]
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	bf0c      	ite	eq
 8005af0:	6032      	streq	r2, [r6, #0]
 8005af2:	605a      	strne	r2, [r3, #4]
 8005af4:	e7ec      	b.n	8005ad0 <_malloc_r+0xa0>
 8005af6:	4623      	mov	r3, r4
 8005af8:	6864      	ldr	r4, [r4, #4]
 8005afa:	e7b2      	b.n	8005a62 <_malloc_r+0x32>
 8005afc:	4634      	mov	r4, r6
 8005afe:	6876      	ldr	r6, [r6, #4]
 8005b00:	e7b9      	b.n	8005a76 <_malloc_r+0x46>
 8005b02:	230c      	movs	r3, #12
 8005b04:	4638      	mov	r0, r7
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	f001 fb32 	bl	8007170 <__malloc_unlock>
 8005b0c:	e7a1      	b.n	8005a52 <_malloc_r+0x22>
 8005b0e:	6025      	str	r5, [r4, #0]
 8005b10:	e7de      	b.n	8005ad0 <_malloc_r+0xa0>
 8005b12:	bf00      	nop
 8005b14:	200004d0 	.word	0x200004d0

08005b18 <_sbrk_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4d05      	ldr	r5, [pc, #20]	; (8005b34 <_sbrk_r+0x1c>)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	f7fc ff36 	bl	8002994 <_sbrk>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d102      	bne.n	8005b32 <_sbrk_r+0x1a>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	b103      	cbz	r3, 8005b32 <_sbrk_r+0x1a>
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	200004d8 	.word	0x200004d8

08005b38 <siprintf>:
 8005b38:	b40e      	push	{r1, r2, r3}
 8005b3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b3e:	b500      	push	{lr}
 8005b40:	b09c      	sub	sp, #112	; 0x70
 8005b42:	ab1d      	add	r3, sp, #116	; 0x74
 8005b44:	9002      	str	r0, [sp, #8]
 8005b46:	9006      	str	r0, [sp, #24]
 8005b48:	9107      	str	r1, [sp, #28]
 8005b4a:	9104      	str	r1, [sp, #16]
 8005b4c:	4808      	ldr	r0, [pc, #32]	; (8005b70 <siprintf+0x38>)
 8005b4e:	4909      	ldr	r1, [pc, #36]	; (8005b74 <siprintf+0x3c>)
 8005b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b54:	9105      	str	r1, [sp, #20]
 8005b56:	6800      	ldr	r0, [r0, #0]
 8005b58:	a902      	add	r1, sp, #8
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f002 f836 	bl	8007bcc <_svfiprintf_r>
 8005b60:	2200      	movs	r2, #0
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	b01c      	add	sp, #112	; 0x70
 8005b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b6c:	b003      	add	sp, #12
 8005b6e:	4770      	bx	lr
 8005b70:	20000018 	.word	0x20000018
 8005b74:	ffff0208 	.word	0xffff0208

08005b78 <sulp>:
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	4690      	mov	r8, r2
 8005b80:	f001 fe6c 	bl	800785c <__ulp>
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	f1b8 0f00 	cmp.w	r8, #0
 8005b8c:	d011      	beq.n	8005bb2 <sulp+0x3a>
 8005b8e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd0b      	ble.n	8005bb2 <sulp+0x3a>
 8005b9a:	2400      	movs	r4, #0
 8005b9c:	051b      	lsls	r3, r3, #20
 8005b9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ba2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	462b      	mov	r3, r5
 8005baa:	f7fa fd53 	bl	8000654 <__aeabi_dmul>
 8005bae:	4604      	mov	r4, r0
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bba:	0000      	movs	r0, r0
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <_strtod_l>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	469b      	mov	fp, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	b09f      	sub	sp, #124	; 0x7c
 8005bca:	931a      	str	r3, [sp, #104]	; 0x68
 8005bcc:	4b9e      	ldr	r3, [pc, #632]	; (8005e48 <_strtod_l+0x288>)
 8005bce:	4682      	mov	sl, r0
 8005bd0:	681f      	ldr	r7, [r3, #0]
 8005bd2:	460e      	mov	r6, r1
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	9215      	str	r2, [sp, #84]	; 0x54
 8005bd8:	f7fa fac4 	bl	8000164 <strlen>
 8005bdc:	f04f 0800 	mov.w	r8, #0
 8005be0:	4604      	mov	r4, r0
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	9619      	str	r6, [sp, #100]	; 0x64
 8005be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	2a2b      	cmp	r2, #43	; 0x2b
 8005bee:	d04c      	beq.n	8005c8a <_strtod_l+0xca>
 8005bf0:	d83a      	bhi.n	8005c68 <_strtod_l+0xa8>
 8005bf2:	2a0d      	cmp	r2, #13
 8005bf4:	d833      	bhi.n	8005c5e <_strtod_l+0x9e>
 8005bf6:	2a08      	cmp	r2, #8
 8005bf8:	d833      	bhi.n	8005c62 <_strtod_l+0xa2>
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	d03d      	beq.n	8005c7a <_strtod_l+0xba>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	930a      	str	r3, [sp, #40]	; 0x28
 8005c02:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005c04:	782b      	ldrb	r3, [r5, #0]
 8005c06:	2b30      	cmp	r3, #48	; 0x30
 8005c08:	f040 80aa 	bne.w	8005d60 <_strtod_l+0x1a0>
 8005c0c:	786b      	ldrb	r3, [r5, #1]
 8005c0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c12:	2b58      	cmp	r3, #88	; 0x58
 8005c14:	d166      	bne.n	8005ce4 <_strtod_l+0x124>
 8005c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c18:	4650      	mov	r0, sl
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	ab1a      	add	r3, sp, #104	; 0x68
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	4a8a      	ldr	r2, [pc, #552]	; (8005e4c <_strtod_l+0x28c>)
 8005c22:	f8cd b008 	str.w	fp, [sp, #8]
 8005c26:	ab1b      	add	r3, sp, #108	; 0x6c
 8005c28:	a919      	add	r1, sp, #100	; 0x64
 8005c2a:	f000 ff7d 	bl	8006b28 <__gethex>
 8005c2e:	f010 0607 	ands.w	r6, r0, #7
 8005c32:	4604      	mov	r4, r0
 8005c34:	d005      	beq.n	8005c42 <_strtod_l+0x82>
 8005c36:	2e06      	cmp	r6, #6
 8005c38:	d129      	bne.n	8005c8e <_strtod_l+0xce>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	9519      	str	r5, [sp, #100]	; 0x64
 8005c40:	930a      	str	r3, [sp, #40]	; 0x28
 8005c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f040 858a 	bne.w	800675e <_strtod_l+0xb9e>
 8005c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4c:	b1d3      	cbz	r3, 8005c84 <_strtod_l+0xc4>
 8005c4e:	4642      	mov	r2, r8
 8005c50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	b01f      	add	sp, #124	; 0x7c
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	2a20      	cmp	r2, #32
 8005c60:	d1cd      	bne.n	8005bfe <_strtod_l+0x3e>
 8005c62:	3301      	adds	r3, #1
 8005c64:	9319      	str	r3, [sp, #100]	; 0x64
 8005c66:	e7bf      	b.n	8005be8 <_strtod_l+0x28>
 8005c68:	2a2d      	cmp	r2, #45	; 0x2d
 8005c6a:	d1c8      	bne.n	8005bfe <_strtod_l+0x3e>
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	920a      	str	r2, [sp, #40]	; 0x28
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	9219      	str	r2, [sp, #100]	; 0x64
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1c3      	bne.n	8005c02 <_strtod_l+0x42>
 8005c7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c7c:	9619      	str	r6, [sp, #100]	; 0x64
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f040 856b 	bne.w	800675a <_strtod_l+0xb9a>
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	e7e4      	b.n	8005c54 <_strtod_l+0x94>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	e7ef      	b.n	8005c6e <_strtod_l+0xae>
 8005c8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c90:	b13a      	cbz	r2, 8005ca2 <_strtod_l+0xe2>
 8005c92:	2135      	movs	r1, #53	; 0x35
 8005c94:	a81c      	add	r0, sp, #112	; 0x70
 8005c96:	f001 fee5 	bl	8007a64 <__copybits>
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c9e:	f001 faad 	bl	80071fc <_Bfree>
 8005ca2:	3e01      	subs	r6, #1
 8005ca4:	2e04      	cmp	r6, #4
 8005ca6:	d806      	bhi.n	8005cb6 <_strtod_l+0xf6>
 8005ca8:	e8df f006 	tbb	[pc, r6]
 8005cac:	1714030a 	.word	0x1714030a
 8005cb0:	0a          	.byte	0x0a
 8005cb1:	00          	.byte	0x00
 8005cb2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005cb6:	0721      	lsls	r1, r4, #28
 8005cb8:	d5c3      	bpl.n	8005c42 <_strtod_l+0x82>
 8005cba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005cbe:	e7c0      	b.n	8005c42 <_strtod_l+0x82>
 8005cc0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005cc2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005cc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005cca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005cd2:	e7f0      	b.n	8005cb6 <_strtod_l+0xf6>
 8005cd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005e50 <_strtod_l+0x290>
 8005cd8:	e7ed      	b.n	8005cb6 <_strtod_l+0xf6>
 8005cda:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005cde:	f04f 38ff 	mov.w	r8, #4294967295
 8005ce2:	e7e8      	b.n	8005cb6 <_strtod_l+0xf6>
 8005ce4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	9219      	str	r2, [sp, #100]	; 0x64
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d0f9      	beq.n	8005ce4 <_strtod_l+0x124>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0a6      	beq.n	8005c42 <_strtod_l+0x82>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	9308      	str	r3, [sp, #32]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	469b      	mov	fp, r3
 8005d02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005d06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005d08:	7805      	ldrb	r5, [r0, #0]
 8005d0a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005d0e:	b2d9      	uxtb	r1, r3
 8005d10:	2909      	cmp	r1, #9
 8005d12:	d927      	bls.n	8005d64 <_strtod_l+0x1a4>
 8005d14:	4622      	mov	r2, r4
 8005d16:	4639      	mov	r1, r7
 8005d18:	f002 fb50 	bl	80083bc <strncmp>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d033      	beq.n	8005d88 <_strtod_l+0x1c8>
 8005d20:	2000      	movs	r0, #0
 8005d22:	462a      	mov	r2, r5
 8005d24:	465c      	mov	r4, fp
 8005d26:	4603      	mov	r3, r0
 8005d28:	9004      	str	r0, [sp, #16]
 8005d2a:	2a65      	cmp	r2, #101	; 0x65
 8005d2c:	d001      	beq.n	8005d32 <_strtod_l+0x172>
 8005d2e:	2a45      	cmp	r2, #69	; 0x45
 8005d30:	d114      	bne.n	8005d5c <_strtod_l+0x19c>
 8005d32:	b91c      	cbnz	r4, 8005d3c <_strtod_l+0x17c>
 8005d34:	9a07      	ldr	r2, [sp, #28]
 8005d36:	4302      	orrs	r2, r0
 8005d38:	d09f      	beq.n	8005c7a <_strtod_l+0xba>
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005d3e:	1c72      	adds	r2, r6, #1
 8005d40:	9219      	str	r2, [sp, #100]	; 0x64
 8005d42:	7872      	ldrb	r2, [r6, #1]
 8005d44:	2a2b      	cmp	r2, #43	; 0x2b
 8005d46:	d079      	beq.n	8005e3c <_strtod_l+0x27c>
 8005d48:	2a2d      	cmp	r2, #45	; 0x2d
 8005d4a:	f000 8083 	beq.w	8005e54 <_strtod_l+0x294>
 8005d4e:	2700      	movs	r7, #0
 8005d50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005d54:	2909      	cmp	r1, #9
 8005d56:	f240 8083 	bls.w	8005e60 <_strtod_l+0x2a0>
 8005d5a:	9619      	str	r6, [sp, #100]	; 0x64
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	e09f      	b.n	8005ea0 <_strtod_l+0x2e0>
 8005d60:	2300      	movs	r3, #0
 8005d62:	e7c8      	b.n	8005cf6 <_strtod_l+0x136>
 8005d64:	f1bb 0f08 	cmp.w	fp, #8
 8005d68:	bfd5      	itete	le
 8005d6a:	9906      	ldrle	r1, [sp, #24]
 8005d6c:	9905      	ldrgt	r1, [sp, #20]
 8005d6e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d72:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d76:	f100 0001 	add.w	r0, r0, #1
 8005d7a:	bfd4      	ite	le
 8005d7c:	9306      	strle	r3, [sp, #24]
 8005d7e:	9305      	strgt	r3, [sp, #20]
 8005d80:	f10b 0b01 	add.w	fp, fp, #1
 8005d84:	9019      	str	r0, [sp, #100]	; 0x64
 8005d86:	e7be      	b.n	8005d06 <_strtod_l+0x146>
 8005d88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d8a:	191a      	adds	r2, r3, r4
 8005d8c:	9219      	str	r2, [sp, #100]	; 0x64
 8005d8e:	5d1a      	ldrb	r2, [r3, r4]
 8005d90:	f1bb 0f00 	cmp.w	fp, #0
 8005d94:	d036      	beq.n	8005e04 <_strtod_l+0x244>
 8005d96:	465c      	mov	r4, fp
 8005d98:	9004      	str	r0, [sp, #16]
 8005d9a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	d912      	bls.n	8005dc8 <_strtod_l+0x208>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7c1      	b.n	8005d2a <_strtod_l+0x16a>
 8005da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da8:	3001      	adds	r0, #1
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	9219      	str	r2, [sp, #100]	; 0x64
 8005dae:	785a      	ldrb	r2, [r3, #1]
 8005db0:	2a30      	cmp	r2, #48	; 0x30
 8005db2:	d0f8      	beq.n	8005da6 <_strtod_l+0x1e6>
 8005db4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	f200 84d5 	bhi.w	8006768 <_strtod_l+0xba8>
 8005dbe:	9004      	str	r0, [sp, #16]
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dc6:	9308      	str	r3, [sp, #32]
 8005dc8:	3a30      	subs	r2, #48	; 0x30
 8005dca:	f100 0301 	add.w	r3, r0, #1
 8005dce:	d013      	beq.n	8005df8 <_strtod_l+0x238>
 8005dd0:	9904      	ldr	r1, [sp, #16]
 8005dd2:	1905      	adds	r5, r0, r4
 8005dd4:	4419      	add	r1, r3
 8005dd6:	9104      	str	r1, [sp, #16]
 8005dd8:	4623      	mov	r3, r4
 8005dda:	210a      	movs	r1, #10
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	d113      	bne.n	8005e08 <_strtod_l+0x248>
 8005de0:	1823      	adds	r3, r4, r0
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	f104 0401 	add.w	r4, r4, #1
 8005de8:	4404      	add	r4, r0
 8005dea:	dc1b      	bgt.n	8005e24 <_strtod_l+0x264>
 8005dec:	230a      	movs	r3, #10
 8005dee:	9906      	ldr	r1, [sp, #24]
 8005df0:	fb03 2301 	mla	r3, r3, r1, r2
 8005df4:	9306      	str	r3, [sp, #24]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	1c51      	adds	r1, r2, #1
 8005dfe:	9119      	str	r1, [sp, #100]	; 0x64
 8005e00:	7852      	ldrb	r2, [r2, #1]
 8005e02:	e7ca      	b.n	8005d9a <_strtod_l+0x1da>
 8005e04:	4658      	mov	r0, fp
 8005e06:	e7d3      	b.n	8005db0 <_strtod_l+0x1f0>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	dc04      	bgt.n	8005e16 <_strtod_l+0x256>
 8005e0c:	9f06      	ldr	r7, [sp, #24]
 8005e0e:	434f      	muls	r7, r1
 8005e10:	9706      	str	r7, [sp, #24]
 8005e12:	3301      	adds	r3, #1
 8005e14:	e7e2      	b.n	8005ddc <_strtod_l+0x21c>
 8005e16:	1c5f      	adds	r7, r3, #1
 8005e18:	2f10      	cmp	r7, #16
 8005e1a:	bfde      	ittt	le
 8005e1c:	9f05      	ldrle	r7, [sp, #20]
 8005e1e:	434f      	mulle	r7, r1
 8005e20:	9705      	strle	r7, [sp, #20]
 8005e22:	e7f6      	b.n	8005e12 <_strtod_l+0x252>
 8005e24:	2c10      	cmp	r4, #16
 8005e26:	bfdf      	itttt	le
 8005e28:	230a      	movle	r3, #10
 8005e2a:	9905      	ldrle	r1, [sp, #20]
 8005e2c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005e30:	9305      	strle	r3, [sp, #20]
 8005e32:	e7e0      	b.n	8005df6 <_strtod_l+0x236>
 8005e34:	2300      	movs	r3, #0
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e77b      	b.n	8005d34 <_strtod_l+0x174>
 8005e3c:	2700      	movs	r7, #0
 8005e3e:	1cb2      	adds	r2, r6, #2
 8005e40:	9219      	str	r2, [sp, #100]	; 0x64
 8005e42:	78b2      	ldrb	r2, [r6, #2]
 8005e44:	e784      	b.n	8005d50 <_strtod_l+0x190>
 8005e46:	bf00      	nop
 8005e48:	080090a8 	.word	0x080090a8
 8005e4c:	08008e2c 	.word	0x08008e2c
 8005e50:	7ff00000 	.word	0x7ff00000
 8005e54:	2701      	movs	r7, #1
 8005e56:	e7f2      	b.n	8005e3e <_strtod_l+0x27e>
 8005e58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e5a:	1c51      	adds	r1, r2, #1
 8005e5c:	9119      	str	r1, [sp, #100]	; 0x64
 8005e5e:	7852      	ldrb	r2, [r2, #1]
 8005e60:	2a30      	cmp	r2, #48	; 0x30
 8005e62:	d0f9      	beq.n	8005e58 <_strtod_l+0x298>
 8005e64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005e68:	2908      	cmp	r1, #8
 8005e6a:	f63f af77 	bhi.w	8005d5c <_strtod_l+0x19c>
 8005e6e:	f04f 0e0a 	mov.w	lr, #10
 8005e72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005e76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e78:	9209      	str	r2, [sp, #36]	; 0x24
 8005e7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e7c:	1c51      	adds	r1, r2, #1
 8005e7e:	9119      	str	r1, [sp, #100]	; 0x64
 8005e80:	7852      	ldrb	r2, [r2, #1]
 8005e82:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005e86:	2d09      	cmp	r5, #9
 8005e88:	d935      	bls.n	8005ef6 <_strtod_l+0x336>
 8005e8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e8c:	1b49      	subs	r1, r1, r5
 8005e8e:	2908      	cmp	r1, #8
 8005e90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005e94:	dc02      	bgt.n	8005e9c <_strtod_l+0x2dc>
 8005e96:	4565      	cmp	r5, ip
 8005e98:	bfa8      	it	ge
 8005e9a:	4665      	movge	r5, ip
 8005e9c:	b107      	cbz	r7, 8005ea0 <_strtod_l+0x2e0>
 8005e9e:	426d      	negs	r5, r5
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	d14c      	bne.n	8005f3e <_strtod_l+0x37e>
 8005ea4:	9907      	ldr	r1, [sp, #28]
 8005ea6:	4301      	orrs	r1, r0
 8005ea8:	f47f aecb 	bne.w	8005c42 <_strtod_l+0x82>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f47f aee4 	bne.w	8005c7a <_strtod_l+0xba>
 8005eb2:	2a69      	cmp	r2, #105	; 0x69
 8005eb4:	d026      	beq.n	8005f04 <_strtod_l+0x344>
 8005eb6:	dc23      	bgt.n	8005f00 <_strtod_l+0x340>
 8005eb8:	2a49      	cmp	r2, #73	; 0x49
 8005eba:	d023      	beq.n	8005f04 <_strtod_l+0x344>
 8005ebc:	2a4e      	cmp	r2, #78	; 0x4e
 8005ebe:	f47f aedc 	bne.w	8005c7a <_strtod_l+0xba>
 8005ec2:	499d      	ldr	r1, [pc, #628]	; (8006138 <_strtod_l+0x578>)
 8005ec4:	a819      	add	r0, sp, #100	; 0x64
 8005ec6:	f001 f87d 	bl	8006fc4 <__match>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f43f aed5 	beq.w	8005c7a <_strtod_l+0xba>
 8005ed0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b28      	cmp	r3, #40	; 0x28
 8005ed6:	d12c      	bne.n	8005f32 <_strtod_l+0x372>
 8005ed8:	4998      	ldr	r1, [pc, #608]	; (800613c <_strtod_l+0x57c>)
 8005eda:	aa1c      	add	r2, sp, #112	; 0x70
 8005edc:	a819      	add	r0, sp, #100	; 0x64
 8005ede:	f001 f885 	bl	8006fec <__hexnan>
 8005ee2:	2805      	cmp	r0, #5
 8005ee4:	d125      	bne.n	8005f32 <_strtod_l+0x372>
 8005ee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ee8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005eec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005ef0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005ef4:	e6a5      	b.n	8005c42 <_strtod_l+0x82>
 8005ef6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005efa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005efe:	e7bc      	b.n	8005e7a <_strtod_l+0x2ba>
 8005f00:	2a6e      	cmp	r2, #110	; 0x6e
 8005f02:	e7dc      	b.n	8005ebe <_strtod_l+0x2fe>
 8005f04:	498e      	ldr	r1, [pc, #568]	; (8006140 <_strtod_l+0x580>)
 8005f06:	a819      	add	r0, sp, #100	; 0x64
 8005f08:	f001 f85c 	bl	8006fc4 <__match>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f43f aeb4 	beq.w	8005c7a <_strtod_l+0xba>
 8005f12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f14:	498b      	ldr	r1, [pc, #556]	; (8006144 <_strtod_l+0x584>)
 8005f16:	3b01      	subs	r3, #1
 8005f18:	a819      	add	r0, sp, #100	; 0x64
 8005f1a:	9319      	str	r3, [sp, #100]	; 0x64
 8005f1c:	f001 f852 	bl	8006fc4 <__match>
 8005f20:	b910      	cbnz	r0, 8005f28 <_strtod_l+0x368>
 8005f22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f24:	3301      	adds	r3, #1
 8005f26:	9319      	str	r3, [sp, #100]	; 0x64
 8005f28:	f04f 0800 	mov.w	r8, #0
 8005f2c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006148 <_strtod_l+0x588>
 8005f30:	e687      	b.n	8005c42 <_strtod_l+0x82>
 8005f32:	4886      	ldr	r0, [pc, #536]	; (800614c <_strtod_l+0x58c>)
 8005f34:	f002 fa38 	bl	80083a8 <nan>
 8005f38:	4680      	mov	r8, r0
 8005f3a:	4689      	mov	r9, r1
 8005f3c:	e681      	b.n	8005c42 <_strtod_l+0x82>
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	f1bb 0f00 	cmp.w	fp, #0
 8005f44:	bf08      	it	eq
 8005f46:	46a3      	moveq	fp, r4
 8005f48:	1aeb      	subs	r3, r5, r3
 8005f4a:	2c10      	cmp	r4, #16
 8005f4c:	9806      	ldr	r0, [sp, #24]
 8005f4e:	4626      	mov	r6, r4
 8005f50:	9307      	str	r3, [sp, #28]
 8005f52:	bfa8      	it	ge
 8005f54:	2610      	movge	r6, #16
 8005f56:	f7fa fb03 	bl	8000560 <__aeabi_ui2d>
 8005f5a:	2c09      	cmp	r4, #9
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	4689      	mov	r9, r1
 8005f60:	dd13      	ble.n	8005f8a <_strtod_l+0x3ca>
 8005f62:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <_strtod_l+0x590>)
 8005f64:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f68:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f6c:	f7fa fb72 	bl	8000654 <__aeabi_dmul>
 8005f70:	4680      	mov	r8, r0
 8005f72:	9805      	ldr	r0, [sp, #20]
 8005f74:	4689      	mov	r9, r1
 8005f76:	f7fa faf3 	bl	8000560 <__aeabi_ui2d>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4649      	mov	r1, r9
 8005f82:	f7fa f9b1 	bl	80002e8 <__adddf3>
 8005f86:	4680      	mov	r8, r0
 8005f88:	4689      	mov	r9, r1
 8005f8a:	2c0f      	cmp	r4, #15
 8005f8c:	dc36      	bgt.n	8005ffc <_strtod_l+0x43c>
 8005f8e:	9b07      	ldr	r3, [sp, #28]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f43f ae56 	beq.w	8005c42 <_strtod_l+0x82>
 8005f96:	dd22      	ble.n	8005fde <_strtod_l+0x41e>
 8005f98:	2b16      	cmp	r3, #22
 8005f9a:	dc09      	bgt.n	8005fb0 <_strtod_l+0x3f0>
 8005f9c:	496c      	ldr	r1, [pc, #432]	; (8006150 <_strtod_l+0x590>)
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005faa:	f7fa fb53 	bl	8000654 <__aeabi_dmul>
 8005fae:	e7c3      	b.n	8005f38 <_strtod_l+0x378>
 8005fb0:	9a07      	ldr	r2, [sp, #28]
 8005fb2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	db20      	blt.n	8005ffc <_strtod_l+0x43c>
 8005fba:	4d65      	ldr	r5, [pc, #404]	; (8006150 <_strtod_l+0x590>)
 8005fbc:	f1c4 040f 	rsb	r4, r4, #15
 8005fc0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fca:	464b      	mov	r3, r9
 8005fcc:	f7fa fb42 	bl	8000654 <__aeabi_dmul>
 8005fd0:	9b07      	ldr	r3, [sp, #28]
 8005fd2:	1b1c      	subs	r4, r3, r4
 8005fd4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fdc:	e7e5      	b.n	8005faa <_strtod_l+0x3ea>
 8005fde:	9b07      	ldr	r3, [sp, #28]
 8005fe0:	3316      	adds	r3, #22
 8005fe2:	db0b      	blt.n	8005ffc <_strtod_l+0x43c>
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	1b5d      	subs	r5, r3, r5
 8005fea:	4b59      	ldr	r3, [pc, #356]	; (8006150 <_strtod_l+0x590>)
 8005fec:	4649      	mov	r1, r9
 8005fee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ff6:	f7fa fc57 	bl	80008a8 <__aeabi_ddiv>
 8005ffa:	e79d      	b.n	8005f38 <_strtod_l+0x378>
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	1ba6      	subs	r6, r4, r6
 8006000:	441e      	add	r6, r3
 8006002:	2e00      	cmp	r6, #0
 8006004:	dd74      	ble.n	80060f0 <_strtod_l+0x530>
 8006006:	f016 030f 	ands.w	r3, r6, #15
 800600a:	d00a      	beq.n	8006022 <_strtod_l+0x462>
 800600c:	4950      	ldr	r1, [pc, #320]	; (8006150 <_strtod_l+0x590>)
 800600e:	4642      	mov	r2, r8
 8006010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006018:	464b      	mov	r3, r9
 800601a:	f7fa fb1b 	bl	8000654 <__aeabi_dmul>
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	f036 060f 	bics.w	r6, r6, #15
 8006026:	d052      	beq.n	80060ce <_strtod_l+0x50e>
 8006028:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800602c:	dd27      	ble.n	800607e <_strtod_l+0x4be>
 800602e:	f04f 0b00 	mov.w	fp, #0
 8006032:	f8cd b010 	str.w	fp, [sp, #16]
 8006036:	f8cd b020 	str.w	fp, [sp, #32]
 800603a:	f8cd b018 	str.w	fp, [sp, #24]
 800603e:	2322      	movs	r3, #34	; 0x22
 8006040:	f04f 0800 	mov.w	r8, #0
 8006044:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006148 <_strtod_l+0x588>
 8006048:	f8ca 3000 	str.w	r3, [sl]
 800604c:	9b08      	ldr	r3, [sp, #32]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f43f adf7 	beq.w	8005c42 <_strtod_l+0x82>
 8006054:	4650      	mov	r0, sl
 8006056:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006058:	f001 f8d0 	bl	80071fc <_Bfree>
 800605c:	4650      	mov	r0, sl
 800605e:	9906      	ldr	r1, [sp, #24]
 8006060:	f001 f8cc 	bl	80071fc <_Bfree>
 8006064:	4650      	mov	r0, sl
 8006066:	9904      	ldr	r1, [sp, #16]
 8006068:	f001 f8c8 	bl	80071fc <_Bfree>
 800606c:	4650      	mov	r0, sl
 800606e:	9908      	ldr	r1, [sp, #32]
 8006070:	f001 f8c4 	bl	80071fc <_Bfree>
 8006074:	4659      	mov	r1, fp
 8006076:	4650      	mov	r0, sl
 8006078:	f001 f8c0 	bl	80071fc <_Bfree>
 800607c:	e5e1      	b.n	8005c42 <_strtod_l+0x82>
 800607e:	4b35      	ldr	r3, [pc, #212]	; (8006154 <_strtod_l+0x594>)
 8006080:	4640      	mov	r0, r8
 8006082:	9305      	str	r3, [sp, #20]
 8006084:	2300      	movs	r3, #0
 8006086:	4649      	mov	r1, r9
 8006088:	461f      	mov	r7, r3
 800608a:	1136      	asrs	r6, r6, #4
 800608c:	2e01      	cmp	r6, #1
 800608e:	dc21      	bgt.n	80060d4 <_strtod_l+0x514>
 8006090:	b10b      	cbz	r3, 8006096 <_strtod_l+0x4d6>
 8006092:	4680      	mov	r8, r0
 8006094:	4689      	mov	r9, r1
 8006096:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <_strtod_l+0x594>)
 8006098:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800609c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80060a0:	4642      	mov	r2, r8
 80060a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a6:	464b      	mov	r3, r9
 80060a8:	f7fa fad4 	bl	8000654 <__aeabi_dmul>
 80060ac:	4b26      	ldr	r3, [pc, #152]	; (8006148 <_strtod_l+0x588>)
 80060ae:	460a      	mov	r2, r1
 80060b0:	400b      	ands	r3, r1
 80060b2:	4929      	ldr	r1, [pc, #164]	; (8006158 <_strtod_l+0x598>)
 80060b4:	4680      	mov	r8, r0
 80060b6:	428b      	cmp	r3, r1
 80060b8:	d8b9      	bhi.n	800602e <_strtod_l+0x46e>
 80060ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80060be:	428b      	cmp	r3, r1
 80060c0:	bf86      	itte	hi
 80060c2:	f04f 38ff 	movhi.w	r8, #4294967295
 80060c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800615c <_strtod_l+0x59c>
 80060ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80060ce:	2300      	movs	r3, #0
 80060d0:	9305      	str	r3, [sp, #20]
 80060d2:	e07f      	b.n	80061d4 <_strtod_l+0x614>
 80060d4:	07f2      	lsls	r2, r6, #31
 80060d6:	d505      	bpl.n	80060e4 <_strtod_l+0x524>
 80060d8:	9b05      	ldr	r3, [sp, #20]
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fab9 	bl	8000654 <__aeabi_dmul>
 80060e2:	2301      	movs	r3, #1
 80060e4:	9a05      	ldr	r2, [sp, #20]
 80060e6:	3701      	adds	r7, #1
 80060e8:	3208      	adds	r2, #8
 80060ea:	1076      	asrs	r6, r6, #1
 80060ec:	9205      	str	r2, [sp, #20]
 80060ee:	e7cd      	b.n	800608c <_strtod_l+0x4cc>
 80060f0:	d0ed      	beq.n	80060ce <_strtod_l+0x50e>
 80060f2:	4276      	negs	r6, r6
 80060f4:	f016 020f 	ands.w	r2, r6, #15
 80060f8:	d00a      	beq.n	8006110 <_strtod_l+0x550>
 80060fa:	4b15      	ldr	r3, [pc, #84]	; (8006150 <_strtod_l+0x590>)
 80060fc:	4640      	mov	r0, r8
 80060fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006102:	4649      	mov	r1, r9
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa fbce 	bl	80008a8 <__aeabi_ddiv>
 800610c:	4680      	mov	r8, r0
 800610e:	4689      	mov	r9, r1
 8006110:	1136      	asrs	r6, r6, #4
 8006112:	d0dc      	beq.n	80060ce <_strtod_l+0x50e>
 8006114:	2e1f      	cmp	r6, #31
 8006116:	dd23      	ble.n	8006160 <_strtod_l+0x5a0>
 8006118:	f04f 0b00 	mov.w	fp, #0
 800611c:	f8cd b010 	str.w	fp, [sp, #16]
 8006120:	f8cd b020 	str.w	fp, [sp, #32]
 8006124:	f8cd b018 	str.w	fp, [sp, #24]
 8006128:	2322      	movs	r3, #34	; 0x22
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	f04f 0900 	mov.w	r9, #0
 8006132:	f8ca 3000 	str.w	r3, [sl]
 8006136:	e789      	b.n	800604c <_strtod_l+0x48c>
 8006138:	08008e29 	.word	0x08008e29
 800613c:	08008e40 	.word	0x08008e40
 8006140:	08008e20 	.word	0x08008e20
 8006144:	08008e23 	.word	0x08008e23
 8006148:	7ff00000 	.word	0x7ff00000
 800614c:	08008f2f 	.word	0x08008f2f
 8006150:	08009140 	.word	0x08009140
 8006154:	08009118 	.word	0x08009118
 8006158:	7ca00000 	.word	0x7ca00000
 800615c:	7fefffff 	.word	0x7fefffff
 8006160:	f016 0310 	ands.w	r3, r6, #16
 8006164:	bf18      	it	ne
 8006166:	236a      	movne	r3, #106	; 0x6a
 8006168:	4640      	mov	r0, r8
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	4649      	mov	r1, r9
 800616e:	2300      	movs	r3, #0
 8006170:	4fb0      	ldr	r7, [pc, #704]	; (8006434 <_strtod_l+0x874>)
 8006172:	07f2      	lsls	r2, r6, #31
 8006174:	d504      	bpl.n	8006180 <_strtod_l+0x5c0>
 8006176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617a:	f7fa fa6b 	bl	8000654 <__aeabi_dmul>
 800617e:	2301      	movs	r3, #1
 8006180:	1076      	asrs	r6, r6, #1
 8006182:	f107 0708 	add.w	r7, r7, #8
 8006186:	d1f4      	bne.n	8006172 <_strtod_l+0x5b2>
 8006188:	b10b      	cbz	r3, 800618e <_strtod_l+0x5ce>
 800618a:	4680      	mov	r8, r0
 800618c:	4689      	mov	r9, r1
 800618e:	9b05      	ldr	r3, [sp, #20]
 8006190:	b1c3      	cbz	r3, 80061c4 <_strtod_l+0x604>
 8006192:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006196:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800619a:	2b00      	cmp	r3, #0
 800619c:	4649      	mov	r1, r9
 800619e:	dd11      	ble.n	80061c4 <_strtod_l+0x604>
 80061a0:	2b1f      	cmp	r3, #31
 80061a2:	f340 8127 	ble.w	80063f4 <_strtod_l+0x834>
 80061a6:	2b34      	cmp	r3, #52	; 0x34
 80061a8:	bfd8      	it	le
 80061aa:	f04f 33ff 	movle.w	r3, #4294967295
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	bfcf      	iteee	gt
 80061b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80061b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80061bc:	fa03 f202 	lslle.w	r2, r3, r2
 80061c0:	ea02 0901 	andle.w	r9, r2, r1
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	4640      	mov	r0, r8
 80061ca:	4649      	mov	r1, r9
 80061cc:	f7fa fcaa 	bl	8000b24 <__aeabi_dcmpeq>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1a1      	bne.n	8006118 <_strtod_l+0x558>
 80061d4:	9b06      	ldr	r3, [sp, #24]
 80061d6:	465a      	mov	r2, fp
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4650      	mov	r0, sl
 80061dc:	4623      	mov	r3, r4
 80061de:	9908      	ldr	r1, [sp, #32]
 80061e0:	f001 f874 	bl	80072cc <__s2b>
 80061e4:	9008      	str	r0, [sp, #32]
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f43f af21 	beq.w	800602e <_strtod_l+0x46e>
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	f04f 0b00 	mov.w	fp, #0
 80061f2:	1b5d      	subs	r5, r3, r5
 80061f4:	9b07      	ldr	r3, [sp, #28]
 80061f6:	f8cd b010 	str.w	fp, [sp, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfb4      	ite	lt
 80061fe:	462b      	movlt	r3, r5
 8006200:	2300      	movge	r3, #0
 8006202:	930e      	str	r3, [sp, #56]	; 0x38
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800620a:	9314      	str	r3, [sp, #80]	; 0x50
 800620c:	9b08      	ldr	r3, [sp, #32]
 800620e:	4650      	mov	r0, sl
 8006210:	6859      	ldr	r1, [r3, #4]
 8006212:	f000 ffb3 	bl	800717c <_Balloc>
 8006216:	9006      	str	r0, [sp, #24]
 8006218:	2800      	cmp	r0, #0
 800621a:	f43f af10 	beq.w	800603e <_strtod_l+0x47e>
 800621e:	9b08      	ldr	r3, [sp, #32]
 8006220:	300c      	adds	r0, #12
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	f103 010c 	add.w	r1, r3, #12
 8006228:	3202      	adds	r2, #2
 800622a:	0092      	lsls	r2, r2, #2
 800622c:	f000 ff8c 	bl	8007148 <memcpy>
 8006230:	ab1c      	add	r3, sp, #112	; 0x70
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	ab1b      	add	r3, sp, #108	; 0x6c
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	4650      	mov	r0, sl
 800623e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006242:	f001 fb85 	bl	8007950 <__d2b>
 8006246:	901a      	str	r0, [sp, #104]	; 0x68
 8006248:	2800      	cmp	r0, #0
 800624a:	f43f aef8 	beq.w	800603e <_strtod_l+0x47e>
 800624e:	2101      	movs	r1, #1
 8006250:	4650      	mov	r0, sl
 8006252:	f001 f8d3 	bl	80073fc <__i2b>
 8006256:	4603      	mov	r3, r0
 8006258:	9004      	str	r0, [sp, #16]
 800625a:	2800      	cmp	r0, #0
 800625c:	f43f aeef 	beq.w	800603e <_strtod_l+0x47e>
 8006260:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006262:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006264:	2d00      	cmp	r5, #0
 8006266:	bfab      	itete	ge
 8006268:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800626a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800626c:	18ee      	addge	r6, r5, r3
 800626e:	1b5c      	sublt	r4, r3, r5
 8006270:	9b05      	ldr	r3, [sp, #20]
 8006272:	bfa8      	it	ge
 8006274:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006276:	eba5 0503 	sub.w	r5, r5, r3
 800627a:	4415      	add	r5, r2
 800627c:	4b6e      	ldr	r3, [pc, #440]	; (8006438 <_strtod_l+0x878>)
 800627e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006282:	bfb8      	it	lt
 8006284:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006286:	429d      	cmp	r5, r3
 8006288:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800628c:	f280 80c4 	bge.w	8006418 <_strtod_l+0x858>
 8006290:	1b5b      	subs	r3, r3, r5
 8006292:	2b1f      	cmp	r3, #31
 8006294:	f04f 0701 	mov.w	r7, #1
 8006298:	eba2 0203 	sub.w	r2, r2, r3
 800629c:	f300 80b1 	bgt.w	8006402 <_strtod_l+0x842>
 80062a0:	2500      	movs	r5, #0
 80062a2:	fa07 f303 	lsl.w	r3, r7, r3
 80062a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062a8:	18b7      	adds	r7, r6, r2
 80062aa:	9b05      	ldr	r3, [sp, #20]
 80062ac:	42be      	cmp	r6, r7
 80062ae:	4414      	add	r4, r2
 80062b0:	441c      	add	r4, r3
 80062b2:	4633      	mov	r3, r6
 80062b4:	bfa8      	it	ge
 80062b6:	463b      	movge	r3, r7
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	bfa8      	it	ge
 80062bc:	4623      	movge	r3, r4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfc2      	ittt	gt
 80062c2:	1aff      	subgt	r7, r7, r3
 80062c4:	1ae4      	subgt	r4, r4, r3
 80062c6:	1af6      	subgt	r6, r6, r3
 80062c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dd17      	ble.n	80062fe <_strtod_l+0x73e>
 80062ce:	461a      	mov	r2, r3
 80062d0:	4650      	mov	r0, sl
 80062d2:	9904      	ldr	r1, [sp, #16]
 80062d4:	f001 f950 	bl	8007578 <__pow5mult>
 80062d8:	9004      	str	r0, [sp, #16]
 80062da:	2800      	cmp	r0, #0
 80062dc:	f43f aeaf 	beq.w	800603e <_strtod_l+0x47e>
 80062e0:	4601      	mov	r1, r0
 80062e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062e4:	4650      	mov	r0, sl
 80062e6:	f001 f89f 	bl	8007428 <__multiply>
 80062ea:	9009      	str	r0, [sp, #36]	; 0x24
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f43f aea6 	beq.w	800603e <_strtod_l+0x47e>
 80062f2:	4650      	mov	r0, sl
 80062f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062f6:	f000 ff81 	bl	80071fc <_Bfree>
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	931a      	str	r3, [sp, #104]	; 0x68
 80062fe:	2f00      	cmp	r7, #0
 8006300:	f300 808e 	bgt.w	8006420 <_strtod_l+0x860>
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd08      	ble.n	800631c <_strtod_l+0x75c>
 800630a:	4650      	mov	r0, sl
 800630c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800630e:	9906      	ldr	r1, [sp, #24]
 8006310:	f001 f932 	bl	8007578 <__pow5mult>
 8006314:	9006      	str	r0, [sp, #24]
 8006316:	2800      	cmp	r0, #0
 8006318:	f43f ae91 	beq.w	800603e <_strtod_l+0x47e>
 800631c:	2c00      	cmp	r4, #0
 800631e:	dd08      	ble.n	8006332 <_strtod_l+0x772>
 8006320:	4622      	mov	r2, r4
 8006322:	4650      	mov	r0, sl
 8006324:	9906      	ldr	r1, [sp, #24]
 8006326:	f001 f981 	bl	800762c <__lshift>
 800632a:	9006      	str	r0, [sp, #24]
 800632c:	2800      	cmp	r0, #0
 800632e:	f43f ae86 	beq.w	800603e <_strtod_l+0x47e>
 8006332:	2e00      	cmp	r6, #0
 8006334:	dd08      	ble.n	8006348 <_strtod_l+0x788>
 8006336:	4632      	mov	r2, r6
 8006338:	4650      	mov	r0, sl
 800633a:	9904      	ldr	r1, [sp, #16]
 800633c:	f001 f976 	bl	800762c <__lshift>
 8006340:	9004      	str	r0, [sp, #16]
 8006342:	2800      	cmp	r0, #0
 8006344:	f43f ae7b 	beq.w	800603e <_strtod_l+0x47e>
 8006348:	4650      	mov	r0, sl
 800634a:	9a06      	ldr	r2, [sp, #24]
 800634c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800634e:	f001 f9f9 	bl	8007744 <__mdiff>
 8006352:	4683      	mov	fp, r0
 8006354:	2800      	cmp	r0, #0
 8006356:	f43f ae72 	beq.w	800603e <_strtod_l+0x47e>
 800635a:	2400      	movs	r4, #0
 800635c:	68c3      	ldr	r3, [r0, #12]
 800635e:	9904      	ldr	r1, [sp, #16]
 8006360:	60c4      	str	r4, [r0, #12]
 8006362:	930b      	str	r3, [sp, #44]	; 0x2c
 8006364:	f001 f9d2 	bl	800770c <__mcmp>
 8006368:	42a0      	cmp	r0, r4
 800636a:	da6b      	bge.n	8006444 <_strtod_l+0x884>
 800636c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636e:	ea53 0308 	orrs.w	r3, r3, r8
 8006372:	f040 8091 	bne.w	8006498 <_strtod_l+0x8d8>
 8006376:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 808c 	bne.w	8006498 <_strtod_l+0x8d8>
 8006380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006384:	0d1b      	lsrs	r3, r3, #20
 8006386:	051b      	lsls	r3, r3, #20
 8006388:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800638c:	f240 8084 	bls.w	8006498 <_strtod_l+0x8d8>
 8006390:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006394:	b91b      	cbnz	r3, 800639e <_strtod_l+0x7de>
 8006396:	f8db 3010 	ldr.w	r3, [fp, #16]
 800639a:	2b01      	cmp	r3, #1
 800639c:	dd7c      	ble.n	8006498 <_strtod_l+0x8d8>
 800639e:	4659      	mov	r1, fp
 80063a0:	2201      	movs	r2, #1
 80063a2:	4650      	mov	r0, sl
 80063a4:	f001 f942 	bl	800762c <__lshift>
 80063a8:	9904      	ldr	r1, [sp, #16]
 80063aa:	4683      	mov	fp, r0
 80063ac:	f001 f9ae 	bl	800770c <__mcmp>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dd71      	ble.n	8006498 <_strtod_l+0x8d8>
 80063b4:	9905      	ldr	r1, [sp, #20]
 80063b6:	464b      	mov	r3, r9
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <_strtod_l+0x87c>)
 80063ba:	2900      	cmp	r1, #0
 80063bc:	f000 808c 	beq.w	80064d8 <_strtod_l+0x918>
 80063c0:	ea02 0109 	and.w	r1, r2, r9
 80063c4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80063c8:	f300 8086 	bgt.w	80064d8 <_strtod_l+0x918>
 80063cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80063d0:	f77f aeaa 	ble.w	8006128 <_strtod_l+0x568>
 80063d4:	4640      	mov	r0, r8
 80063d6:	4649      	mov	r1, r9
 80063d8:	4b19      	ldr	r3, [pc, #100]	; (8006440 <_strtod_l+0x880>)
 80063da:	2200      	movs	r2, #0
 80063dc:	f7fa f93a 	bl	8000654 <__aeabi_dmul>
 80063e0:	460b      	mov	r3, r1
 80063e2:	4303      	orrs	r3, r0
 80063e4:	bf08      	it	eq
 80063e6:	2322      	moveq	r3, #34	; 0x22
 80063e8:	4680      	mov	r8, r0
 80063ea:	4689      	mov	r9, r1
 80063ec:	bf08      	it	eq
 80063ee:	f8ca 3000 	streq.w	r3, [sl]
 80063f2:	e62f      	b.n	8006054 <_strtod_l+0x494>
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	ea03 0808 	and.w	r8, r3, r8
 8006400:	e6e0      	b.n	80061c4 <_strtod_l+0x604>
 8006402:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006406:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800640a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800640e:	35e2      	adds	r5, #226	; 0xe2
 8006410:	fa07 f505 	lsl.w	r5, r7, r5
 8006414:	970f      	str	r7, [sp, #60]	; 0x3c
 8006416:	e747      	b.n	80062a8 <_strtod_l+0x6e8>
 8006418:	2301      	movs	r3, #1
 800641a:	2500      	movs	r5, #0
 800641c:	930f      	str	r3, [sp, #60]	; 0x3c
 800641e:	e743      	b.n	80062a8 <_strtod_l+0x6e8>
 8006420:	463a      	mov	r2, r7
 8006422:	4650      	mov	r0, sl
 8006424:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006426:	f001 f901 	bl	800762c <__lshift>
 800642a:	901a      	str	r0, [sp, #104]	; 0x68
 800642c:	2800      	cmp	r0, #0
 800642e:	f47f af69 	bne.w	8006304 <_strtod_l+0x744>
 8006432:	e604      	b.n	800603e <_strtod_l+0x47e>
 8006434:	08008e58 	.word	0x08008e58
 8006438:	fffffc02 	.word	0xfffffc02
 800643c:	7ff00000 	.word	0x7ff00000
 8006440:	39500000 	.word	0x39500000
 8006444:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006448:	d165      	bne.n	8006516 <_strtod_l+0x956>
 800644a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800644c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006450:	b35a      	cbz	r2, 80064aa <_strtod_l+0x8ea>
 8006452:	4a99      	ldr	r2, [pc, #612]	; (80066b8 <_strtod_l+0xaf8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d12b      	bne.n	80064b0 <_strtod_l+0x8f0>
 8006458:	9b05      	ldr	r3, [sp, #20]
 800645a:	4641      	mov	r1, r8
 800645c:	b303      	cbz	r3, 80064a0 <_strtod_l+0x8e0>
 800645e:	464a      	mov	r2, r9
 8006460:	4b96      	ldr	r3, [pc, #600]	; (80066bc <_strtod_l+0xafc>)
 8006462:	4013      	ands	r3, r2
 8006464:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	d81b      	bhi.n	80064a6 <_strtod_l+0x8e6>
 800646e:	0d1b      	lsrs	r3, r3, #20
 8006470:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	4299      	cmp	r1, r3
 800647a:	d119      	bne.n	80064b0 <_strtod_l+0x8f0>
 800647c:	4b90      	ldr	r3, [pc, #576]	; (80066c0 <_strtod_l+0xb00>)
 800647e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006480:	429a      	cmp	r2, r3
 8006482:	d102      	bne.n	800648a <_strtod_l+0x8ca>
 8006484:	3101      	adds	r1, #1
 8006486:	f43f adda 	beq.w	800603e <_strtod_l+0x47e>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	4b8b      	ldr	r3, [pc, #556]	; (80066bc <_strtod_l+0xafc>)
 8006490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006492:	401a      	ands	r2, r3
 8006494:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d19a      	bne.n	80063d4 <_strtod_l+0x814>
 800649e:	e5d9      	b.n	8006054 <_strtod_l+0x494>
 80064a0:	f04f 33ff 	mov.w	r3, #4294967295
 80064a4:	e7e8      	b.n	8006478 <_strtod_l+0x8b8>
 80064a6:	4613      	mov	r3, r2
 80064a8:	e7e6      	b.n	8006478 <_strtod_l+0x8b8>
 80064aa:	ea53 0308 	orrs.w	r3, r3, r8
 80064ae:	d081      	beq.n	80063b4 <_strtod_l+0x7f4>
 80064b0:	b1e5      	cbz	r5, 80064ec <_strtod_l+0x92c>
 80064b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b4:	421d      	tst	r5, r3
 80064b6:	d0ef      	beq.n	8006498 <_strtod_l+0x8d8>
 80064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ba:	4640      	mov	r0, r8
 80064bc:	4649      	mov	r1, r9
 80064be:	9a05      	ldr	r2, [sp, #20]
 80064c0:	b1c3      	cbz	r3, 80064f4 <_strtod_l+0x934>
 80064c2:	f7ff fb59 	bl	8005b78 <sulp>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064ce:	f7f9 ff0b 	bl	80002e8 <__adddf3>
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	e7df      	b.n	8006498 <_strtod_l+0x8d8>
 80064d8:	4013      	ands	r3, r2
 80064da:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80064de:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80064e2:	f04f 38ff 	mov.w	r8, #4294967295
 80064e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80064ea:	e7d5      	b.n	8006498 <_strtod_l+0x8d8>
 80064ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ee:	ea13 0f08 	tst.w	r3, r8
 80064f2:	e7e0      	b.n	80064b6 <_strtod_l+0x8f6>
 80064f4:	f7ff fb40 	bl	8005b78 <sulp>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006500:	f7f9 fef0 	bl	80002e4 <__aeabi_dsub>
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	4680      	mov	r8, r0
 800650a:	4689      	mov	r9, r1
 800650c:	f7fa fb0a 	bl	8000b24 <__aeabi_dcmpeq>
 8006510:	2800      	cmp	r0, #0
 8006512:	d0c1      	beq.n	8006498 <_strtod_l+0x8d8>
 8006514:	e608      	b.n	8006128 <_strtod_l+0x568>
 8006516:	4658      	mov	r0, fp
 8006518:	9904      	ldr	r1, [sp, #16]
 800651a:	f001 fa75 	bl	8007a08 <__ratio>
 800651e:	2200      	movs	r2, #0
 8006520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006524:	4606      	mov	r6, r0
 8006526:	460f      	mov	r7, r1
 8006528:	f7fa fb10 	bl	8000b4c <__aeabi_dcmple>
 800652c:	2800      	cmp	r0, #0
 800652e:	d070      	beq.n	8006612 <_strtod_l+0xa52>
 8006530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d042      	beq.n	80065bc <_strtod_l+0x9fc>
 8006536:	2600      	movs	r6, #0
 8006538:	4f62      	ldr	r7, [pc, #392]	; (80066c4 <_strtod_l+0xb04>)
 800653a:	4d62      	ldr	r5, [pc, #392]	; (80066c4 <_strtod_l+0xb04>)
 800653c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006542:	0d1b      	lsrs	r3, r3, #20
 8006544:	051b      	lsls	r3, r3, #20
 8006546:	930f      	str	r3, [sp, #60]	; 0x3c
 8006548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800654a:	4b5f      	ldr	r3, [pc, #380]	; (80066c8 <_strtod_l+0xb08>)
 800654c:	429a      	cmp	r2, r3
 800654e:	f040 80c3 	bne.w	80066d8 <_strtod_l+0xb18>
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	4640      	mov	r0, r8
 8006556:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800655a:	4649      	mov	r1, r9
 800655c:	f001 f97e 	bl	800785c <__ulp>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f7fa f874 	bl	8000654 <__aeabi_dmul>
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	f7f9 feba 	bl	80002e8 <__adddf3>
 8006574:	460b      	mov	r3, r1
 8006576:	4951      	ldr	r1, [pc, #324]	; (80066bc <_strtod_l+0xafc>)
 8006578:	4a54      	ldr	r2, [pc, #336]	; (80066cc <_strtod_l+0xb0c>)
 800657a:	4019      	ands	r1, r3
 800657c:	4291      	cmp	r1, r2
 800657e:	4680      	mov	r8, r0
 8006580:	d95d      	bls.n	800663e <_strtod_l+0xa7e>
 8006582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006584:	4b4e      	ldr	r3, [pc, #312]	; (80066c0 <_strtod_l+0xb00>)
 8006586:	429a      	cmp	r2, r3
 8006588:	d103      	bne.n	8006592 <_strtod_l+0x9d2>
 800658a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800658c:	3301      	adds	r3, #1
 800658e:	f43f ad56 	beq.w	800603e <_strtod_l+0x47e>
 8006592:	f04f 38ff 	mov.w	r8, #4294967295
 8006596:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80066c0 <_strtod_l+0xb00>
 800659a:	4650      	mov	r0, sl
 800659c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800659e:	f000 fe2d 	bl	80071fc <_Bfree>
 80065a2:	4650      	mov	r0, sl
 80065a4:	9906      	ldr	r1, [sp, #24]
 80065a6:	f000 fe29 	bl	80071fc <_Bfree>
 80065aa:	4650      	mov	r0, sl
 80065ac:	9904      	ldr	r1, [sp, #16]
 80065ae:	f000 fe25 	bl	80071fc <_Bfree>
 80065b2:	4659      	mov	r1, fp
 80065b4:	4650      	mov	r0, sl
 80065b6:	f000 fe21 	bl	80071fc <_Bfree>
 80065ba:	e627      	b.n	800620c <_strtod_l+0x64c>
 80065bc:	f1b8 0f00 	cmp.w	r8, #0
 80065c0:	d119      	bne.n	80065f6 <_strtod_l+0xa36>
 80065c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c8:	b9e3      	cbnz	r3, 8006604 <_strtod_l+0xa44>
 80065ca:	2200      	movs	r2, #0
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <_strtod_l+0xb04>)
 80065d2:	f7fa fab1 	bl	8000b38 <__aeabi_dcmplt>
 80065d6:	b9c8      	cbnz	r0, 800660c <_strtod_l+0xa4c>
 80065d8:	2200      	movs	r2, #0
 80065da:	4630      	mov	r0, r6
 80065dc:	4639      	mov	r1, r7
 80065de:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <_strtod_l+0xb10>)
 80065e0:	f7fa f838 	bl	8000654 <__aeabi_dmul>
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80065ec:	9416      	str	r4, [sp, #88]	; 0x58
 80065ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80065f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80065f4:	e7a2      	b.n	800653c <_strtod_l+0x97c>
 80065f6:	f1b8 0f01 	cmp.w	r8, #1
 80065fa:	d103      	bne.n	8006604 <_strtod_l+0xa44>
 80065fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f43f ad92 	beq.w	8006128 <_strtod_l+0x568>
 8006604:	2600      	movs	r6, #0
 8006606:	2400      	movs	r4, #0
 8006608:	4f32      	ldr	r7, [pc, #200]	; (80066d4 <_strtod_l+0xb14>)
 800660a:	e796      	b.n	800653a <_strtod_l+0x97a>
 800660c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800660e:	4d30      	ldr	r5, [pc, #192]	; (80066d0 <_strtod_l+0xb10>)
 8006610:	e7ea      	b.n	80065e8 <_strtod_l+0xa28>
 8006612:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <_strtod_l+0xb10>)
 8006614:	2200      	movs	r2, #0
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7fa f81b 	bl	8000654 <__aeabi_dmul>
 800661e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	b933      	cbnz	r3, 8006634 <_strtod_l+0xa74>
 8006626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800662a:	9010      	str	r0, [sp, #64]	; 0x40
 800662c:	9311      	str	r3, [sp, #68]	; 0x44
 800662e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006632:	e783      	b.n	800653c <_strtod_l+0x97c>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800663c:	e7f7      	b.n	800662e <_strtod_l+0xa6e>
 800663e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1a8      	bne.n	800659a <_strtod_l+0x9da>
 8006648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800664c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800664e:	0d1b      	lsrs	r3, r3, #20
 8006650:	051b      	lsls	r3, r3, #20
 8006652:	429a      	cmp	r2, r3
 8006654:	d1a1      	bne.n	800659a <_strtod_l+0x9da>
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa fcd5 	bl	8001008 <__aeabi_d2lz>
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_l2d>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7f9 fe3b 	bl	80002e4 <__aeabi_dsub>
 800666e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006674:	ea43 0308 	orr.w	r3, r3, r8
 8006678:	4313      	orrs	r3, r2
 800667a:	4604      	mov	r4, r0
 800667c:	460d      	mov	r5, r1
 800667e:	d066      	beq.n	800674e <_strtod_l+0xb8e>
 8006680:	a309      	add	r3, pc, #36	; (adr r3, 80066a8 <_strtod_l+0xae8>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7fa fa57 	bl	8000b38 <__aeabi_dcmplt>
 800668a:	2800      	cmp	r0, #0
 800668c:	f47f ace2 	bne.w	8006054 <_strtod_l+0x494>
 8006690:	a307      	add	r3, pc, #28	; (adr r3, 80066b0 <_strtod_l+0xaf0>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7fa fa6b 	bl	8000b74 <__aeabi_dcmpgt>
 800669e:	2800      	cmp	r0, #0
 80066a0:	f43f af7b 	beq.w	800659a <_strtod_l+0x9da>
 80066a4:	e4d6      	b.n	8006054 <_strtod_l+0x494>
 80066a6:	bf00      	nop
 80066a8:	94a03595 	.word	0x94a03595
 80066ac:	3fdfffff 	.word	0x3fdfffff
 80066b0:	35afe535 	.word	0x35afe535
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	000fffff 	.word	0x000fffff
 80066bc:	7ff00000 	.word	0x7ff00000
 80066c0:	7fefffff 	.word	0x7fefffff
 80066c4:	3ff00000 	.word	0x3ff00000
 80066c8:	7fe00000 	.word	0x7fe00000
 80066cc:	7c9fffff 	.word	0x7c9fffff
 80066d0:	3fe00000 	.word	0x3fe00000
 80066d4:	bff00000 	.word	0xbff00000
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	b313      	cbz	r3, 8006722 <_strtod_l+0xb62>
 80066dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066e2:	d81e      	bhi.n	8006722 <_strtod_l+0xb62>
 80066e4:	a326      	add	r3, pc, #152	; (adr r3, 8006780 <_strtod_l+0xbc0>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	4620      	mov	r0, r4
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7fa fa2d 	bl	8000b4c <__aeabi_dcmple>
 80066f2:	b190      	cbz	r0, 800671a <_strtod_l+0xb5a>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7fa fa5c 	bl	8000bb4 <__aeabi_d2uiz>
 80066fc:	2801      	cmp	r0, #1
 80066fe:	bf38      	it	cc
 8006700:	2001      	movcc	r0, #1
 8006702:	f7f9 ff2d 	bl	8000560 <__aeabi_ui2d>
 8006706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	b9d3      	cbnz	r3, 8006744 <_strtod_l+0xb84>
 800670e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006712:	9012      	str	r0, [sp, #72]	; 0x48
 8006714:	9313      	str	r3, [sp, #76]	; 0x4c
 8006716:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800671a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800671c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006720:	1a9f      	subs	r7, r3, r2
 8006722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006726:	f001 f899 	bl	800785c <__ulp>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4630      	mov	r0, r6
 8006730:	4639      	mov	r1, r7
 8006732:	f7f9 ff8f 	bl	8000654 <__aeabi_dmul>
 8006736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800673a:	f7f9 fdd5 	bl	80002e8 <__adddf3>
 800673e:	4680      	mov	r8, r0
 8006740:	4689      	mov	r9, r1
 8006742:	e77e      	b.n	8006642 <_strtod_l+0xa82>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800674c:	e7e3      	b.n	8006716 <_strtod_l+0xb56>
 800674e:	a30e      	add	r3, pc, #56	; (adr r3, 8006788 <_strtod_l+0xbc8>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7fa f9f0 	bl	8000b38 <__aeabi_dcmplt>
 8006758:	e7a1      	b.n	800669e <_strtod_l+0xade>
 800675a:	2300      	movs	r3, #0
 800675c:	930a      	str	r3, [sp, #40]	; 0x28
 800675e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006760:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	f7ff ba71 	b.w	8005c4a <_strtod_l+0x8a>
 8006768:	2a65      	cmp	r2, #101	; 0x65
 800676a:	f43f ab63 	beq.w	8005e34 <_strtod_l+0x274>
 800676e:	2a45      	cmp	r2, #69	; 0x45
 8006770:	f43f ab60 	beq.w	8005e34 <_strtod_l+0x274>
 8006774:	2301      	movs	r3, #1
 8006776:	f7ff bb95 	b.w	8005ea4 <_strtod_l+0x2e4>
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	ffc00000 	.word	0xffc00000
 8006784:	41dfffff 	.word	0x41dfffff
 8006788:	94a03595 	.word	0x94a03595
 800678c:	3fcfffff 	.word	0x3fcfffff

08006790 <strtof>:
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	4f22      	ldr	r7, [pc, #136]	; (8006820 <strtof+0x90>)
 8006796:	460a      	mov	r2, r1
 8006798:	4b22      	ldr	r3, [pc, #136]	; (8006824 <strtof+0x94>)
 800679a:	4601      	mov	r1, r0
 800679c:	6838      	ldr	r0, [r7, #0]
 800679e:	f7ff fa0f 	bl	8005bc0 <_strtod_l>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4606      	mov	r6, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	f7fa f9ed 	bl	8000b88 <__aeabi_dcmpun>
 80067ae:	b168      	cbz	r0, 80067cc <strtof+0x3c>
 80067b0:	2c00      	cmp	r4, #0
 80067b2:	481d      	ldr	r0, [pc, #116]	; (8006828 <strtof+0x98>)
 80067b4:	da06      	bge.n	80067c4 <strtof+0x34>
 80067b6:	f001 fdfd 	bl	80083b4 <nanf>
 80067ba:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80067be:	4628      	mov	r0, r5
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c8:	f001 bdf4 	b.w	80083b4 <nanf>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7fa fa10 	bl	8000bf4 <__aeabi_d2f>
 80067d4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80067d8:	4605      	mov	r5, r0
 80067da:	4914      	ldr	r1, [pc, #80]	; (800682c <strtof+0x9c>)
 80067dc:	4640      	mov	r0, r8
 80067de:	f7fa fbdd 	bl	8000f9c <__aeabi_fcmpun>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d1eb      	bne.n	80067be <strtof+0x2e>
 80067e6:	4640      	mov	r0, r8
 80067e8:	4910      	ldr	r1, [pc, #64]	; (800682c <strtof+0x9c>)
 80067ea:	f7fa fbb9 	bl	8000f60 <__aeabi_fcmple>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1e5      	bne.n	80067be <strtof+0x2e>
 80067f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80067f6:	f04f 32ff 	mov.w	r2, #4294967295
 80067fa:	4630      	mov	r0, r6
 80067fc:	4621      	mov	r1, r4
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <strtof+0xa0>)
 8006800:	f7fa f9c2 	bl	8000b88 <__aeabi_dcmpun>
 8006804:	b940      	cbnz	r0, 8006818 <strtof+0x88>
 8006806:	f04f 32ff 	mov.w	r2, #4294967295
 800680a:	4630      	mov	r0, r6
 800680c:	4621      	mov	r1, r4
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <strtof+0xa0>)
 8006810:	f7fa f99c 	bl	8000b4c <__aeabi_dcmple>
 8006814:	2800      	cmp	r0, #0
 8006816:	d0d2      	beq.n	80067be <strtof+0x2e>
 8006818:	2222      	movs	r2, #34	; 0x22
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e7ce      	b.n	80067be <strtof+0x2e>
 8006820:	20000018 	.word	0x20000018
 8006824:	20000080 	.word	0x20000080
 8006828:	08008f2f 	.word	0x08008f2f
 800682c:	7f7fffff 	.word	0x7f7fffff
 8006830:	7fefffff 	.word	0x7fefffff

08006834 <strtok>:
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <strtok+0x5c>)
 8006836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683a:	681f      	ldr	r7, [r3, #0]
 800683c:	4605      	mov	r5, r0
 800683e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006840:	460e      	mov	r6, r1
 8006842:	b9ec      	cbnz	r4, 8006880 <strtok+0x4c>
 8006844:	2050      	movs	r0, #80	; 0x50
 8006846:	f7ff f873 	bl	8005930 <malloc>
 800684a:	4602      	mov	r2, r0
 800684c:	65b8      	str	r0, [r7, #88]	; 0x58
 800684e:	b920      	cbnz	r0, 800685a <strtok+0x26>
 8006850:	2157      	movs	r1, #87	; 0x57
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <strtok+0x60>)
 8006854:	4810      	ldr	r0, [pc, #64]	; (8006898 <strtok+0x64>)
 8006856:	f000 f8cf 	bl	80069f8 <__assert_func>
 800685a:	e9c0 4400 	strd	r4, r4, [r0]
 800685e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006862:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006866:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800686a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800686e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006872:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006876:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800687a:	6184      	str	r4, [r0, #24]
 800687c:	7704      	strb	r4, [r0, #28]
 800687e:	6244      	str	r4, [r0, #36]	; 0x24
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006886:	2301      	movs	r3, #1
 8006888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	f000 b806 	b.w	800689c <__strtok_r>
 8006890:	20000018 	.word	0x20000018
 8006894:	08008e80 	.word	0x08008e80
 8006898:	08008e97 	.word	0x08008e97

0800689c <__strtok_r>:
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689e:	b908      	cbnz	r0, 80068a4 <__strtok_r+0x8>
 80068a0:	6810      	ldr	r0, [r2, #0]
 80068a2:	b188      	cbz	r0, 80068c8 <__strtok_r+0x2c>
 80068a4:	4604      	mov	r4, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	4620      	mov	r0, r4
 80068aa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80068ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80068b2:	b91e      	cbnz	r6, 80068bc <__strtok_r+0x20>
 80068b4:	b965      	cbnz	r5, 80068d0 <__strtok_r+0x34>
 80068b6:	4628      	mov	r0, r5
 80068b8:	6015      	str	r5, [r2, #0]
 80068ba:	e005      	b.n	80068c8 <__strtok_r+0x2c>
 80068bc:	42b5      	cmp	r5, r6
 80068be:	d1f6      	bne.n	80068ae <__strtok_r+0x12>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f0      	bne.n	80068a6 <__strtok_r+0xa>
 80068c4:	6014      	str	r4, [r2, #0]
 80068c6:	7003      	strb	r3, [r0, #0]
 80068c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ca:	461c      	mov	r4, r3
 80068cc:	e00c      	b.n	80068e8 <__strtok_r+0x4c>
 80068ce:	b915      	cbnz	r5, 80068d6 <__strtok_r+0x3a>
 80068d0:	460e      	mov	r6, r1
 80068d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80068da:	42ab      	cmp	r3, r5
 80068dc:	d1f7      	bne.n	80068ce <__strtok_r+0x32>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f3      	beq.n	80068ca <__strtok_r+0x2e>
 80068e2:	2300      	movs	r3, #0
 80068e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80068e8:	6014      	str	r4, [r2, #0]
 80068ea:	e7ed      	b.n	80068c8 <__strtok_r+0x2c>

080068ec <_strtol_l.constprop.0>:
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f2:	4680      	mov	r8, r0
 80068f4:	d001      	beq.n	80068fa <_strtol_l.constprop.0+0xe>
 80068f6:	2b24      	cmp	r3, #36	; 0x24
 80068f8:	d906      	bls.n	8006908 <_strtol_l.constprop.0+0x1c>
 80068fa:	f7fe ffef 	bl	80058dc <__errno>
 80068fe:	2316      	movs	r3, #22
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	2000      	movs	r0, #0
 8006904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006908:	460d      	mov	r5, r1
 800690a:	4f35      	ldr	r7, [pc, #212]	; (80069e0 <_strtol_l.constprop.0+0xf4>)
 800690c:	4628      	mov	r0, r5
 800690e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006912:	5de6      	ldrb	r6, [r4, r7]
 8006914:	f016 0608 	ands.w	r6, r6, #8
 8006918:	d1f8      	bne.n	800690c <_strtol_l.constprop.0+0x20>
 800691a:	2c2d      	cmp	r4, #45	; 0x2d
 800691c:	d12f      	bne.n	800697e <_strtol_l.constprop.0+0x92>
 800691e:	2601      	movs	r6, #1
 8006920:	782c      	ldrb	r4, [r5, #0]
 8006922:	1c85      	adds	r5, r0, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d057      	beq.n	80069d8 <_strtol_l.constprop.0+0xec>
 8006928:	2b10      	cmp	r3, #16
 800692a:	d109      	bne.n	8006940 <_strtol_l.constprop.0+0x54>
 800692c:	2c30      	cmp	r4, #48	; 0x30
 800692e:	d107      	bne.n	8006940 <_strtol_l.constprop.0+0x54>
 8006930:	7828      	ldrb	r0, [r5, #0]
 8006932:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006936:	2858      	cmp	r0, #88	; 0x58
 8006938:	d149      	bne.n	80069ce <_strtol_l.constprop.0+0xe2>
 800693a:	2310      	movs	r3, #16
 800693c:	786c      	ldrb	r4, [r5, #1]
 800693e:	3502      	adds	r5, #2
 8006940:	2700      	movs	r7, #0
 8006942:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006946:	f10e 3eff 	add.w	lr, lr, #4294967295
 800694a:	fbbe f9f3 	udiv	r9, lr, r3
 800694e:	4638      	mov	r0, r7
 8006950:	fb03 ea19 	mls	sl, r3, r9, lr
 8006954:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006958:	f1bc 0f09 	cmp.w	ip, #9
 800695c:	d814      	bhi.n	8006988 <_strtol_l.constprop.0+0x9c>
 800695e:	4664      	mov	r4, ip
 8006960:	42a3      	cmp	r3, r4
 8006962:	dd22      	ble.n	80069aa <_strtol_l.constprop.0+0xbe>
 8006964:	2f00      	cmp	r7, #0
 8006966:	db1d      	blt.n	80069a4 <_strtol_l.constprop.0+0xb8>
 8006968:	4581      	cmp	r9, r0
 800696a:	d31b      	bcc.n	80069a4 <_strtol_l.constprop.0+0xb8>
 800696c:	d101      	bne.n	8006972 <_strtol_l.constprop.0+0x86>
 800696e:	45a2      	cmp	sl, r4
 8006970:	db18      	blt.n	80069a4 <_strtol_l.constprop.0+0xb8>
 8006972:	2701      	movs	r7, #1
 8006974:	fb00 4003 	mla	r0, r0, r3, r4
 8006978:	f815 4b01 	ldrb.w	r4, [r5], #1
 800697c:	e7ea      	b.n	8006954 <_strtol_l.constprop.0+0x68>
 800697e:	2c2b      	cmp	r4, #43	; 0x2b
 8006980:	bf04      	itt	eq
 8006982:	782c      	ldrbeq	r4, [r5, #0]
 8006984:	1c85      	addeq	r5, r0, #2
 8006986:	e7cd      	b.n	8006924 <_strtol_l.constprop.0+0x38>
 8006988:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800698c:	f1bc 0f19 	cmp.w	ip, #25
 8006990:	d801      	bhi.n	8006996 <_strtol_l.constprop.0+0xaa>
 8006992:	3c37      	subs	r4, #55	; 0x37
 8006994:	e7e4      	b.n	8006960 <_strtol_l.constprop.0+0x74>
 8006996:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800699a:	f1bc 0f19 	cmp.w	ip, #25
 800699e:	d804      	bhi.n	80069aa <_strtol_l.constprop.0+0xbe>
 80069a0:	3c57      	subs	r4, #87	; 0x57
 80069a2:	e7dd      	b.n	8006960 <_strtol_l.constprop.0+0x74>
 80069a4:	f04f 37ff 	mov.w	r7, #4294967295
 80069a8:	e7e6      	b.n	8006978 <_strtol_l.constprop.0+0x8c>
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	da07      	bge.n	80069be <_strtol_l.constprop.0+0xd2>
 80069ae:	2322      	movs	r3, #34	; 0x22
 80069b0:	4670      	mov	r0, lr
 80069b2:	f8c8 3000 	str.w	r3, [r8]
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	d0a4      	beq.n	8006904 <_strtol_l.constprop.0+0x18>
 80069ba:	1e69      	subs	r1, r5, #1
 80069bc:	e005      	b.n	80069ca <_strtol_l.constprop.0+0xde>
 80069be:	b106      	cbz	r6, 80069c2 <_strtol_l.constprop.0+0xd6>
 80069c0:	4240      	negs	r0, r0
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d09e      	beq.n	8006904 <_strtol_l.constprop.0+0x18>
 80069c6:	2f00      	cmp	r7, #0
 80069c8:	d1f7      	bne.n	80069ba <_strtol_l.constprop.0+0xce>
 80069ca:	6011      	str	r1, [r2, #0]
 80069cc:	e79a      	b.n	8006904 <_strtol_l.constprop.0+0x18>
 80069ce:	2430      	movs	r4, #48	; 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1b5      	bne.n	8006940 <_strtol_l.constprop.0+0x54>
 80069d4:	2308      	movs	r3, #8
 80069d6:	e7b3      	b.n	8006940 <_strtol_l.constprop.0+0x54>
 80069d8:	2c30      	cmp	r4, #48	; 0x30
 80069da:	d0a9      	beq.n	8006930 <_strtol_l.constprop.0+0x44>
 80069dc:	230a      	movs	r3, #10
 80069de:	e7af      	b.n	8006940 <_strtol_l.constprop.0+0x54>
 80069e0:	08008f31 	.word	0x08008f31

080069e4 <strtol>:
 80069e4:	4613      	mov	r3, r2
 80069e6:	460a      	mov	r2, r1
 80069e8:	4601      	mov	r1, r0
 80069ea:	4802      	ldr	r0, [pc, #8]	; (80069f4 <strtol+0x10>)
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f7ff bf7d 	b.w	80068ec <_strtol_l.constprop.0>
 80069f2:	bf00      	nop
 80069f4:	20000018 	.word	0x20000018

080069f8 <__assert_func>:
 80069f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069fa:	4614      	mov	r4, r2
 80069fc:	461a      	mov	r2, r3
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <__assert_func+0x2c>)
 8006a00:	4605      	mov	r5, r0
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68d8      	ldr	r0, [r3, #12]
 8006a06:	b14c      	cbz	r4, 8006a1c <__assert_func+0x24>
 8006a08:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <__assert_func+0x30>)
 8006a0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a0e:	9100      	str	r1, [sp, #0]
 8006a10:	462b      	mov	r3, r5
 8006a12:	4906      	ldr	r1, [pc, #24]	; (8006a2c <__assert_func+0x34>)
 8006a14:	f000 f80e 	bl	8006a34 <fiprintf>
 8006a18:	f001 fdb2 	bl	8008580 <abort>
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <__assert_func+0x38>)
 8006a1e:	461c      	mov	r4, r3
 8006a20:	e7f3      	b.n	8006a0a <__assert_func+0x12>
 8006a22:	bf00      	nop
 8006a24:	20000018 	.word	0x20000018
 8006a28:	08008ef4 	.word	0x08008ef4
 8006a2c:	08008f01 	.word	0x08008f01
 8006a30:	08008f2f 	.word	0x08008f2f

08006a34 <fiprintf>:
 8006a34:	b40e      	push	{r1, r2, r3}
 8006a36:	b503      	push	{r0, r1, lr}
 8006a38:	4601      	mov	r1, r0
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	4805      	ldr	r0, [pc, #20]	; (8006a54 <fiprintf+0x20>)
 8006a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	f001 f9e9 	bl	8007e1c <_vfiprintf_r>
 8006a4a:	b002      	add	sp, #8
 8006a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr
 8006a54:	20000018 	.word	0x20000018

08006a58 <rshift>:
 8006a58:	6903      	ldr	r3, [r0, #16]
 8006a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a62:	f100 0414 	add.w	r4, r0, #20
 8006a66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006a6a:	dd46      	ble.n	8006afa <rshift+0xa2>
 8006a6c:	f011 011f 	ands.w	r1, r1, #31
 8006a70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006a74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006a78:	d10c      	bne.n	8006a94 <rshift+0x3c>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f100 0710 	add.w	r7, r0, #16
 8006a80:	42b1      	cmp	r1, r6
 8006a82:	d335      	bcc.n	8006af0 <rshift+0x98>
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	1eea      	subs	r2, r5, #3
 8006a8a:	4296      	cmp	r6, r2
 8006a8c:	bf38      	it	cc
 8006a8e:	2300      	movcc	r3, #0
 8006a90:	4423      	add	r3, r4
 8006a92:	e015      	b.n	8006ac0 <rshift+0x68>
 8006a94:	46a1      	mov	r9, r4
 8006a96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006a9a:	f1c1 0820 	rsb	r8, r1, #32
 8006a9e:	40cf      	lsrs	r7, r1
 8006aa0:	f105 0e04 	add.w	lr, r5, #4
 8006aa4:	4576      	cmp	r6, lr
 8006aa6:	46f4      	mov	ip, lr
 8006aa8:	d816      	bhi.n	8006ad8 <rshift+0x80>
 8006aaa:	1a9a      	subs	r2, r3, r2
 8006aac:	0092      	lsls	r2, r2, #2
 8006aae:	3a04      	subs	r2, #4
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	42ae      	cmp	r6, r5
 8006ab4:	bf38      	it	cc
 8006ab6:	2200      	movcc	r2, #0
 8006ab8:	18a3      	adds	r3, r4, r2
 8006aba:	50a7      	str	r7, [r4, r2]
 8006abc:	b107      	cbz	r7, 8006ac0 <rshift+0x68>
 8006abe:	3304      	adds	r3, #4
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	eba3 0204 	sub.w	r2, r3, r4
 8006ac6:	bf08      	it	eq
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ace:	6102      	str	r2, [r0, #16]
 8006ad0:	bf08      	it	eq
 8006ad2:	6143      	streq	r3, [r0, #20]
 8006ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ad8:	f8dc c000 	ldr.w	ip, [ip]
 8006adc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ae0:	ea4c 0707 	orr.w	r7, ip, r7
 8006ae4:	f849 7b04 	str.w	r7, [r9], #4
 8006ae8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006aec:	40cf      	lsrs	r7, r1
 8006aee:	e7d9      	b.n	8006aa4 <rshift+0x4c>
 8006af0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006af4:	f847 cf04 	str.w	ip, [r7, #4]!
 8006af8:	e7c2      	b.n	8006a80 <rshift+0x28>
 8006afa:	4623      	mov	r3, r4
 8006afc:	e7e0      	b.n	8006ac0 <rshift+0x68>

08006afe <__hexdig_fun>:
 8006afe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b02:	2b09      	cmp	r3, #9
 8006b04:	d802      	bhi.n	8006b0c <__hexdig_fun+0xe>
 8006b06:	3820      	subs	r0, #32
 8006b08:	b2c0      	uxtb	r0, r0
 8006b0a:	4770      	bx	lr
 8006b0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d801      	bhi.n	8006b18 <__hexdig_fun+0x1a>
 8006b14:	3847      	subs	r0, #71	; 0x47
 8006b16:	e7f7      	b.n	8006b08 <__hexdig_fun+0xa>
 8006b18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b1c:	2b05      	cmp	r3, #5
 8006b1e:	d801      	bhi.n	8006b24 <__hexdig_fun+0x26>
 8006b20:	3827      	subs	r0, #39	; 0x27
 8006b22:	e7f1      	b.n	8006b08 <__hexdig_fun+0xa>
 8006b24:	2000      	movs	r0, #0
 8006b26:	4770      	bx	lr

08006b28 <__gethex>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	b08b      	sub	sp, #44	; 0x2c
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	4bb2      	ldr	r3, [pc, #712]	; (8006dfc <__gethex+0x2d4>)
 8006b32:	9002      	str	r0, [sp, #8]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	468b      	mov	fp, r1
 8006b38:	4618      	mov	r0, r3
 8006b3a:	4690      	mov	r8, r2
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	f7f9 fb11 	bl	8000164 <strlen>
 8006b42:	4682      	mov	sl, r0
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	f8db 2000 	ldr.w	r2, [fp]
 8006b4a:	4403      	add	r3, r0
 8006b4c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b50:	9306      	str	r3, [sp, #24]
 8006b52:	1c93      	adds	r3, r2, #2
 8006b54:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006b58:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006b5c:	32fe      	adds	r2, #254	; 0xfe
 8006b5e:	18d1      	adds	r1, r2, r3
 8006b60:	461f      	mov	r7, r3
 8006b62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b66:	9101      	str	r1, [sp, #4]
 8006b68:	2830      	cmp	r0, #48	; 0x30
 8006b6a:	d0f8      	beq.n	8006b5e <__gethex+0x36>
 8006b6c:	f7ff ffc7 	bl	8006afe <__hexdig_fun>
 8006b70:	4604      	mov	r4, r0
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d13a      	bne.n	8006bec <__gethex+0xc4>
 8006b76:	4652      	mov	r2, sl
 8006b78:	4638      	mov	r0, r7
 8006b7a:	9903      	ldr	r1, [sp, #12]
 8006b7c:	f001 fc1e 	bl	80083bc <strncmp>
 8006b80:	4605      	mov	r5, r0
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d166      	bne.n	8006c54 <__gethex+0x12c>
 8006b86:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006b8a:	eb07 060a 	add.w	r6, r7, sl
 8006b8e:	f7ff ffb6 	bl	8006afe <__hexdig_fun>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d060      	beq.n	8006c58 <__gethex+0x130>
 8006b96:	4633      	mov	r3, r6
 8006b98:	7818      	ldrb	r0, [r3, #0]
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	2830      	cmp	r0, #48	; 0x30
 8006b9e:	f103 0301 	add.w	r3, r3, #1
 8006ba2:	d0f9      	beq.n	8006b98 <__gethex+0x70>
 8006ba4:	f7ff ffab 	bl	8006afe <__hexdig_fun>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	fab0 f480 	clz	r4, r0
 8006bae:	4635      	mov	r5, r6
 8006bb0:	0964      	lsrs	r4, r4, #5
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	463a      	mov	r2, r7
 8006bb6:	4616      	mov	r6, r2
 8006bb8:	7830      	ldrb	r0, [r6, #0]
 8006bba:	3201      	adds	r2, #1
 8006bbc:	f7ff ff9f 	bl	8006afe <__hexdig_fun>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d1f8      	bne.n	8006bb6 <__gethex+0x8e>
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	9903      	ldr	r1, [sp, #12]
 8006bca:	f001 fbf7 	bl	80083bc <strncmp>
 8006bce:	b980      	cbnz	r0, 8006bf2 <__gethex+0xca>
 8006bd0:	b94d      	cbnz	r5, 8006be6 <__gethex+0xbe>
 8006bd2:	eb06 050a 	add.w	r5, r6, sl
 8006bd6:	462a      	mov	r2, r5
 8006bd8:	4616      	mov	r6, r2
 8006bda:	7830      	ldrb	r0, [r6, #0]
 8006bdc:	3201      	adds	r2, #1
 8006bde:	f7ff ff8e 	bl	8006afe <__hexdig_fun>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d1f8      	bne.n	8006bd8 <__gethex+0xb0>
 8006be6:	1bad      	subs	r5, r5, r6
 8006be8:	00ad      	lsls	r5, r5, #2
 8006bea:	e004      	b.n	8006bf6 <__gethex+0xce>
 8006bec:	2400      	movs	r4, #0
 8006bee:	4625      	mov	r5, r4
 8006bf0:	e7e0      	b.n	8006bb4 <__gethex+0x8c>
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	d1f7      	bne.n	8006be6 <__gethex+0xbe>
 8006bf6:	7833      	ldrb	r3, [r6, #0]
 8006bf8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bfc:	2b50      	cmp	r3, #80	; 0x50
 8006bfe:	d139      	bne.n	8006c74 <__gethex+0x14c>
 8006c00:	7873      	ldrb	r3, [r6, #1]
 8006c02:	2b2b      	cmp	r3, #43	; 0x2b
 8006c04:	d02a      	beq.n	8006c5c <__gethex+0x134>
 8006c06:	2b2d      	cmp	r3, #45	; 0x2d
 8006c08:	d02c      	beq.n	8006c64 <__gethex+0x13c>
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	1c71      	adds	r1, r6, #1
 8006c10:	7808      	ldrb	r0, [r1, #0]
 8006c12:	f7ff ff74 	bl	8006afe <__hexdig_fun>
 8006c16:	1e43      	subs	r3, r0, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b18      	cmp	r3, #24
 8006c1c:	d82a      	bhi.n	8006c74 <__gethex+0x14c>
 8006c1e:	f1a0 0210 	sub.w	r2, r0, #16
 8006c22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c26:	f7ff ff6a 	bl	8006afe <__hexdig_fun>
 8006c2a:	1e43      	subs	r3, r0, #1
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b18      	cmp	r3, #24
 8006c30:	d91b      	bls.n	8006c6a <__gethex+0x142>
 8006c32:	f1b9 0f00 	cmp.w	r9, #0
 8006c36:	d000      	beq.n	8006c3a <__gethex+0x112>
 8006c38:	4252      	negs	r2, r2
 8006c3a:	4415      	add	r5, r2
 8006c3c:	f8cb 1000 	str.w	r1, [fp]
 8006c40:	b1d4      	cbz	r4, 8006c78 <__gethex+0x150>
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bf14      	ite	ne
 8006c48:	2700      	movne	r7, #0
 8006c4a:	2706      	moveq	r7, #6
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	b00b      	add	sp, #44	; 0x2c
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	463e      	mov	r6, r7
 8006c56:	4625      	mov	r5, r4
 8006c58:	2401      	movs	r4, #1
 8006c5a:	e7cc      	b.n	8006bf6 <__gethex+0xce>
 8006c5c:	f04f 0900 	mov.w	r9, #0
 8006c60:	1cb1      	adds	r1, r6, #2
 8006c62:	e7d5      	b.n	8006c10 <__gethex+0xe8>
 8006c64:	f04f 0901 	mov.w	r9, #1
 8006c68:	e7fa      	b.n	8006c60 <__gethex+0x138>
 8006c6a:	230a      	movs	r3, #10
 8006c6c:	fb03 0202 	mla	r2, r3, r2, r0
 8006c70:	3a10      	subs	r2, #16
 8006c72:	e7d6      	b.n	8006c22 <__gethex+0xfa>
 8006c74:	4631      	mov	r1, r6
 8006c76:	e7e1      	b.n	8006c3c <__gethex+0x114>
 8006c78:	4621      	mov	r1, r4
 8006c7a:	1bf3      	subs	r3, r6, r7
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	2b07      	cmp	r3, #7
 8006c80:	dc0a      	bgt.n	8006c98 <__gethex+0x170>
 8006c82:	9802      	ldr	r0, [sp, #8]
 8006c84:	f000 fa7a 	bl	800717c <_Balloc>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	b940      	cbnz	r0, 8006c9e <__gethex+0x176>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	21de      	movs	r1, #222	; 0xde
 8006c90:	4b5b      	ldr	r3, [pc, #364]	; (8006e00 <__gethex+0x2d8>)
 8006c92:	485c      	ldr	r0, [pc, #368]	; (8006e04 <__gethex+0x2dc>)
 8006c94:	f7ff feb0 	bl	80069f8 <__assert_func>
 8006c98:	3101      	adds	r1, #1
 8006c9a:	105b      	asrs	r3, r3, #1
 8006c9c:	e7ef      	b.n	8006c7e <__gethex+0x156>
 8006c9e:	f04f 0b00 	mov.w	fp, #0
 8006ca2:	f100 0914 	add.w	r9, r0, #20
 8006ca6:	f1ca 0301 	rsb	r3, sl, #1
 8006caa:	f8cd 9010 	str.w	r9, [sp, #16]
 8006cae:	f8cd b004 	str.w	fp, [sp, #4]
 8006cb2:	9308      	str	r3, [sp, #32]
 8006cb4:	42b7      	cmp	r7, r6
 8006cb6:	d33f      	bcc.n	8006d38 <__gethex+0x210>
 8006cb8:	9f04      	ldr	r7, [sp, #16]
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	f847 3b04 	str.w	r3, [r7], #4
 8006cc0:	eba7 0709 	sub.w	r7, r7, r9
 8006cc4:	10bf      	asrs	r7, r7, #2
 8006cc6:	6127      	str	r7, [r4, #16]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fb49 	bl	8007360 <__hi0bits>
 8006cce:	017f      	lsls	r7, r7, #5
 8006cd0:	f8d8 6000 	ldr.w	r6, [r8]
 8006cd4:	1a3f      	subs	r7, r7, r0
 8006cd6:	42b7      	cmp	r7, r6
 8006cd8:	dd62      	ble.n	8006da0 <__gethex+0x278>
 8006cda:	1bbf      	subs	r7, r7, r6
 8006cdc:	4639      	mov	r1, r7
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fee3 	bl	8007aaa <__any_on>
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	b1a8      	cbz	r0, 8006d14 <__gethex+0x1ec>
 8006ce8:	f04f 0a01 	mov.w	sl, #1
 8006cec:	1e7b      	subs	r3, r7, #1
 8006cee:	1159      	asrs	r1, r3, #5
 8006cf0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006cf4:	f003 021f 	and.w	r2, r3, #31
 8006cf8:	fa0a f202 	lsl.w	r2, sl, r2
 8006cfc:	420a      	tst	r2, r1
 8006cfe:	d009      	beq.n	8006d14 <__gethex+0x1ec>
 8006d00:	4553      	cmp	r3, sl
 8006d02:	dd05      	ble.n	8006d10 <__gethex+0x1e8>
 8006d04:	4620      	mov	r0, r4
 8006d06:	1eb9      	subs	r1, r7, #2
 8006d08:	f000 fecf 	bl	8007aaa <__any_on>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d144      	bne.n	8006d9a <__gethex+0x272>
 8006d10:	f04f 0a02 	mov.w	sl, #2
 8006d14:	4639      	mov	r1, r7
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff fe9e 	bl	8006a58 <rshift>
 8006d1c:	443d      	add	r5, r7
 8006d1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d22:	42ab      	cmp	r3, r5
 8006d24:	da4a      	bge.n	8006dbc <__gethex+0x294>
 8006d26:	4621      	mov	r1, r4
 8006d28:	9802      	ldr	r0, [sp, #8]
 8006d2a:	f000 fa67 	bl	80071fc <_Bfree>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d32:	27a3      	movs	r7, #163	; 0xa3
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e789      	b.n	8006c4c <__gethex+0x124>
 8006d38:	1e73      	subs	r3, r6, #1
 8006d3a:	9a06      	ldr	r2, [sp, #24]
 8006d3c:	9307      	str	r3, [sp, #28]
 8006d3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d019      	beq.n	8006d7a <__gethex+0x252>
 8006d46:	f1bb 0f20 	cmp.w	fp, #32
 8006d4a:	d107      	bne.n	8006d5c <__gethex+0x234>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	9a01      	ldr	r2, [sp, #4]
 8006d50:	f843 2b04 	str.w	r2, [r3], #4
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	2300      	movs	r3, #0
 8006d58:	469b      	mov	fp, r3
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d60:	f7ff fecd 	bl	8006afe <__hexdig_fun>
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	f000 000f 	and.w	r0, r0, #15
 8006d6a:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d6e:	4303      	orrs	r3, r0
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	f10b 0b04 	add.w	fp, fp, #4
 8006d76:	9b07      	ldr	r3, [sp, #28]
 8006d78:	e00d      	b.n	8006d96 <__gethex+0x26e>
 8006d7a:	9a08      	ldr	r2, [sp, #32]
 8006d7c:	1e73      	subs	r3, r6, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	42bb      	cmp	r3, r7
 8006d82:	d3e0      	bcc.n	8006d46 <__gethex+0x21e>
 8006d84:	4618      	mov	r0, r3
 8006d86:	4652      	mov	r2, sl
 8006d88:	9903      	ldr	r1, [sp, #12]
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	f001 fb16 	bl	80083bc <strncmp>
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d1d7      	bne.n	8006d46 <__gethex+0x21e>
 8006d96:	461e      	mov	r6, r3
 8006d98:	e78c      	b.n	8006cb4 <__gethex+0x18c>
 8006d9a:	f04f 0a03 	mov.w	sl, #3
 8006d9e:	e7b9      	b.n	8006d14 <__gethex+0x1ec>
 8006da0:	da09      	bge.n	8006db6 <__gethex+0x28e>
 8006da2:	1bf7      	subs	r7, r6, r7
 8006da4:	4621      	mov	r1, r4
 8006da6:	463a      	mov	r2, r7
 8006da8:	9802      	ldr	r0, [sp, #8]
 8006daa:	f000 fc3f 	bl	800762c <__lshift>
 8006dae:	4604      	mov	r4, r0
 8006db0:	1bed      	subs	r5, r5, r7
 8006db2:	f100 0914 	add.w	r9, r0, #20
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	e7b0      	b.n	8006d1e <__gethex+0x1f6>
 8006dbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006dc0:	42a8      	cmp	r0, r5
 8006dc2:	dd72      	ble.n	8006eaa <__gethex+0x382>
 8006dc4:	1b45      	subs	r5, r0, r5
 8006dc6:	42ae      	cmp	r6, r5
 8006dc8:	dc35      	bgt.n	8006e36 <__gethex+0x30e>
 8006dca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d029      	beq.n	8006e26 <__gethex+0x2fe>
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d02b      	beq.n	8006e2e <__gethex+0x306>
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d11c      	bne.n	8006e14 <__gethex+0x2ec>
 8006dda:	42ae      	cmp	r6, r5
 8006ddc:	d11a      	bne.n	8006e14 <__gethex+0x2ec>
 8006dde:	2e01      	cmp	r6, #1
 8006de0:	d112      	bne.n	8006e08 <__gethex+0x2e0>
 8006de2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006de6:	9a05      	ldr	r2, [sp, #20]
 8006de8:	2762      	movs	r7, #98	; 0x62
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	2301      	movs	r3, #1
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	f8c9 3000 	str.w	r3, [r9]
 8006df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006df6:	601c      	str	r4, [r3, #0]
 8006df8:	e728      	b.n	8006c4c <__gethex+0x124>
 8006dfa:	bf00      	nop
 8006dfc:	080090a8 	.word	0x080090a8
 8006e00:	08009031 	.word	0x08009031
 8006e04:	08009042 	.word	0x08009042
 8006e08:	4620      	mov	r0, r4
 8006e0a:	1e71      	subs	r1, r6, #1
 8006e0c:	f000 fe4d 	bl	8007aaa <__any_on>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1e6      	bne.n	8006de2 <__gethex+0x2ba>
 8006e14:	4621      	mov	r1, r4
 8006e16:	9802      	ldr	r0, [sp, #8]
 8006e18:	f000 f9f0 	bl	80071fc <_Bfree>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e20:	2750      	movs	r7, #80	; 0x50
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e712      	b.n	8006c4c <__gethex+0x124>
 8006e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f3      	bne.n	8006e14 <__gethex+0x2ec>
 8006e2c:	e7d9      	b.n	8006de2 <__gethex+0x2ba>
 8006e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1d6      	bne.n	8006de2 <__gethex+0x2ba>
 8006e34:	e7ee      	b.n	8006e14 <__gethex+0x2ec>
 8006e36:	1e6f      	subs	r7, r5, #1
 8006e38:	f1ba 0f00 	cmp.w	sl, #0
 8006e3c:	d132      	bne.n	8006ea4 <__gethex+0x37c>
 8006e3e:	b127      	cbz	r7, 8006e4a <__gethex+0x322>
 8006e40:	4639      	mov	r1, r7
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fe31 	bl	8007aaa <__any_on>
 8006e48:	4682      	mov	sl, r0
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	117b      	asrs	r3, r7, #5
 8006e4e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006e52:	f007 071f 	and.w	r7, r7, #31
 8006e56:	fa01 f707 	lsl.w	r7, r1, r7
 8006e5a:	421f      	tst	r7, r3
 8006e5c:	f04f 0702 	mov.w	r7, #2
 8006e60:	4629      	mov	r1, r5
 8006e62:	4620      	mov	r0, r4
 8006e64:	bf18      	it	ne
 8006e66:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e6a:	1b76      	subs	r6, r6, r5
 8006e6c:	f7ff fdf4 	bl	8006a58 <rshift>
 8006e70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e74:	f1ba 0f00 	cmp.w	sl, #0
 8006e78:	d048      	beq.n	8006f0c <__gethex+0x3e4>
 8006e7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d015      	beq.n	8006eae <__gethex+0x386>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d017      	beq.n	8006eb6 <__gethex+0x38e>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d109      	bne.n	8006e9e <__gethex+0x376>
 8006e8a:	f01a 0f02 	tst.w	sl, #2
 8006e8e:	d006      	beq.n	8006e9e <__gethex+0x376>
 8006e90:	f8d9 0000 	ldr.w	r0, [r9]
 8006e94:	ea4a 0a00 	orr.w	sl, sl, r0
 8006e98:	f01a 0f01 	tst.w	sl, #1
 8006e9c:	d10e      	bne.n	8006ebc <__gethex+0x394>
 8006e9e:	f047 0710 	orr.w	r7, r7, #16
 8006ea2:	e033      	b.n	8006f0c <__gethex+0x3e4>
 8006ea4:	f04f 0a01 	mov.w	sl, #1
 8006ea8:	e7cf      	b.n	8006e4a <__gethex+0x322>
 8006eaa:	2701      	movs	r7, #1
 8006eac:	e7e2      	b.n	8006e74 <__gethex+0x34c>
 8006eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb0:	f1c3 0301 	rsb	r3, r3, #1
 8006eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8006eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <__gethex+0x376>
 8006ebc:	f04f 0c00 	mov.w	ip, #0
 8006ec0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ec4:	f104 0314 	add.w	r3, r4, #20
 8006ec8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006ecc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006eda:	d01c      	beq.n	8006f16 <__gethex+0x3ee>
 8006edc:	3201      	adds	r2, #1
 8006ede:	6002      	str	r2, [r0, #0]
 8006ee0:	2f02      	cmp	r7, #2
 8006ee2:	f104 0314 	add.w	r3, r4, #20
 8006ee6:	d13d      	bne.n	8006f64 <__gethex+0x43c>
 8006ee8:	f8d8 2000 	ldr.w	r2, [r8]
 8006eec:	3a01      	subs	r2, #1
 8006eee:	42b2      	cmp	r2, r6
 8006ef0:	d10a      	bne.n	8006f08 <__gethex+0x3e0>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	1171      	asrs	r1, r6, #5
 8006ef6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006efa:	f006 061f 	and.w	r6, r6, #31
 8006efe:	fa02 f606 	lsl.w	r6, r2, r6
 8006f02:	421e      	tst	r6, r3
 8006f04:	bf18      	it	ne
 8006f06:	4617      	movne	r7, r2
 8006f08:	f047 0720 	orr.w	r7, r7, #32
 8006f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f0e:	601c      	str	r4, [r3, #0]
 8006f10:	9b05      	ldr	r3, [sp, #20]
 8006f12:	601d      	str	r5, [r3, #0]
 8006f14:	e69a      	b.n	8006c4c <__gethex+0x124>
 8006f16:	4299      	cmp	r1, r3
 8006f18:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f1c:	d8d8      	bhi.n	8006ed0 <__gethex+0x3a8>
 8006f1e:	68a3      	ldr	r3, [r4, #8]
 8006f20:	459b      	cmp	fp, r3
 8006f22:	db17      	blt.n	8006f54 <__gethex+0x42c>
 8006f24:	6861      	ldr	r1, [r4, #4]
 8006f26:	9802      	ldr	r0, [sp, #8]
 8006f28:	3101      	adds	r1, #1
 8006f2a:	f000 f927 	bl	800717c <_Balloc>
 8006f2e:	4681      	mov	r9, r0
 8006f30:	b918      	cbnz	r0, 8006f3a <__gethex+0x412>
 8006f32:	4602      	mov	r2, r0
 8006f34:	2184      	movs	r1, #132	; 0x84
 8006f36:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <__gethex+0x474>)
 8006f38:	e6ab      	b.n	8006c92 <__gethex+0x16a>
 8006f3a:	6922      	ldr	r2, [r4, #16]
 8006f3c:	f104 010c 	add.w	r1, r4, #12
 8006f40:	3202      	adds	r2, #2
 8006f42:	0092      	lsls	r2, r2, #2
 8006f44:	300c      	adds	r0, #12
 8006f46:	f000 f8ff 	bl	8007148 <memcpy>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	9802      	ldr	r0, [sp, #8]
 8006f4e:	f000 f955 	bl	80071fc <_Bfree>
 8006f52:	464c      	mov	r4, r9
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	6122      	str	r2, [r4, #16]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f60:	615a      	str	r2, [r3, #20]
 8006f62:	e7bd      	b.n	8006ee0 <__gethex+0x3b8>
 8006f64:	6922      	ldr	r2, [r4, #16]
 8006f66:	455a      	cmp	r2, fp
 8006f68:	dd0b      	ble.n	8006f82 <__gethex+0x45a>
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f7ff fd73 	bl	8006a58 <rshift>
 8006f72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f76:	3501      	adds	r5, #1
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	f6ff aed4 	blt.w	8006d26 <__gethex+0x1fe>
 8006f7e:	2701      	movs	r7, #1
 8006f80:	e7c2      	b.n	8006f08 <__gethex+0x3e0>
 8006f82:	f016 061f 	ands.w	r6, r6, #31
 8006f86:	d0fa      	beq.n	8006f7e <__gethex+0x456>
 8006f88:	4453      	add	r3, sl
 8006f8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006f8e:	f000 f9e7 	bl	8007360 <__hi0bits>
 8006f92:	f1c6 0620 	rsb	r6, r6, #32
 8006f96:	42b0      	cmp	r0, r6
 8006f98:	dbe7      	blt.n	8006f6a <__gethex+0x442>
 8006f9a:	e7f0      	b.n	8006f7e <__gethex+0x456>
 8006f9c:	08009031 	.word	0x08009031

08006fa0 <L_shift>:
 8006fa0:	f1c2 0208 	rsb	r2, r2, #8
 8006fa4:	0092      	lsls	r2, r2, #2
 8006fa6:	b570      	push	{r4, r5, r6, lr}
 8006fa8:	f1c2 0620 	rsb	r6, r2, #32
 8006fac:	6843      	ldr	r3, [r0, #4]
 8006fae:	6804      	ldr	r4, [r0, #0]
 8006fb0:	fa03 f506 	lsl.w	r5, r3, r6
 8006fb4:	432c      	orrs	r4, r5
 8006fb6:	40d3      	lsrs	r3, r2
 8006fb8:	6004      	str	r4, [r0, #0]
 8006fba:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fbe:	4288      	cmp	r0, r1
 8006fc0:	d3f4      	bcc.n	8006fac <L_shift+0xc>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}

08006fc4 <__match>:
 8006fc4:	b530      	push	{r4, r5, lr}
 8006fc6:	6803      	ldr	r3, [r0, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fce:	b914      	cbnz	r4, 8006fd6 <__match+0x12>
 8006fd0:	6003      	str	r3, [r0, #0]
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	bd30      	pop	{r4, r5, pc}
 8006fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006fde:	2d19      	cmp	r5, #25
 8006fe0:	bf98      	it	ls
 8006fe2:	3220      	addls	r2, #32
 8006fe4:	42a2      	cmp	r2, r4
 8006fe6:	d0f0      	beq.n	8006fca <__match+0x6>
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e7f3      	b.n	8006fd4 <__match+0x10>

08006fec <__hexnan>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	680b      	ldr	r3, [r1, #0]
 8006ff4:	4682      	mov	sl, r0
 8006ff6:	115e      	asrs	r6, r3, #5
 8006ff8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ffc:	f013 031f 	ands.w	r3, r3, #31
 8007000:	bf18      	it	ne
 8007002:	3604      	addne	r6, #4
 8007004:	1f37      	subs	r7, r6, #4
 8007006:	46b9      	mov	r9, r7
 8007008:	463c      	mov	r4, r7
 800700a:	46ab      	mov	fp, r5
 800700c:	b087      	sub	sp, #28
 800700e:	4690      	mov	r8, r2
 8007010:	6802      	ldr	r2, [r0, #0]
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	f846 5c04 	str.w	r5, [r6, #-4]
 8007018:	9502      	str	r5, [sp, #8]
 800701a:	7851      	ldrb	r1, [r2, #1]
 800701c:	1c53      	adds	r3, r2, #1
 800701e:	9303      	str	r3, [sp, #12]
 8007020:	b341      	cbz	r1, 8007074 <__hexnan+0x88>
 8007022:	4608      	mov	r0, r1
 8007024:	9205      	str	r2, [sp, #20]
 8007026:	9104      	str	r1, [sp, #16]
 8007028:	f7ff fd69 	bl	8006afe <__hexdig_fun>
 800702c:	2800      	cmp	r0, #0
 800702e:	d14f      	bne.n	80070d0 <__hexnan+0xe4>
 8007030:	9904      	ldr	r1, [sp, #16]
 8007032:	9a05      	ldr	r2, [sp, #20]
 8007034:	2920      	cmp	r1, #32
 8007036:	d818      	bhi.n	800706a <__hexnan+0x7e>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	459b      	cmp	fp, r3
 800703c:	dd13      	ble.n	8007066 <__hexnan+0x7a>
 800703e:	454c      	cmp	r4, r9
 8007040:	d206      	bcs.n	8007050 <__hexnan+0x64>
 8007042:	2d07      	cmp	r5, #7
 8007044:	dc04      	bgt.n	8007050 <__hexnan+0x64>
 8007046:	462a      	mov	r2, r5
 8007048:	4649      	mov	r1, r9
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff ffa8 	bl	8006fa0 <L_shift>
 8007050:	4544      	cmp	r4, r8
 8007052:	d950      	bls.n	80070f6 <__hexnan+0x10a>
 8007054:	2300      	movs	r3, #0
 8007056:	f1a4 0904 	sub.w	r9, r4, #4
 800705a:	f844 3c04 	str.w	r3, [r4, #-4]
 800705e:	461d      	mov	r5, r3
 8007060:	464c      	mov	r4, r9
 8007062:	f8cd b008 	str.w	fp, [sp, #8]
 8007066:	9a03      	ldr	r2, [sp, #12]
 8007068:	e7d7      	b.n	800701a <__hexnan+0x2e>
 800706a:	2929      	cmp	r1, #41	; 0x29
 800706c:	d156      	bne.n	800711c <__hexnan+0x130>
 800706e:	3202      	adds	r2, #2
 8007070:	f8ca 2000 	str.w	r2, [sl]
 8007074:	f1bb 0f00 	cmp.w	fp, #0
 8007078:	d050      	beq.n	800711c <__hexnan+0x130>
 800707a:	454c      	cmp	r4, r9
 800707c:	d206      	bcs.n	800708c <__hexnan+0xa0>
 800707e:	2d07      	cmp	r5, #7
 8007080:	dc04      	bgt.n	800708c <__hexnan+0xa0>
 8007082:	462a      	mov	r2, r5
 8007084:	4649      	mov	r1, r9
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff ff8a 	bl	8006fa0 <L_shift>
 800708c:	4544      	cmp	r4, r8
 800708e:	d934      	bls.n	80070fa <__hexnan+0x10e>
 8007090:	4623      	mov	r3, r4
 8007092:	f1a8 0204 	sub.w	r2, r8, #4
 8007096:	f853 1b04 	ldr.w	r1, [r3], #4
 800709a:	429f      	cmp	r7, r3
 800709c:	f842 1f04 	str.w	r1, [r2, #4]!
 80070a0:	d2f9      	bcs.n	8007096 <__hexnan+0xaa>
 80070a2:	1b3b      	subs	r3, r7, r4
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	3304      	adds	r3, #4
 80070aa:	3401      	adds	r4, #1
 80070ac:	3e03      	subs	r6, #3
 80070ae:	42b4      	cmp	r4, r6
 80070b0:	bf88      	it	hi
 80070b2:	2304      	movhi	r3, #4
 80070b4:	2200      	movs	r2, #0
 80070b6:	4443      	add	r3, r8
 80070b8:	f843 2b04 	str.w	r2, [r3], #4
 80070bc:	429f      	cmp	r7, r3
 80070be:	d2fb      	bcs.n	80070b8 <__hexnan+0xcc>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	b91b      	cbnz	r3, 80070cc <__hexnan+0xe0>
 80070c4:	4547      	cmp	r7, r8
 80070c6:	d127      	bne.n	8007118 <__hexnan+0x12c>
 80070c8:	2301      	movs	r3, #1
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	2005      	movs	r0, #5
 80070ce:	e026      	b.n	800711e <__hexnan+0x132>
 80070d0:	3501      	adds	r5, #1
 80070d2:	2d08      	cmp	r5, #8
 80070d4:	f10b 0b01 	add.w	fp, fp, #1
 80070d8:	dd06      	ble.n	80070e8 <__hexnan+0xfc>
 80070da:	4544      	cmp	r4, r8
 80070dc:	d9c3      	bls.n	8007066 <__hexnan+0x7a>
 80070de:	2300      	movs	r3, #0
 80070e0:	2501      	movs	r5, #1
 80070e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80070e6:	3c04      	subs	r4, #4
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	f000 000f 	and.w	r0, r0, #15
 80070ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	e7b7      	b.n	8007066 <__hexnan+0x7a>
 80070f6:	2508      	movs	r5, #8
 80070f8:	e7b5      	b.n	8007066 <__hexnan+0x7a>
 80070fa:	9b01      	ldr	r3, [sp, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0df      	beq.n	80070c0 <__hexnan+0xd4>
 8007100:	f04f 32ff 	mov.w	r2, #4294967295
 8007104:	f1c3 0320 	rsb	r3, r3, #32
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007110:	401a      	ands	r2, r3
 8007112:	f846 2c04 	str.w	r2, [r6, #-4]
 8007116:	e7d3      	b.n	80070c0 <__hexnan+0xd4>
 8007118:	3f04      	subs	r7, #4
 800711a:	e7d1      	b.n	80070c0 <__hexnan+0xd4>
 800711c:	2004      	movs	r0, #4
 800711e:	b007      	add	sp, #28
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007124 <__ascii_mbtowc>:
 8007124:	b082      	sub	sp, #8
 8007126:	b901      	cbnz	r1, 800712a <__ascii_mbtowc+0x6>
 8007128:	a901      	add	r1, sp, #4
 800712a:	b142      	cbz	r2, 800713e <__ascii_mbtowc+0x1a>
 800712c:	b14b      	cbz	r3, 8007142 <__ascii_mbtowc+0x1e>
 800712e:	7813      	ldrb	r3, [r2, #0]
 8007130:	600b      	str	r3, [r1, #0]
 8007132:	7812      	ldrb	r2, [r2, #0]
 8007134:	1e10      	subs	r0, r2, #0
 8007136:	bf18      	it	ne
 8007138:	2001      	movne	r0, #1
 800713a:	b002      	add	sp, #8
 800713c:	4770      	bx	lr
 800713e:	4610      	mov	r0, r2
 8007140:	e7fb      	b.n	800713a <__ascii_mbtowc+0x16>
 8007142:	f06f 0001 	mvn.w	r0, #1
 8007146:	e7f8      	b.n	800713a <__ascii_mbtowc+0x16>

08007148 <memcpy>:
 8007148:	440a      	add	r2, r1
 800714a:	4291      	cmp	r1, r2
 800714c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007150:	d100      	bne.n	8007154 <memcpy+0xc>
 8007152:	4770      	bx	lr
 8007154:	b510      	push	{r4, lr}
 8007156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800715a:	4291      	cmp	r1, r2
 800715c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007160:	d1f9      	bne.n	8007156 <memcpy+0xe>
 8007162:	bd10      	pop	{r4, pc}

08007164 <__malloc_lock>:
 8007164:	4801      	ldr	r0, [pc, #4]	; (800716c <__malloc_lock+0x8>)
 8007166:	f001 bbc7 	b.w	80088f8 <__retarget_lock_acquire_recursive>
 800716a:	bf00      	nop
 800716c:	200004dc 	.word	0x200004dc

08007170 <__malloc_unlock>:
 8007170:	4801      	ldr	r0, [pc, #4]	; (8007178 <__malloc_unlock+0x8>)
 8007172:	f001 bbc2 	b.w	80088fa <__retarget_lock_release_recursive>
 8007176:	bf00      	nop
 8007178:	200004dc 	.word	0x200004dc

0800717c <_Balloc>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007180:	4604      	mov	r4, r0
 8007182:	460d      	mov	r5, r1
 8007184:	b976      	cbnz	r6, 80071a4 <_Balloc+0x28>
 8007186:	2010      	movs	r0, #16
 8007188:	f7fe fbd2 	bl	8005930 <malloc>
 800718c:	4602      	mov	r2, r0
 800718e:	6260      	str	r0, [r4, #36]	; 0x24
 8007190:	b920      	cbnz	r0, 800719c <_Balloc+0x20>
 8007192:	2166      	movs	r1, #102	; 0x66
 8007194:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <_Balloc+0x78>)
 8007196:	4818      	ldr	r0, [pc, #96]	; (80071f8 <_Balloc+0x7c>)
 8007198:	f7ff fc2e 	bl	80069f8 <__assert_func>
 800719c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a0:	6006      	str	r6, [r0, #0]
 80071a2:	60c6      	str	r6, [r0, #12]
 80071a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071a6:	68f3      	ldr	r3, [r6, #12]
 80071a8:	b183      	cbz	r3, 80071cc <_Balloc+0x50>
 80071aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071b2:	b9b8      	cbnz	r0, 80071e4 <_Balloc+0x68>
 80071b4:	2101      	movs	r1, #1
 80071b6:	fa01 f605 	lsl.w	r6, r1, r5
 80071ba:	1d72      	adds	r2, r6, #5
 80071bc:	4620      	mov	r0, r4
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	f000 fc94 	bl	8007aec <_calloc_r>
 80071c4:	b160      	cbz	r0, 80071e0 <_Balloc+0x64>
 80071c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ca:	e00e      	b.n	80071ea <_Balloc+0x6e>
 80071cc:	2221      	movs	r2, #33	; 0x21
 80071ce:	2104      	movs	r1, #4
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fc8b 	bl	8007aec <_calloc_r>
 80071d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d8:	60f0      	str	r0, [r6, #12]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e4      	bne.n	80071aa <_Balloc+0x2e>
 80071e0:	2000      	movs	r0, #0
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	6802      	ldr	r2, [r0, #0]
 80071e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ea:	2300      	movs	r3, #0
 80071ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071f0:	e7f7      	b.n	80071e2 <_Balloc+0x66>
 80071f2:	bf00      	nop
 80071f4:	08008e80 	.word	0x08008e80
 80071f8:	080090bc 	.word	0x080090bc

080071fc <_Bfree>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007200:	4605      	mov	r5, r0
 8007202:	460c      	mov	r4, r1
 8007204:	b976      	cbnz	r6, 8007224 <_Bfree+0x28>
 8007206:	2010      	movs	r0, #16
 8007208:	f7fe fb92 	bl	8005930 <malloc>
 800720c:	4602      	mov	r2, r0
 800720e:	6268      	str	r0, [r5, #36]	; 0x24
 8007210:	b920      	cbnz	r0, 800721c <_Bfree+0x20>
 8007212:	218a      	movs	r1, #138	; 0x8a
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <_Bfree+0x3c>)
 8007216:	4809      	ldr	r0, [pc, #36]	; (800723c <_Bfree+0x40>)
 8007218:	f7ff fbee 	bl	80069f8 <__assert_func>
 800721c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007220:	6006      	str	r6, [r0, #0]
 8007222:	60c6      	str	r6, [r0, #12]
 8007224:	b13c      	cbz	r4, 8007236 <_Bfree+0x3a>
 8007226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007228:	6862      	ldr	r2, [r4, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007230:	6021      	str	r1, [r4, #0]
 8007232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	08008e80 	.word	0x08008e80
 800723c:	080090bc 	.word	0x080090bc

08007240 <__multadd>:
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	4607      	mov	r7, r0
 8007246:	460c      	mov	r4, r1
 8007248:	461e      	mov	r6, r3
 800724a:	2000      	movs	r0, #0
 800724c:	690d      	ldr	r5, [r1, #16]
 800724e:	f101 0c14 	add.w	ip, r1, #20
 8007252:	f8dc 3000 	ldr.w	r3, [ip]
 8007256:	3001      	adds	r0, #1
 8007258:	b299      	uxth	r1, r3
 800725a:	fb02 6101 	mla	r1, r2, r1, r6
 800725e:	0c1e      	lsrs	r6, r3, #16
 8007260:	0c0b      	lsrs	r3, r1, #16
 8007262:	fb02 3306 	mla	r3, r2, r6, r3
 8007266:	b289      	uxth	r1, r1
 8007268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800726c:	4285      	cmp	r5, r0
 800726e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007272:	f84c 1b04 	str.w	r1, [ip], #4
 8007276:	dcec      	bgt.n	8007252 <__multadd+0x12>
 8007278:	b30e      	cbz	r6, 80072be <__multadd+0x7e>
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	42ab      	cmp	r3, r5
 800727e:	dc19      	bgt.n	80072b4 <__multadd+0x74>
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4638      	mov	r0, r7
 8007284:	3101      	adds	r1, #1
 8007286:	f7ff ff79 	bl	800717c <_Balloc>
 800728a:	4680      	mov	r8, r0
 800728c:	b928      	cbnz	r0, 800729a <__multadd+0x5a>
 800728e:	4602      	mov	r2, r0
 8007290:	21b5      	movs	r1, #181	; 0xb5
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <__multadd+0x84>)
 8007294:	480c      	ldr	r0, [pc, #48]	; (80072c8 <__multadd+0x88>)
 8007296:	f7ff fbaf 	bl	80069f8 <__assert_func>
 800729a:	6922      	ldr	r2, [r4, #16]
 800729c:	f104 010c 	add.w	r1, r4, #12
 80072a0:	3202      	adds	r2, #2
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	300c      	adds	r0, #12
 80072a6:	f7ff ff4f 	bl	8007148 <memcpy>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff ffa5 	bl	80071fc <_Bfree>
 80072b2:	4644      	mov	r4, r8
 80072b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072b8:	3501      	adds	r5, #1
 80072ba:	615e      	str	r6, [r3, #20]
 80072bc:	6125      	str	r5, [r4, #16]
 80072be:	4620      	mov	r0, r4
 80072c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c4:	08009031 	.word	0x08009031
 80072c8:	080090bc 	.word	0x080090bc

080072cc <__s2b>:
 80072cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d0:	4615      	mov	r5, r2
 80072d2:	2209      	movs	r2, #9
 80072d4:	461f      	mov	r7, r3
 80072d6:	3308      	adds	r3, #8
 80072d8:	460c      	mov	r4, r1
 80072da:	fb93 f3f2 	sdiv	r3, r3, r2
 80072de:	4606      	mov	r6, r0
 80072e0:	2201      	movs	r2, #1
 80072e2:	2100      	movs	r1, #0
 80072e4:	429a      	cmp	r2, r3
 80072e6:	db09      	blt.n	80072fc <__s2b+0x30>
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ff47 	bl	800717c <_Balloc>
 80072ee:	b940      	cbnz	r0, 8007302 <__s2b+0x36>
 80072f0:	4602      	mov	r2, r0
 80072f2:	21ce      	movs	r1, #206	; 0xce
 80072f4:	4b18      	ldr	r3, [pc, #96]	; (8007358 <__s2b+0x8c>)
 80072f6:	4819      	ldr	r0, [pc, #100]	; (800735c <__s2b+0x90>)
 80072f8:	f7ff fb7e 	bl	80069f8 <__assert_func>
 80072fc:	0052      	lsls	r2, r2, #1
 80072fe:	3101      	adds	r1, #1
 8007300:	e7f0      	b.n	80072e4 <__s2b+0x18>
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	2d09      	cmp	r5, #9
 8007306:	6143      	str	r3, [r0, #20]
 8007308:	f04f 0301 	mov.w	r3, #1
 800730c:	6103      	str	r3, [r0, #16]
 800730e:	dd16      	ble.n	800733e <__s2b+0x72>
 8007310:	f104 0909 	add.w	r9, r4, #9
 8007314:	46c8      	mov	r8, r9
 8007316:	442c      	add	r4, r5
 8007318:	f818 3b01 	ldrb.w	r3, [r8], #1
 800731c:	4601      	mov	r1, r0
 800731e:	220a      	movs	r2, #10
 8007320:	4630      	mov	r0, r6
 8007322:	3b30      	subs	r3, #48	; 0x30
 8007324:	f7ff ff8c 	bl	8007240 <__multadd>
 8007328:	45a0      	cmp	r8, r4
 800732a:	d1f5      	bne.n	8007318 <__s2b+0x4c>
 800732c:	f1a5 0408 	sub.w	r4, r5, #8
 8007330:	444c      	add	r4, r9
 8007332:	1b2d      	subs	r5, r5, r4
 8007334:	1963      	adds	r3, r4, r5
 8007336:	42bb      	cmp	r3, r7
 8007338:	db04      	blt.n	8007344 <__s2b+0x78>
 800733a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800733e:	2509      	movs	r5, #9
 8007340:	340a      	adds	r4, #10
 8007342:	e7f6      	b.n	8007332 <__s2b+0x66>
 8007344:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007348:	4601      	mov	r1, r0
 800734a:	220a      	movs	r2, #10
 800734c:	4630      	mov	r0, r6
 800734e:	3b30      	subs	r3, #48	; 0x30
 8007350:	f7ff ff76 	bl	8007240 <__multadd>
 8007354:	e7ee      	b.n	8007334 <__s2b+0x68>
 8007356:	bf00      	nop
 8007358:	08009031 	.word	0x08009031
 800735c:	080090bc 	.word	0x080090bc

08007360 <__hi0bits>:
 8007360:	0c02      	lsrs	r2, r0, #16
 8007362:	0412      	lsls	r2, r2, #16
 8007364:	4603      	mov	r3, r0
 8007366:	b9ca      	cbnz	r2, 800739c <__hi0bits+0x3c>
 8007368:	0403      	lsls	r3, r0, #16
 800736a:	2010      	movs	r0, #16
 800736c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007370:	bf04      	itt	eq
 8007372:	021b      	lsleq	r3, r3, #8
 8007374:	3008      	addeq	r0, #8
 8007376:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800737a:	bf04      	itt	eq
 800737c:	011b      	lsleq	r3, r3, #4
 800737e:	3004      	addeq	r0, #4
 8007380:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007384:	bf04      	itt	eq
 8007386:	009b      	lsleq	r3, r3, #2
 8007388:	3002      	addeq	r0, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	db05      	blt.n	800739a <__hi0bits+0x3a>
 800738e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007392:	f100 0001 	add.w	r0, r0, #1
 8007396:	bf08      	it	eq
 8007398:	2020      	moveq	r0, #32
 800739a:	4770      	bx	lr
 800739c:	2000      	movs	r0, #0
 800739e:	e7e5      	b.n	800736c <__hi0bits+0xc>

080073a0 <__lo0bits>:
 80073a0:	6803      	ldr	r3, [r0, #0]
 80073a2:	4602      	mov	r2, r0
 80073a4:	f013 0007 	ands.w	r0, r3, #7
 80073a8:	d00b      	beq.n	80073c2 <__lo0bits+0x22>
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d421      	bmi.n	80073f2 <__lo0bits+0x52>
 80073ae:	0798      	lsls	r0, r3, #30
 80073b0:	bf49      	itett	mi
 80073b2:	085b      	lsrmi	r3, r3, #1
 80073b4:	089b      	lsrpl	r3, r3, #2
 80073b6:	2001      	movmi	r0, #1
 80073b8:	6013      	strmi	r3, [r2, #0]
 80073ba:	bf5c      	itt	pl
 80073bc:	2002      	movpl	r0, #2
 80073be:	6013      	strpl	r3, [r2, #0]
 80073c0:	4770      	bx	lr
 80073c2:	b299      	uxth	r1, r3
 80073c4:	b909      	cbnz	r1, 80073ca <__lo0bits+0x2a>
 80073c6:	2010      	movs	r0, #16
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2d9      	uxtb	r1, r3
 80073cc:	b909      	cbnz	r1, 80073d2 <__lo0bits+0x32>
 80073ce:	3008      	adds	r0, #8
 80073d0:	0a1b      	lsrs	r3, r3, #8
 80073d2:	0719      	lsls	r1, r3, #28
 80073d4:	bf04      	itt	eq
 80073d6:	091b      	lsreq	r3, r3, #4
 80073d8:	3004      	addeq	r0, #4
 80073da:	0799      	lsls	r1, r3, #30
 80073dc:	bf04      	itt	eq
 80073de:	089b      	lsreq	r3, r3, #2
 80073e0:	3002      	addeq	r0, #2
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	d403      	bmi.n	80073ee <__lo0bits+0x4e>
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	f100 0001 	add.w	r0, r0, #1
 80073ec:	d003      	beq.n	80073f6 <__lo0bits+0x56>
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	4770      	bx	lr
 80073f2:	2000      	movs	r0, #0
 80073f4:	4770      	bx	lr
 80073f6:	2020      	movs	r0, #32
 80073f8:	4770      	bx	lr
	...

080073fc <__i2b>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	2101      	movs	r1, #1
 8007402:	f7ff febb 	bl	800717c <_Balloc>
 8007406:	4602      	mov	r2, r0
 8007408:	b928      	cbnz	r0, 8007416 <__i2b+0x1a>
 800740a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__i2b+0x24>)
 8007410:	4804      	ldr	r0, [pc, #16]	; (8007424 <__i2b+0x28>)
 8007412:	f7ff faf1 	bl	80069f8 <__assert_func>
 8007416:	2301      	movs	r3, #1
 8007418:	6144      	str	r4, [r0, #20]
 800741a:	6103      	str	r3, [r0, #16]
 800741c:	bd10      	pop	{r4, pc}
 800741e:	bf00      	nop
 8007420:	08009031 	.word	0x08009031
 8007424:	080090bc 	.word	0x080090bc

08007428 <__multiply>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	4691      	mov	r9, r2
 800742e:	690a      	ldr	r2, [r1, #16]
 8007430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007434:	460c      	mov	r4, r1
 8007436:	429a      	cmp	r2, r3
 8007438:	bfbe      	ittt	lt
 800743a:	460b      	movlt	r3, r1
 800743c:	464c      	movlt	r4, r9
 800743e:	4699      	movlt	r9, r3
 8007440:	6927      	ldr	r7, [r4, #16]
 8007442:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	eb07 060a 	add.w	r6, r7, sl
 800744e:	42b3      	cmp	r3, r6
 8007450:	b085      	sub	sp, #20
 8007452:	bfb8      	it	lt
 8007454:	3101      	addlt	r1, #1
 8007456:	f7ff fe91 	bl	800717c <_Balloc>
 800745a:	b930      	cbnz	r0, 800746a <__multiply+0x42>
 800745c:	4602      	mov	r2, r0
 800745e:	f240 115d 	movw	r1, #349	; 0x15d
 8007462:	4b43      	ldr	r3, [pc, #268]	; (8007570 <__multiply+0x148>)
 8007464:	4843      	ldr	r0, [pc, #268]	; (8007574 <__multiply+0x14c>)
 8007466:	f7ff fac7 	bl	80069f8 <__assert_func>
 800746a:	f100 0514 	add.w	r5, r0, #20
 800746e:	462b      	mov	r3, r5
 8007470:	2200      	movs	r2, #0
 8007472:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007476:	4543      	cmp	r3, r8
 8007478:	d321      	bcc.n	80074be <__multiply+0x96>
 800747a:	f104 0314 	add.w	r3, r4, #20
 800747e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007482:	f109 0314 	add.w	r3, r9, #20
 8007486:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800748a:	9202      	str	r2, [sp, #8]
 800748c:	1b3a      	subs	r2, r7, r4
 800748e:	3a15      	subs	r2, #21
 8007490:	f022 0203 	bic.w	r2, r2, #3
 8007494:	3204      	adds	r2, #4
 8007496:	f104 0115 	add.w	r1, r4, #21
 800749a:	428f      	cmp	r7, r1
 800749c:	bf38      	it	cc
 800749e:	2204      	movcc	r2, #4
 80074a0:	9201      	str	r2, [sp, #4]
 80074a2:	9a02      	ldr	r2, [sp, #8]
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d80c      	bhi.n	80074c4 <__multiply+0x9c>
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	dd03      	ble.n	80074b6 <__multiply+0x8e>
 80074ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d059      	beq.n	800756a <__multiply+0x142>
 80074b6:	6106      	str	r6, [r0, #16]
 80074b8:	b005      	add	sp, #20
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074be:	f843 2b04 	str.w	r2, [r3], #4
 80074c2:	e7d8      	b.n	8007476 <__multiply+0x4e>
 80074c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80074c8:	f1ba 0f00 	cmp.w	sl, #0
 80074cc:	d023      	beq.n	8007516 <__multiply+0xee>
 80074ce:	46a9      	mov	r9, r5
 80074d0:	f04f 0c00 	mov.w	ip, #0
 80074d4:	f104 0e14 	add.w	lr, r4, #20
 80074d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074dc:	f8d9 1000 	ldr.w	r1, [r9]
 80074e0:	fa1f fb82 	uxth.w	fp, r2
 80074e4:	b289      	uxth	r1, r1
 80074e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80074ea:	4461      	add	r1, ip
 80074ec:	f8d9 c000 	ldr.w	ip, [r9]
 80074f0:	0c12      	lsrs	r2, r2, #16
 80074f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074f6:	fb0a c202 	mla	r2, sl, r2, ip
 80074fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074fe:	b289      	uxth	r1, r1
 8007500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007504:	4577      	cmp	r7, lr
 8007506:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800750a:	f849 1b04 	str.w	r1, [r9], #4
 800750e:	d8e3      	bhi.n	80074d8 <__multiply+0xb0>
 8007510:	9a01      	ldr	r2, [sp, #4]
 8007512:	f845 c002 	str.w	ip, [r5, r2]
 8007516:	9a03      	ldr	r2, [sp, #12]
 8007518:	3304      	adds	r3, #4
 800751a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800751e:	f1b9 0f00 	cmp.w	r9, #0
 8007522:	d020      	beq.n	8007566 <__multiply+0x13e>
 8007524:	46ae      	mov	lr, r5
 8007526:	f04f 0a00 	mov.w	sl, #0
 800752a:	6829      	ldr	r1, [r5, #0]
 800752c:	f104 0c14 	add.w	ip, r4, #20
 8007530:	f8bc b000 	ldrh.w	fp, [ip]
 8007534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007538:	b289      	uxth	r1, r1
 800753a:	fb09 220b 	mla	r2, r9, fp, r2
 800753e:	4492      	add	sl, r2
 8007540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007544:	f84e 1b04 	str.w	r1, [lr], #4
 8007548:	f85c 2b04 	ldr.w	r2, [ip], #4
 800754c:	f8be 1000 	ldrh.w	r1, [lr]
 8007550:	0c12      	lsrs	r2, r2, #16
 8007552:	fb09 1102 	mla	r1, r9, r2, r1
 8007556:	4567      	cmp	r7, ip
 8007558:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800755c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007560:	d8e6      	bhi.n	8007530 <__multiply+0x108>
 8007562:	9a01      	ldr	r2, [sp, #4]
 8007564:	50a9      	str	r1, [r5, r2]
 8007566:	3504      	adds	r5, #4
 8007568:	e79b      	b.n	80074a2 <__multiply+0x7a>
 800756a:	3e01      	subs	r6, #1
 800756c:	e79d      	b.n	80074aa <__multiply+0x82>
 800756e:	bf00      	nop
 8007570:	08009031 	.word	0x08009031
 8007574:	080090bc 	.word	0x080090bc

08007578 <__pow5mult>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4615      	mov	r5, r2
 800757e:	f012 0203 	ands.w	r2, r2, #3
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	d007      	beq.n	8007598 <__pow5mult+0x20>
 8007588:	4c25      	ldr	r4, [pc, #148]	; (8007620 <__pow5mult+0xa8>)
 800758a:	3a01      	subs	r2, #1
 800758c:	2300      	movs	r3, #0
 800758e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007592:	f7ff fe55 	bl	8007240 <__multadd>
 8007596:	4607      	mov	r7, r0
 8007598:	10ad      	asrs	r5, r5, #2
 800759a:	d03d      	beq.n	8007618 <__pow5mult+0xa0>
 800759c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800759e:	b97c      	cbnz	r4, 80075c0 <__pow5mult+0x48>
 80075a0:	2010      	movs	r0, #16
 80075a2:	f7fe f9c5 	bl	8005930 <malloc>
 80075a6:	4602      	mov	r2, r0
 80075a8:	6270      	str	r0, [r6, #36]	; 0x24
 80075aa:	b928      	cbnz	r0, 80075b8 <__pow5mult+0x40>
 80075ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <__pow5mult+0xac>)
 80075b2:	481d      	ldr	r0, [pc, #116]	; (8007628 <__pow5mult+0xb0>)
 80075b4:	f7ff fa20 	bl	80069f8 <__assert_func>
 80075b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075bc:	6004      	str	r4, [r0, #0]
 80075be:	60c4      	str	r4, [r0, #12]
 80075c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075c8:	b94c      	cbnz	r4, 80075de <__pow5mult+0x66>
 80075ca:	f240 2171 	movw	r1, #625	; 0x271
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff14 	bl	80073fc <__i2b>
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	07eb      	lsls	r3, r5, #31
 80075e4:	d50a      	bpl.n	80075fc <__pow5mult+0x84>
 80075e6:	4639      	mov	r1, r7
 80075e8:	4622      	mov	r2, r4
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff1c 	bl	8007428 <__multiply>
 80075f0:	4680      	mov	r8, r0
 80075f2:	4639      	mov	r1, r7
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fe01 	bl	80071fc <_Bfree>
 80075fa:	4647      	mov	r7, r8
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	d00b      	beq.n	8007618 <__pow5mult+0xa0>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	b938      	cbnz	r0, 8007614 <__pow5mult+0x9c>
 8007604:	4622      	mov	r2, r4
 8007606:	4621      	mov	r1, r4
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff0d 	bl	8007428 <__multiply>
 800760e:	6020      	str	r0, [r4, #0]
 8007610:	f8c0 9000 	str.w	r9, [r0]
 8007614:	4604      	mov	r4, r0
 8007616:	e7e4      	b.n	80075e2 <__pow5mult+0x6a>
 8007618:	4638      	mov	r0, r7
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	bf00      	nop
 8007620:	08009208 	.word	0x08009208
 8007624:	08008e80 	.word	0x08008e80
 8007628:	080090bc 	.word	0x080090bc

0800762c <__lshift>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	460c      	mov	r4, r1
 8007632:	4607      	mov	r7, r0
 8007634:	4691      	mov	r9, r2
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6849      	ldr	r1, [r1, #4]
 800763a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007644:	f108 0601 	add.w	r6, r8, #1
 8007648:	42b3      	cmp	r3, r6
 800764a:	db0b      	blt.n	8007664 <__lshift+0x38>
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff fd95 	bl	800717c <_Balloc>
 8007652:	4605      	mov	r5, r0
 8007654:	b948      	cbnz	r0, 800766a <__lshift+0x3e>
 8007656:	4602      	mov	r2, r0
 8007658:	f240 11d9 	movw	r1, #473	; 0x1d9
 800765c:	4b29      	ldr	r3, [pc, #164]	; (8007704 <__lshift+0xd8>)
 800765e:	482a      	ldr	r0, [pc, #168]	; (8007708 <__lshift+0xdc>)
 8007660:	f7ff f9ca 	bl	80069f8 <__assert_func>
 8007664:	3101      	adds	r1, #1
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	e7ee      	b.n	8007648 <__lshift+0x1c>
 800766a:	2300      	movs	r3, #0
 800766c:	f100 0114 	add.w	r1, r0, #20
 8007670:	f100 0210 	add.w	r2, r0, #16
 8007674:	4618      	mov	r0, r3
 8007676:	4553      	cmp	r3, sl
 8007678:	db37      	blt.n	80076ea <__lshift+0xbe>
 800767a:	6920      	ldr	r0, [r4, #16]
 800767c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007680:	f104 0314 	add.w	r3, r4, #20
 8007684:	f019 091f 	ands.w	r9, r9, #31
 8007688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800768c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007690:	d02f      	beq.n	80076f2 <__lshift+0xc6>
 8007692:	468a      	mov	sl, r1
 8007694:	f04f 0c00 	mov.w	ip, #0
 8007698:	f1c9 0e20 	rsb	lr, r9, #32
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	fa02 f209 	lsl.w	r2, r2, r9
 80076a2:	ea42 020c 	orr.w	r2, r2, ip
 80076a6:	f84a 2b04 	str.w	r2, [sl], #4
 80076aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ae:	4298      	cmp	r0, r3
 80076b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076b4:	d8f2      	bhi.n	800769c <__lshift+0x70>
 80076b6:	1b03      	subs	r3, r0, r4
 80076b8:	3b15      	subs	r3, #21
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	3304      	adds	r3, #4
 80076c0:	f104 0215 	add.w	r2, r4, #21
 80076c4:	4290      	cmp	r0, r2
 80076c6:	bf38      	it	cc
 80076c8:	2304      	movcc	r3, #4
 80076ca:	f841 c003 	str.w	ip, [r1, r3]
 80076ce:	f1bc 0f00 	cmp.w	ip, #0
 80076d2:	d001      	beq.n	80076d8 <__lshift+0xac>
 80076d4:	f108 0602 	add.w	r6, r8, #2
 80076d8:	3e01      	subs	r6, #1
 80076da:	4638      	mov	r0, r7
 80076dc:	4621      	mov	r1, r4
 80076de:	612e      	str	r6, [r5, #16]
 80076e0:	f7ff fd8c 	bl	80071fc <_Bfree>
 80076e4:	4628      	mov	r0, r5
 80076e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ee:	3301      	adds	r3, #1
 80076f0:	e7c1      	b.n	8007676 <__lshift+0x4a>
 80076f2:	3904      	subs	r1, #4
 80076f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f8:	4298      	cmp	r0, r3
 80076fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80076fe:	d8f9      	bhi.n	80076f4 <__lshift+0xc8>
 8007700:	e7ea      	b.n	80076d8 <__lshift+0xac>
 8007702:	bf00      	nop
 8007704:	08009031 	.word	0x08009031
 8007708:	080090bc 	.word	0x080090bc

0800770c <__mcmp>:
 800770c:	4603      	mov	r3, r0
 800770e:	690a      	ldr	r2, [r1, #16]
 8007710:	6900      	ldr	r0, [r0, #16]
 8007712:	b530      	push	{r4, r5, lr}
 8007714:	1a80      	subs	r0, r0, r2
 8007716:	d10d      	bne.n	8007734 <__mcmp+0x28>
 8007718:	3314      	adds	r3, #20
 800771a:	3114      	adds	r1, #20
 800771c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007720:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800772c:	4295      	cmp	r5, r2
 800772e:	d002      	beq.n	8007736 <__mcmp+0x2a>
 8007730:	d304      	bcc.n	800773c <__mcmp+0x30>
 8007732:	2001      	movs	r0, #1
 8007734:	bd30      	pop	{r4, r5, pc}
 8007736:	42a3      	cmp	r3, r4
 8007738:	d3f4      	bcc.n	8007724 <__mcmp+0x18>
 800773a:	e7fb      	b.n	8007734 <__mcmp+0x28>
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	e7f8      	b.n	8007734 <__mcmp+0x28>
	...

08007744 <__mdiff>:
 8007744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	460d      	mov	r5, r1
 800774a:	4607      	mov	r7, r0
 800774c:	4611      	mov	r1, r2
 800774e:	4628      	mov	r0, r5
 8007750:	4614      	mov	r4, r2
 8007752:	f7ff ffdb 	bl	800770c <__mcmp>
 8007756:	1e06      	subs	r6, r0, #0
 8007758:	d111      	bne.n	800777e <__mdiff+0x3a>
 800775a:	4631      	mov	r1, r6
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff fd0d 	bl	800717c <_Balloc>
 8007762:	4602      	mov	r2, r0
 8007764:	b928      	cbnz	r0, 8007772 <__mdiff+0x2e>
 8007766:	f240 2132 	movw	r1, #562	; 0x232
 800776a:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <__mdiff+0x110>)
 800776c:	483a      	ldr	r0, [pc, #232]	; (8007858 <__mdiff+0x114>)
 800776e:	f7ff f943 	bl	80069f8 <__assert_func>
 8007772:	2301      	movs	r3, #1
 8007774:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007778:	4610      	mov	r0, r2
 800777a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	bfa4      	itt	ge
 8007780:	4623      	movge	r3, r4
 8007782:	462c      	movge	r4, r5
 8007784:	4638      	mov	r0, r7
 8007786:	6861      	ldr	r1, [r4, #4]
 8007788:	bfa6      	itte	ge
 800778a:	461d      	movge	r5, r3
 800778c:	2600      	movge	r6, #0
 800778e:	2601      	movlt	r6, #1
 8007790:	f7ff fcf4 	bl	800717c <_Balloc>
 8007794:	4602      	mov	r2, r0
 8007796:	b918      	cbnz	r0, 80077a0 <__mdiff+0x5c>
 8007798:	f44f 7110 	mov.w	r1, #576	; 0x240
 800779c:	4b2d      	ldr	r3, [pc, #180]	; (8007854 <__mdiff+0x110>)
 800779e:	e7e5      	b.n	800776c <__mdiff+0x28>
 80077a0:	f102 0814 	add.w	r8, r2, #20
 80077a4:	46c2      	mov	sl, r8
 80077a6:	f04f 0c00 	mov.w	ip, #0
 80077aa:	6927      	ldr	r7, [r4, #16]
 80077ac:	60c6      	str	r6, [r0, #12]
 80077ae:	692e      	ldr	r6, [r5, #16]
 80077b0:	f104 0014 	add.w	r0, r4, #20
 80077b4:	f105 0914 	add.w	r9, r5, #20
 80077b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077c0:	3410      	adds	r4, #16
 80077c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80077ca:	fa1f f18b 	uxth.w	r1, fp
 80077ce:	448c      	add	ip, r1
 80077d0:	b299      	uxth	r1, r3
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	ebac 0101 	sub.w	r1, ip, r1
 80077d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077e0:	b289      	uxth	r1, r1
 80077e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80077e6:	454e      	cmp	r6, r9
 80077e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80077ec:	f84a 3b04 	str.w	r3, [sl], #4
 80077f0:	d8e7      	bhi.n	80077c2 <__mdiff+0x7e>
 80077f2:	1b73      	subs	r3, r6, r5
 80077f4:	3b15      	subs	r3, #21
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	3515      	adds	r5, #21
 80077fc:	3304      	adds	r3, #4
 80077fe:	42ae      	cmp	r6, r5
 8007800:	bf38      	it	cc
 8007802:	2304      	movcc	r3, #4
 8007804:	4418      	add	r0, r3
 8007806:	4443      	add	r3, r8
 8007808:	461e      	mov	r6, r3
 800780a:	4605      	mov	r5, r0
 800780c:	4575      	cmp	r5, lr
 800780e:	d30e      	bcc.n	800782e <__mdiff+0xea>
 8007810:	f10e 0103 	add.w	r1, lr, #3
 8007814:	1a09      	subs	r1, r1, r0
 8007816:	f021 0103 	bic.w	r1, r1, #3
 800781a:	3803      	subs	r0, #3
 800781c:	4586      	cmp	lr, r0
 800781e:	bf38      	it	cc
 8007820:	2100      	movcc	r1, #0
 8007822:	4419      	add	r1, r3
 8007824:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007828:	b18b      	cbz	r3, 800784e <__mdiff+0x10a>
 800782a:	6117      	str	r7, [r2, #16]
 800782c:	e7a4      	b.n	8007778 <__mdiff+0x34>
 800782e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007832:	fa1f f188 	uxth.w	r1, r8
 8007836:	4461      	add	r1, ip
 8007838:	140c      	asrs	r4, r1, #16
 800783a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800783e:	b289      	uxth	r1, r1
 8007840:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007844:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007848:	f846 1b04 	str.w	r1, [r6], #4
 800784c:	e7de      	b.n	800780c <__mdiff+0xc8>
 800784e:	3f01      	subs	r7, #1
 8007850:	e7e8      	b.n	8007824 <__mdiff+0xe0>
 8007852:	bf00      	nop
 8007854:	08009031 	.word	0x08009031
 8007858:	080090bc 	.word	0x080090bc

0800785c <__ulp>:
 800785c:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <__ulp+0x48>)
 800785e:	400b      	ands	r3, r1
 8007860:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd02      	ble.n	800786e <__ulp+0x12>
 8007868:	2000      	movs	r0, #0
 800786a:	4619      	mov	r1, r3
 800786c:	4770      	bx	lr
 800786e:	425b      	negs	r3, r3
 8007870:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007874:	f04f 0000 	mov.w	r0, #0
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007880:	da04      	bge.n	800788c <__ulp+0x30>
 8007882:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007886:	fa43 f102 	asr.w	r1, r3, r2
 800788a:	4770      	bx	lr
 800788c:	f1a2 0314 	sub.w	r3, r2, #20
 8007890:	2b1e      	cmp	r3, #30
 8007892:	bfd6      	itet	le
 8007894:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007898:	2301      	movgt	r3, #1
 800789a:	fa22 f303 	lsrle.w	r3, r2, r3
 800789e:	4618      	mov	r0, r3
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	7ff00000 	.word	0x7ff00000

080078a8 <__b2d>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	6907      	ldr	r7, [r0, #16]
 80078ae:	f100 0914 	add.w	r9, r0, #20
 80078b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078ba:	f1a7 0804 	sub.w	r8, r7, #4
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff fd4e 	bl	8007360 <__hi0bits>
 80078c4:	f1c0 0320 	rsb	r3, r0, #32
 80078c8:	280a      	cmp	r0, #10
 80078ca:	600b      	str	r3, [r1, #0]
 80078cc:	491f      	ldr	r1, [pc, #124]	; (800794c <__b2d+0xa4>)
 80078ce:	dc17      	bgt.n	8007900 <__b2d+0x58>
 80078d0:	45c1      	cmp	r9, r8
 80078d2:	bf28      	it	cs
 80078d4:	2200      	movcs	r2, #0
 80078d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80078da:	fa26 f30c 	lsr.w	r3, r6, ip
 80078de:	bf38      	it	cc
 80078e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80078e4:	ea43 0501 	orr.w	r5, r3, r1
 80078e8:	f100 0315 	add.w	r3, r0, #21
 80078ec:	fa06 f303 	lsl.w	r3, r6, r3
 80078f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80078f4:	ea43 0402 	orr.w	r4, r3, r2
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007900:	45c1      	cmp	r9, r8
 8007902:	bf2e      	itee	cs
 8007904:	2200      	movcs	r2, #0
 8007906:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800790a:	f1a7 0808 	subcc.w	r8, r7, #8
 800790e:	f1b0 030b 	subs.w	r3, r0, #11
 8007912:	d016      	beq.n	8007942 <__b2d+0x9a>
 8007914:	f1c3 0720 	rsb	r7, r3, #32
 8007918:	fa22 f107 	lsr.w	r1, r2, r7
 800791c:	45c8      	cmp	r8, r9
 800791e:	fa06 f603 	lsl.w	r6, r6, r3
 8007922:	ea46 0601 	orr.w	r6, r6, r1
 8007926:	bf94      	ite	ls
 8007928:	2100      	movls	r1, #0
 800792a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800792e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007932:	fa02 f003 	lsl.w	r0, r2, r3
 8007936:	40f9      	lsrs	r1, r7
 8007938:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800793c:	ea40 0401 	orr.w	r4, r0, r1
 8007940:	e7da      	b.n	80078f8 <__b2d+0x50>
 8007942:	4614      	mov	r4, r2
 8007944:	ea46 0501 	orr.w	r5, r6, r1
 8007948:	e7d6      	b.n	80078f8 <__b2d+0x50>
 800794a:	bf00      	nop
 800794c:	3ff00000 	.word	0x3ff00000

08007950 <__d2b>:
 8007950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007954:	2101      	movs	r1, #1
 8007956:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800795a:	4690      	mov	r8, r2
 800795c:	461d      	mov	r5, r3
 800795e:	f7ff fc0d 	bl	800717c <_Balloc>
 8007962:	4604      	mov	r4, r0
 8007964:	b930      	cbnz	r0, 8007974 <__d2b+0x24>
 8007966:	4602      	mov	r2, r0
 8007968:	f240 310a 	movw	r1, #778	; 0x30a
 800796c:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <__d2b+0xb0>)
 800796e:	4825      	ldr	r0, [pc, #148]	; (8007a04 <__d2b+0xb4>)
 8007970:	f7ff f842 	bl	80069f8 <__assert_func>
 8007974:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007978:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800797c:	bb2d      	cbnz	r5, 80079ca <__d2b+0x7a>
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	f1b8 0300 	subs.w	r3, r8, #0
 8007984:	d026      	beq.n	80079d4 <__d2b+0x84>
 8007986:	4668      	mov	r0, sp
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	f7ff fd09 	bl	80073a0 <__lo0bits>
 800798e:	9900      	ldr	r1, [sp, #0]
 8007990:	b1f0      	cbz	r0, 80079d0 <__d2b+0x80>
 8007992:	9a01      	ldr	r2, [sp, #4]
 8007994:	f1c0 0320 	rsb	r3, r0, #32
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	430b      	orrs	r3, r1
 800799e:	40c2      	lsrs	r2, r0
 80079a0:	6163      	str	r3, [r4, #20]
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bf14      	ite	ne
 80079aa:	2102      	movne	r1, #2
 80079ac:	2101      	moveq	r1, #1
 80079ae:	61a3      	str	r3, [r4, #24]
 80079b0:	6121      	str	r1, [r4, #16]
 80079b2:	b1c5      	cbz	r5, 80079e6 <__d2b+0x96>
 80079b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079b8:	4405      	add	r5, r0
 80079ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079be:	603d      	str	r5, [r7, #0]
 80079c0:	6030      	str	r0, [r6, #0]
 80079c2:	4620      	mov	r0, r4
 80079c4:	b002      	add	sp, #8
 80079c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ce:	e7d6      	b.n	800797e <__d2b+0x2e>
 80079d0:	6161      	str	r1, [r4, #20]
 80079d2:	e7e7      	b.n	80079a4 <__d2b+0x54>
 80079d4:	a801      	add	r0, sp, #4
 80079d6:	f7ff fce3 	bl	80073a0 <__lo0bits>
 80079da:	2101      	movs	r1, #1
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	6121      	str	r1, [r4, #16]
 80079e0:	6163      	str	r3, [r4, #20]
 80079e2:	3020      	adds	r0, #32
 80079e4:	e7e5      	b.n	80079b2 <__d2b+0x62>
 80079e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80079ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079ee:	6038      	str	r0, [r7, #0]
 80079f0:	6918      	ldr	r0, [r3, #16]
 80079f2:	f7ff fcb5 	bl	8007360 <__hi0bits>
 80079f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80079fa:	6031      	str	r1, [r6, #0]
 80079fc:	e7e1      	b.n	80079c2 <__d2b+0x72>
 80079fe:	bf00      	nop
 8007a00:	08009031 	.word	0x08009031
 8007a04:	080090bc 	.word	0x080090bc

08007a08 <__ratio>:
 8007a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4688      	mov	r8, r1
 8007a0e:	4669      	mov	r1, sp
 8007a10:	4681      	mov	r9, r0
 8007a12:	f7ff ff49 	bl	80078a8 <__b2d>
 8007a16:	460f      	mov	r7, r1
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	a901      	add	r1, sp, #4
 8007a20:	f7ff ff42 	bl	80078a8 <__b2d>
 8007a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a2c:	468b      	mov	fp, r1
 8007a2e:	eba3 0c02 	sub.w	ip, r3, r2
 8007a32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfd5      	itete	le
 8007a40:	460a      	movle	r2, r1
 8007a42:	462a      	movgt	r2, r5
 8007a44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a4c:	bfd8      	it	le
 8007a4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007a52:	465b      	mov	r3, fp
 8007a54:	4602      	mov	r2, r0
 8007a56:	4639      	mov	r1, r7
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7f8 ff25 	bl	80008a8 <__aeabi_ddiv>
 8007a5e:	b003      	add	sp, #12
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a64 <__copybits>:
 8007a64:	3901      	subs	r1, #1
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	1149      	asrs	r1, r1, #5
 8007a6a:	6914      	ldr	r4, [r2, #16]
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	f102 0314 	add.w	r3, r2, #20
 8007a72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a7a:	1f05      	subs	r5, r0, #4
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	d30c      	bcc.n	8007a9a <__copybits+0x36>
 8007a80:	1aa3      	subs	r3, r4, r2
 8007a82:	3b11      	subs	r3, #17
 8007a84:	f023 0303 	bic.w	r3, r3, #3
 8007a88:	3211      	adds	r2, #17
 8007a8a:	42a2      	cmp	r2, r4
 8007a8c:	bf88      	it	hi
 8007a8e:	2300      	movhi	r3, #0
 8007a90:	4418      	add	r0, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	4288      	cmp	r0, r1
 8007a96:	d305      	bcc.n	8007aa4 <__copybits+0x40>
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007aa2:	e7eb      	b.n	8007a7c <__copybits+0x18>
 8007aa4:	f840 3b04 	str.w	r3, [r0], #4
 8007aa8:	e7f4      	b.n	8007a94 <__copybits+0x30>

08007aaa <__any_on>:
 8007aaa:	f100 0214 	add.w	r2, r0, #20
 8007aae:	6900      	ldr	r0, [r0, #16]
 8007ab0:	114b      	asrs	r3, r1, #5
 8007ab2:	4298      	cmp	r0, r3
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	db11      	blt.n	8007adc <__any_on+0x32>
 8007ab8:	dd0a      	ble.n	8007ad0 <__any_on+0x26>
 8007aba:	f011 011f 	ands.w	r1, r1, #31
 8007abe:	d007      	beq.n	8007ad0 <__any_on+0x26>
 8007ac0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ac4:	fa24 f001 	lsr.w	r0, r4, r1
 8007ac8:	fa00 f101 	lsl.w	r1, r0, r1
 8007acc:	428c      	cmp	r4, r1
 8007ace:	d10b      	bne.n	8007ae8 <__any_on+0x3e>
 8007ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d803      	bhi.n	8007ae0 <__any_on+0x36>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	4603      	mov	r3, r0
 8007ade:	e7f7      	b.n	8007ad0 <__any_on+0x26>
 8007ae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d0f5      	beq.n	8007ad4 <__any_on+0x2a>
 8007ae8:	2001      	movs	r0, #1
 8007aea:	e7f6      	b.n	8007ada <__any_on+0x30>

08007aec <_calloc_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	fba1 5402 	umull	r5, r4, r1, r2
 8007af2:	b934      	cbnz	r4, 8007b02 <_calloc_r+0x16>
 8007af4:	4629      	mov	r1, r5
 8007af6:	f7fd ff9b 	bl	8005a30 <_malloc_r>
 8007afa:	4606      	mov	r6, r0
 8007afc:	b928      	cbnz	r0, 8007b0a <_calloc_r+0x1e>
 8007afe:	4630      	mov	r0, r6
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	220c      	movs	r2, #12
 8007b04:	2600      	movs	r6, #0
 8007b06:	6002      	str	r2, [r0, #0]
 8007b08:	e7f9      	b.n	8007afe <_calloc_r+0x12>
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f7fd ff1f 	bl	8005950 <memset>
 8007b12:	e7f4      	b.n	8007afe <_calloc_r+0x12>

08007b14 <__ssputs_r>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	688e      	ldr	r6, [r1, #8]
 8007b1a:	4682      	mov	sl, r0
 8007b1c:	429e      	cmp	r6, r3
 8007b1e:	460c      	mov	r4, r1
 8007b20:	4690      	mov	r8, r2
 8007b22:	461f      	mov	r7, r3
 8007b24:	d838      	bhi.n	8007b98 <__ssputs_r+0x84>
 8007b26:	898a      	ldrh	r2, [r1, #12]
 8007b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b2c:	d032      	beq.n	8007b94 <__ssputs_r+0x80>
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	6909      	ldr	r1, [r1, #16]
 8007b32:	3301      	adds	r3, #1
 8007b34:	eba5 0901 	sub.w	r9, r5, r1
 8007b38:	6965      	ldr	r5, [r4, #20]
 8007b3a:	444b      	add	r3, r9
 8007b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b44:	106d      	asrs	r5, r5, #1
 8007b46:	429d      	cmp	r5, r3
 8007b48:	bf38      	it	cc
 8007b4a:	461d      	movcc	r5, r3
 8007b4c:	0553      	lsls	r3, r2, #21
 8007b4e:	d531      	bpl.n	8007bb4 <__ssputs_r+0xa0>
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7fd ff6d 	bl	8005a30 <_malloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b950      	cbnz	r0, 8007b70 <__ssputs_r+0x5c>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	f8ca 3000 	str.w	r3, [sl]
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	464a      	mov	r2, r9
 8007b72:	6921      	ldr	r1, [r4, #16]
 8007b74:	f7ff fae8 	bl	8007148 <memcpy>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	6126      	str	r6, [r4, #16]
 8007b86:	444e      	add	r6, r9
 8007b88:	6026      	str	r6, [r4, #0]
 8007b8a:	463e      	mov	r6, r7
 8007b8c:	6165      	str	r5, [r4, #20]
 8007b8e:	eba5 0509 	sub.w	r5, r5, r9
 8007b92:	60a5      	str	r5, [r4, #8]
 8007b94:	42be      	cmp	r6, r7
 8007b96:	d900      	bls.n	8007b9a <__ssputs_r+0x86>
 8007b98:	463e      	mov	r6, r7
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	f000 ff20 	bl	80089e4 <memmove>
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	1b9b      	subs	r3, r3, r6
 8007baa:	60a3      	str	r3, [r4, #8]
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	4433      	add	r3, r6
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	e7db      	b.n	8007b6c <__ssputs_r+0x58>
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	f000 ff2f 	bl	8008a18 <_realloc_r>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1e1      	bne.n	8007b84 <__ssputs_r+0x70>
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	6921      	ldr	r1, [r4, #16]
 8007bc4:	f7fd fecc 	bl	8005960 <_free_r>
 8007bc8:	e7c7      	b.n	8007b5a <__ssputs_r+0x46>
	...

08007bcc <_svfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	898b      	ldrh	r3, [r1, #12]
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	061b      	lsls	r3, r3, #24
 8007bd8:	460d      	mov	r5, r1
 8007bda:	4614      	mov	r4, r2
 8007bdc:	b09d      	sub	sp, #116	; 0x74
 8007bde:	d50e      	bpl.n	8007bfe <_svfiprintf_r+0x32>
 8007be0:	690b      	ldr	r3, [r1, #16]
 8007be2:	b963      	cbnz	r3, 8007bfe <_svfiprintf_r+0x32>
 8007be4:	2140      	movs	r1, #64	; 0x40
 8007be6:	f7fd ff23 	bl	8005a30 <_malloc_r>
 8007bea:	6028      	str	r0, [r5, #0]
 8007bec:	6128      	str	r0, [r5, #16]
 8007bee:	b920      	cbnz	r0, 8007bfa <_svfiprintf_r+0x2e>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	e0d1      	b.n	8007d9e <_svfiprintf_r+0x1d2>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	616b      	str	r3, [r5, #20]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	2320      	movs	r3, #32
 8007c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c08:	2330      	movs	r3, #48	; 0x30
 8007c0a:	f04f 0901 	mov.w	r9, #1
 8007c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007db8 <_svfiprintf_r+0x1ec>
 8007c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	469a      	mov	sl, r3
 8007c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c22:	b10a      	cbz	r2, 8007c28 <_svfiprintf_r+0x5c>
 8007c24:	2a25      	cmp	r2, #37	; 0x25
 8007c26:	d1f9      	bne.n	8007c1c <_svfiprintf_r+0x50>
 8007c28:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2c:	d00b      	beq.n	8007c46 <_svfiprintf_r+0x7a>
 8007c2e:	465b      	mov	r3, fp
 8007c30:	4622      	mov	r2, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	4638      	mov	r0, r7
 8007c36:	f7ff ff6d 	bl	8007b14 <__ssputs_r>
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f000 80aa 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c42:	445a      	add	r2, fp
 8007c44:	9209      	str	r2, [sp, #36]	; 0x24
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80a2 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5a:	f10a 0a01 	add.w	sl, sl, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c66:	931a      	str	r3, [sp, #104]	; 0x68
 8007c68:	4654      	mov	r4, sl
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	4851      	ldr	r0, [pc, #324]	; (8007db8 <_svfiprintf_r+0x1ec>)
 8007c72:	f000 fea9 	bl	80089c8 <memchr>
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	b9d8      	cbnz	r0, 8007cb2 <_svfiprintf_r+0xe6>
 8007c7a:	06d0      	lsls	r0, r2, #27
 8007c7c:	bf44      	itt	mi
 8007c7e:	2320      	movmi	r3, #32
 8007c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c84:	0711      	lsls	r1, r2, #28
 8007c86:	bf44      	itt	mi
 8007c88:	232b      	movmi	r3, #43	; 0x2b
 8007c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c92:	2b2a      	cmp	r3, #42	; 0x2a
 8007c94:	d015      	beq.n	8007cc2 <_svfiprintf_r+0xf6>
 8007c96:	4654      	mov	r4, sl
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	9a07      	ldr	r2, [sp, #28]
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca6:	3b30      	subs	r3, #48	; 0x30
 8007ca8:	2b09      	cmp	r3, #9
 8007caa:	d94e      	bls.n	8007d4a <_svfiprintf_r+0x17e>
 8007cac:	b1b0      	cbz	r0, 8007cdc <_svfiprintf_r+0x110>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e014      	b.n	8007cdc <_svfiprintf_r+0x110>
 8007cb2:	eba0 0308 	sub.w	r3, r0, r8
 8007cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	e7d2      	b.n	8007c68 <_svfiprintf_r+0x9c>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	1d19      	adds	r1, r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	9103      	str	r1, [sp, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbb      	ittet	lt
 8007cce:	425b      	neglt	r3, r3
 8007cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd4:	9307      	strge	r3, [sp, #28]
 8007cd6:	9307      	strlt	r3, [sp, #28]
 8007cd8:	bfb8      	it	lt
 8007cda:	9204      	strlt	r2, [sp, #16]
 8007cdc:	7823      	ldrb	r3, [r4, #0]
 8007cde:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce0:	d10c      	bne.n	8007cfc <_svfiprintf_r+0x130>
 8007ce2:	7863      	ldrb	r3, [r4, #1]
 8007ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce6:	d135      	bne.n	8007d54 <_svfiprintf_r+0x188>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	3402      	adds	r4, #2
 8007cec:	1d1a      	adds	r2, r3, #4
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	9203      	str	r2, [sp, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfb8      	it	lt
 8007cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007dbc <_svfiprintf_r+0x1f0>
 8007d00:	2203      	movs	r2, #3
 8007d02:	4650      	mov	r0, sl
 8007d04:	7821      	ldrb	r1, [r4, #0]
 8007d06:	f000 fe5f 	bl	80089c8 <memchr>
 8007d0a:	b140      	cbz	r0, 8007d1e <_svfiprintf_r+0x152>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	eba0 000a 	sub.w	r0, r0, sl
 8007d12:	fa03 f000 	lsl.w	r0, r3, r0
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	3401      	adds	r4, #1
 8007d1a:	4303      	orrs	r3, r0
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d22:	2206      	movs	r2, #6
 8007d24:	4826      	ldr	r0, [pc, #152]	; (8007dc0 <_svfiprintf_r+0x1f4>)
 8007d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d2a:	f000 fe4d 	bl	80089c8 <memchr>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d038      	beq.n	8007da4 <_svfiprintf_r+0x1d8>
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007d34:	bb1b      	cbnz	r3, 8007d7e <_svfiprintf_r+0x1b2>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	3307      	adds	r3, #7
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	3308      	adds	r3, #8
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	4433      	add	r3, r6
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	e767      	b.n	8007c1a <_svfiprintf_r+0x4e>
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d52:	e7a5      	b.n	8007ca0 <_svfiprintf_r+0xd4>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f04f 0c0a 	mov.w	ip, #10
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	3401      	adds	r4, #1
 8007d5e:	9305      	str	r3, [sp, #20]
 8007d60:	4620      	mov	r0, r4
 8007d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d66:	3a30      	subs	r2, #48	; 0x30
 8007d68:	2a09      	cmp	r2, #9
 8007d6a:	d903      	bls.n	8007d74 <_svfiprintf_r+0x1a8>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0c5      	beq.n	8007cfc <_svfiprintf_r+0x130>
 8007d70:	9105      	str	r1, [sp, #20]
 8007d72:	e7c3      	b.n	8007cfc <_svfiprintf_r+0x130>
 8007d74:	4604      	mov	r4, r0
 8007d76:	2301      	movs	r3, #1
 8007d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7c:	e7f0      	b.n	8007d60 <_svfiprintf_r+0x194>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4638      	mov	r0, r7
 8007d86:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <_svfiprintf_r+0x1fc>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	f3af 8000 	nop.w
 8007d8e:	1c42      	adds	r2, r0, #1
 8007d90:	4606      	mov	r6, r0
 8007d92:	d1d6      	bne.n	8007d42 <_svfiprintf_r+0x176>
 8007d94:	89ab      	ldrh	r3, [r5, #12]
 8007d96:	065b      	lsls	r3, r3, #25
 8007d98:	f53f af2c 	bmi.w	8007bf4 <_svfiprintf_r+0x28>
 8007d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d9e:	b01d      	add	sp, #116	; 0x74
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4638      	mov	r0, r7
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <_svfiprintf_r+0x1fc>)
 8007dae:	a904      	add	r1, sp, #16
 8007db0:	f000 f9d4 	bl	800815c <_printf_i>
 8007db4:	e7eb      	b.n	8007d8e <_svfiprintf_r+0x1c2>
 8007db6:	bf00      	nop
 8007db8:	08009214 	.word	0x08009214
 8007dbc:	0800921a 	.word	0x0800921a
 8007dc0:	0800921e 	.word	0x0800921e
 8007dc4:	00000000 	.word	0x00000000
 8007dc8:	08007b15 	.word	0x08007b15

08007dcc <__sfputc_r>:
 8007dcc:	6893      	ldr	r3, [r2, #8]
 8007dce:	b410      	push	{r4}
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	6093      	str	r3, [r2, #8]
 8007dd6:	da07      	bge.n	8007de8 <__sfputc_r+0x1c>
 8007dd8:	6994      	ldr	r4, [r2, #24]
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	db01      	blt.n	8007de2 <__sfputc_r+0x16>
 8007dde:	290a      	cmp	r1, #10
 8007de0:	d102      	bne.n	8007de8 <__sfputc_r+0x1c>
 8007de2:	bc10      	pop	{r4}
 8007de4:	f000 bafe 	b.w	80083e4 <__swbuf_r>
 8007de8:	6813      	ldr	r3, [r2, #0]
 8007dea:	1c58      	adds	r0, r3, #1
 8007dec:	6010      	str	r0, [r2, #0]
 8007dee:	7019      	strb	r1, [r3, #0]
 8007df0:	4608      	mov	r0, r1
 8007df2:	bc10      	pop	{r4}
 8007df4:	4770      	bx	lr

08007df6 <__sfputs_r>:
 8007df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	18d5      	adds	r5, r2, r3
 8007e00:	42ac      	cmp	r4, r5
 8007e02:	d101      	bne.n	8007e08 <__sfputs_r+0x12>
 8007e04:	2000      	movs	r0, #0
 8007e06:	e007      	b.n	8007e18 <__sfputs_r+0x22>
 8007e08:	463a      	mov	r2, r7
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e10:	f7ff ffdc 	bl	8007dcc <__sfputc_r>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d1f3      	bne.n	8007e00 <__sfputs_r+0xa>
 8007e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e1c <_vfiprintf_r>:
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	460d      	mov	r5, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	4698      	mov	r8, r3
 8007e26:	4606      	mov	r6, r0
 8007e28:	b09d      	sub	sp, #116	; 0x74
 8007e2a:	b118      	cbz	r0, 8007e34 <_vfiprintf_r+0x18>
 8007e2c:	6983      	ldr	r3, [r0, #24]
 8007e2e:	b90b      	cbnz	r3, 8007e34 <_vfiprintf_r+0x18>
 8007e30:	f000 fcc4 	bl	80087bc <__sinit>
 8007e34:	4b89      	ldr	r3, [pc, #548]	; (800805c <_vfiprintf_r+0x240>)
 8007e36:	429d      	cmp	r5, r3
 8007e38:	d11b      	bne.n	8007e72 <_vfiprintf_r+0x56>
 8007e3a:	6875      	ldr	r5, [r6, #4]
 8007e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e3e:	07d9      	lsls	r1, r3, #31
 8007e40:	d405      	bmi.n	8007e4e <_vfiprintf_r+0x32>
 8007e42:	89ab      	ldrh	r3, [r5, #12]
 8007e44:	059a      	lsls	r2, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_vfiprintf_r+0x32>
 8007e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4a:	f000 fd55 	bl	80088f8 <__retarget_lock_acquire_recursive>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	071b      	lsls	r3, r3, #28
 8007e52:	d501      	bpl.n	8007e58 <_vfiprintf_r+0x3c>
 8007e54:	692b      	ldr	r3, [r5, #16]
 8007e56:	b9eb      	cbnz	r3, 8007e94 <_vfiprintf_r+0x78>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 fb22 	bl	80084a4 <__swsetup_r>
 8007e60:	b1c0      	cbz	r0, 8007e94 <_vfiprintf_r+0x78>
 8007e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e64:	07dc      	lsls	r4, r3, #31
 8007e66:	d50e      	bpl.n	8007e86 <_vfiprintf_r+0x6a>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	b01d      	add	sp, #116	; 0x74
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	4b7b      	ldr	r3, [pc, #492]	; (8008060 <_vfiprintf_r+0x244>)
 8007e74:	429d      	cmp	r5, r3
 8007e76:	d101      	bne.n	8007e7c <_vfiprintf_r+0x60>
 8007e78:	68b5      	ldr	r5, [r6, #8]
 8007e7a:	e7df      	b.n	8007e3c <_vfiprintf_r+0x20>
 8007e7c:	4b79      	ldr	r3, [pc, #484]	; (8008064 <_vfiprintf_r+0x248>)
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	bf08      	it	eq
 8007e82:	68f5      	ldreq	r5, [r6, #12]
 8007e84:	e7da      	b.n	8007e3c <_vfiprintf_r+0x20>
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	0598      	lsls	r0, r3, #22
 8007e8a:	d4ed      	bmi.n	8007e68 <_vfiprintf_r+0x4c>
 8007e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e8e:	f000 fd34 	bl	80088fa <__retarget_lock_release_recursive>
 8007e92:	e7e9      	b.n	8007e68 <_vfiprintf_r+0x4c>
 8007e94:	2300      	movs	r3, #0
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e9e:	2330      	movs	r3, #48	; 0x30
 8007ea0:	f04f 0901 	mov.w	r9, #1
 8007ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008068 <_vfiprintf_r+0x24c>
 8007eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	469a      	mov	sl, r3
 8007eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb8:	b10a      	cbz	r2, 8007ebe <_vfiprintf_r+0xa2>
 8007eba:	2a25      	cmp	r2, #37	; 0x25
 8007ebc:	d1f9      	bne.n	8007eb2 <_vfiprintf_r+0x96>
 8007ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec2:	d00b      	beq.n	8007edc <_vfiprintf_r+0xc0>
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff ff93 	bl	8007df6 <__sfputs_r>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f000 80aa 	beq.w	800802a <_vfiprintf_r+0x20e>
 8007ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed8:	445a      	add	r2, fp
 8007eda:	9209      	str	r2, [sp, #36]	; 0x24
 8007edc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80a2 	beq.w	800802a <_vfiprintf_r+0x20e>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef0:	f10a 0a01 	add.w	sl, sl, #1
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007efc:	931a      	str	r3, [sp, #104]	; 0x68
 8007efe:	4654      	mov	r4, sl
 8007f00:	2205      	movs	r2, #5
 8007f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f06:	4858      	ldr	r0, [pc, #352]	; (8008068 <_vfiprintf_r+0x24c>)
 8007f08:	f000 fd5e 	bl	80089c8 <memchr>
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	b9d8      	cbnz	r0, 8007f48 <_vfiprintf_r+0x12c>
 8007f10:	06d1      	lsls	r1, r2, #27
 8007f12:	bf44      	itt	mi
 8007f14:	2320      	movmi	r3, #32
 8007f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f1a:	0713      	lsls	r3, r2, #28
 8007f1c:	bf44      	itt	mi
 8007f1e:	232b      	movmi	r3, #43	; 0x2b
 8007f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f24:	f89a 3000 	ldrb.w	r3, [sl]
 8007f28:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2a:	d015      	beq.n	8007f58 <_vfiprintf_r+0x13c>
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4621      	mov	r1, r4
 8007f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3c:	3b30      	subs	r3, #48	; 0x30
 8007f3e:	2b09      	cmp	r3, #9
 8007f40:	d94e      	bls.n	8007fe0 <_vfiprintf_r+0x1c4>
 8007f42:	b1b0      	cbz	r0, 8007f72 <_vfiprintf_r+0x156>
 8007f44:	9207      	str	r2, [sp, #28]
 8007f46:	e014      	b.n	8007f72 <_vfiprintf_r+0x156>
 8007f48:	eba0 0308 	sub.w	r3, r0, r8
 8007f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	46a2      	mov	sl, r4
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	e7d2      	b.n	8007efe <_vfiprintf_r+0xe2>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	1d19      	adds	r1, r3, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	9103      	str	r1, [sp, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bfbb      	ittet	lt
 8007f64:	425b      	neglt	r3, r3
 8007f66:	f042 0202 	orrlt.w	r2, r2, #2
 8007f6a:	9307      	strge	r3, [sp, #28]
 8007f6c:	9307      	strlt	r3, [sp, #28]
 8007f6e:	bfb8      	it	lt
 8007f70:	9204      	strlt	r2, [sp, #16]
 8007f72:	7823      	ldrb	r3, [r4, #0]
 8007f74:	2b2e      	cmp	r3, #46	; 0x2e
 8007f76:	d10c      	bne.n	8007f92 <_vfiprintf_r+0x176>
 8007f78:	7863      	ldrb	r3, [r4, #1]
 8007f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7c:	d135      	bne.n	8007fea <_vfiprintf_r+0x1ce>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	3402      	adds	r4, #2
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9203      	str	r2, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfb8      	it	lt
 8007f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800806c <_vfiprintf_r+0x250>
 8007f96:	2203      	movs	r2, #3
 8007f98:	4650      	mov	r0, sl
 8007f9a:	7821      	ldrb	r1, [r4, #0]
 8007f9c:	f000 fd14 	bl	80089c8 <memchr>
 8007fa0:	b140      	cbz	r0, 8007fb4 <_vfiprintf_r+0x198>
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	eba0 000a 	sub.w	r0, r0, sl
 8007fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	3401      	adds	r4, #1
 8007fb0:	4303      	orrs	r3, r0
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb8:	2206      	movs	r2, #6
 8007fba:	482d      	ldr	r0, [pc, #180]	; (8008070 <_vfiprintf_r+0x254>)
 8007fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc0:	f000 fd02 	bl	80089c8 <memchr>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d03f      	beq.n	8008048 <_vfiprintf_r+0x22c>
 8007fc8:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <_vfiprintf_r+0x258>)
 8007fca:	bb1b      	cbnz	r3, 8008014 <_vfiprintf_r+0x1f8>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	3307      	adds	r3, #7
 8007fd0:	f023 0307 	bic.w	r3, r3, #7
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	443b      	add	r3, r7
 8007fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fde:	e767      	b.n	8007eb0 <_vfiprintf_r+0x94>
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe8:	e7a5      	b.n	8007f36 <_vfiprintf_r+0x11a>
 8007fea:	2300      	movs	r3, #0
 8007fec:	f04f 0c0a 	mov.w	ip, #10
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	3401      	adds	r4, #1
 8007ff4:	9305      	str	r3, [sp, #20]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffc:	3a30      	subs	r2, #48	; 0x30
 8007ffe:	2a09      	cmp	r2, #9
 8008000:	d903      	bls.n	800800a <_vfiprintf_r+0x1ee>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0c5      	beq.n	8007f92 <_vfiprintf_r+0x176>
 8008006:	9105      	str	r1, [sp, #20]
 8008008:	e7c3      	b.n	8007f92 <_vfiprintf_r+0x176>
 800800a:	4604      	mov	r4, r0
 800800c:	2301      	movs	r3, #1
 800800e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008012:	e7f0      	b.n	8007ff6 <_vfiprintf_r+0x1da>
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	462a      	mov	r2, r5
 800801a:	4630      	mov	r0, r6
 800801c:	4b16      	ldr	r3, [pc, #88]	; (8008078 <_vfiprintf_r+0x25c>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	f3af 8000 	nop.w
 8008024:	4607      	mov	r7, r0
 8008026:	1c78      	adds	r0, r7, #1
 8008028:	d1d6      	bne.n	8007fd8 <_vfiprintf_r+0x1bc>
 800802a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800802c:	07d9      	lsls	r1, r3, #31
 800802e:	d405      	bmi.n	800803c <_vfiprintf_r+0x220>
 8008030:	89ab      	ldrh	r3, [r5, #12]
 8008032:	059a      	lsls	r2, r3, #22
 8008034:	d402      	bmi.n	800803c <_vfiprintf_r+0x220>
 8008036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008038:	f000 fc5f 	bl	80088fa <__retarget_lock_release_recursive>
 800803c:	89ab      	ldrh	r3, [r5, #12]
 800803e:	065b      	lsls	r3, r3, #25
 8008040:	f53f af12 	bmi.w	8007e68 <_vfiprintf_r+0x4c>
 8008044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008046:	e711      	b.n	8007e6c <_vfiprintf_r+0x50>
 8008048:	ab03      	add	r3, sp, #12
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	462a      	mov	r2, r5
 800804e:	4630      	mov	r0, r6
 8008050:	4b09      	ldr	r3, [pc, #36]	; (8008078 <_vfiprintf_r+0x25c>)
 8008052:	a904      	add	r1, sp, #16
 8008054:	f000 f882 	bl	800815c <_printf_i>
 8008058:	e7e4      	b.n	8008024 <_vfiprintf_r+0x208>
 800805a:	bf00      	nop
 800805c:	08009268 	.word	0x08009268
 8008060:	08009288 	.word	0x08009288
 8008064:	08009248 	.word	0x08009248
 8008068:	08009214 	.word	0x08009214
 800806c:	0800921a 	.word	0x0800921a
 8008070:	0800921e 	.word	0x0800921e
 8008074:	00000000 	.word	0x00000000
 8008078:	08007df7 	.word	0x08007df7

0800807c <_printf_common>:
 800807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008080:	4616      	mov	r6, r2
 8008082:	4699      	mov	r9, r3
 8008084:	688a      	ldr	r2, [r1, #8]
 8008086:	690b      	ldr	r3, [r1, #16]
 8008088:	4607      	mov	r7, r0
 800808a:	4293      	cmp	r3, r2
 800808c:	bfb8      	it	lt
 800808e:	4613      	movlt	r3, r2
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008096:	460c      	mov	r4, r1
 8008098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800809c:	b10a      	cbz	r2, 80080a2 <_printf_common+0x26>
 800809e:	3301      	adds	r3, #1
 80080a0:	6033      	str	r3, [r6, #0]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	0699      	lsls	r1, r3, #26
 80080a6:	bf42      	ittt	mi
 80080a8:	6833      	ldrmi	r3, [r6, #0]
 80080aa:	3302      	addmi	r3, #2
 80080ac:	6033      	strmi	r3, [r6, #0]
 80080ae:	6825      	ldr	r5, [r4, #0]
 80080b0:	f015 0506 	ands.w	r5, r5, #6
 80080b4:	d106      	bne.n	80080c4 <_printf_common+0x48>
 80080b6:	f104 0a19 	add.w	sl, r4, #25
 80080ba:	68e3      	ldr	r3, [r4, #12]
 80080bc:	6832      	ldr	r2, [r6, #0]
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	42ab      	cmp	r3, r5
 80080c2:	dc28      	bgt.n	8008116 <_printf_common+0x9a>
 80080c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080c8:	1e13      	subs	r3, r2, #0
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	bf18      	it	ne
 80080ce:	2301      	movne	r3, #1
 80080d0:	0692      	lsls	r2, r2, #26
 80080d2:	d42d      	bmi.n	8008130 <_printf_common+0xb4>
 80080d4:	4649      	mov	r1, r9
 80080d6:	4638      	mov	r0, r7
 80080d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d020      	beq.n	8008124 <_printf_common+0xa8>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	68e5      	ldr	r5, [r4, #12]
 80080e6:	f003 0306 	and.w	r3, r3, #6
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	bf18      	it	ne
 80080ee:	2500      	movne	r5, #0
 80080f0:	6832      	ldr	r2, [r6, #0]
 80080f2:	f04f 0600 	mov.w	r6, #0
 80080f6:	68a3      	ldr	r3, [r4, #8]
 80080f8:	bf08      	it	eq
 80080fa:	1aad      	subeq	r5, r5, r2
 80080fc:	6922      	ldr	r2, [r4, #16]
 80080fe:	bf08      	it	eq
 8008100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008104:	4293      	cmp	r3, r2
 8008106:	bfc4      	itt	gt
 8008108:	1a9b      	subgt	r3, r3, r2
 800810a:	18ed      	addgt	r5, r5, r3
 800810c:	341a      	adds	r4, #26
 800810e:	42b5      	cmp	r5, r6
 8008110:	d11a      	bne.n	8008148 <_printf_common+0xcc>
 8008112:	2000      	movs	r0, #0
 8008114:	e008      	b.n	8008128 <_printf_common+0xac>
 8008116:	2301      	movs	r3, #1
 8008118:	4652      	mov	r2, sl
 800811a:	4649      	mov	r1, r9
 800811c:	4638      	mov	r0, r7
 800811e:	47c0      	blx	r8
 8008120:	3001      	adds	r0, #1
 8008122:	d103      	bne.n	800812c <_printf_common+0xb0>
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	3501      	adds	r5, #1
 800812e:	e7c4      	b.n	80080ba <_printf_common+0x3e>
 8008130:	2030      	movs	r0, #48	; 0x30
 8008132:	18e1      	adds	r1, r4, r3
 8008134:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800813e:	4422      	add	r2, r4
 8008140:	3302      	adds	r3, #2
 8008142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008146:	e7c5      	b.n	80080d4 <_printf_common+0x58>
 8008148:	2301      	movs	r3, #1
 800814a:	4622      	mov	r2, r4
 800814c:	4649      	mov	r1, r9
 800814e:	4638      	mov	r0, r7
 8008150:	47c0      	blx	r8
 8008152:	3001      	adds	r0, #1
 8008154:	d0e6      	beq.n	8008124 <_printf_common+0xa8>
 8008156:	3601      	adds	r6, #1
 8008158:	e7d9      	b.n	800810e <_printf_common+0x92>
	...

0800815c <_printf_i>:
 800815c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	7e0f      	ldrb	r7, [r1, #24]
 8008162:	4691      	mov	r9, r2
 8008164:	2f78      	cmp	r7, #120	; 0x78
 8008166:	4680      	mov	r8, r0
 8008168:	460c      	mov	r4, r1
 800816a:	469a      	mov	sl, r3
 800816c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800816e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008172:	d807      	bhi.n	8008184 <_printf_i+0x28>
 8008174:	2f62      	cmp	r7, #98	; 0x62
 8008176:	d80a      	bhi.n	800818e <_printf_i+0x32>
 8008178:	2f00      	cmp	r7, #0
 800817a:	f000 80d9 	beq.w	8008330 <_printf_i+0x1d4>
 800817e:	2f58      	cmp	r7, #88	; 0x58
 8008180:	f000 80a4 	beq.w	80082cc <_printf_i+0x170>
 8008184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800818c:	e03a      	b.n	8008204 <_printf_i+0xa8>
 800818e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008192:	2b15      	cmp	r3, #21
 8008194:	d8f6      	bhi.n	8008184 <_printf_i+0x28>
 8008196:	a101      	add	r1, pc, #4	; (adr r1, 800819c <_printf_i+0x40>)
 8008198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800819c:	080081f5 	.word	0x080081f5
 80081a0:	08008209 	.word	0x08008209
 80081a4:	08008185 	.word	0x08008185
 80081a8:	08008185 	.word	0x08008185
 80081ac:	08008185 	.word	0x08008185
 80081b0:	08008185 	.word	0x08008185
 80081b4:	08008209 	.word	0x08008209
 80081b8:	08008185 	.word	0x08008185
 80081bc:	08008185 	.word	0x08008185
 80081c0:	08008185 	.word	0x08008185
 80081c4:	08008185 	.word	0x08008185
 80081c8:	08008317 	.word	0x08008317
 80081cc:	08008239 	.word	0x08008239
 80081d0:	080082f9 	.word	0x080082f9
 80081d4:	08008185 	.word	0x08008185
 80081d8:	08008185 	.word	0x08008185
 80081dc:	08008339 	.word	0x08008339
 80081e0:	08008185 	.word	0x08008185
 80081e4:	08008239 	.word	0x08008239
 80081e8:	08008185 	.word	0x08008185
 80081ec:	08008185 	.word	0x08008185
 80081f0:	08008301 	.word	0x08008301
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	1d1a      	adds	r2, r3, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008204:	2301      	movs	r3, #1
 8008206:	e0a4      	b.n	8008352 <_printf_i+0x1f6>
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	6829      	ldr	r1, [r5, #0]
 800820c:	0606      	lsls	r6, r0, #24
 800820e:	f101 0304 	add.w	r3, r1, #4
 8008212:	d50a      	bpl.n	800822a <_printf_i+0xce>
 8008214:	680e      	ldr	r6, [r1, #0]
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	2e00      	cmp	r6, #0
 800821a:	da03      	bge.n	8008224 <_printf_i+0xc8>
 800821c:	232d      	movs	r3, #45	; 0x2d
 800821e:	4276      	negs	r6, r6
 8008220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008224:	230a      	movs	r3, #10
 8008226:	485e      	ldr	r0, [pc, #376]	; (80083a0 <_printf_i+0x244>)
 8008228:	e019      	b.n	800825e <_printf_i+0x102>
 800822a:	680e      	ldr	r6, [r1, #0]
 800822c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	bf18      	it	ne
 8008234:	b236      	sxthne	r6, r6
 8008236:	e7ef      	b.n	8008218 <_printf_i+0xbc>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	6820      	ldr	r0, [r4, #0]
 800823c:	1d19      	adds	r1, r3, #4
 800823e:	6029      	str	r1, [r5, #0]
 8008240:	0601      	lsls	r1, r0, #24
 8008242:	d501      	bpl.n	8008248 <_printf_i+0xec>
 8008244:	681e      	ldr	r6, [r3, #0]
 8008246:	e002      	b.n	800824e <_printf_i+0xf2>
 8008248:	0646      	lsls	r6, r0, #25
 800824a:	d5fb      	bpl.n	8008244 <_printf_i+0xe8>
 800824c:	881e      	ldrh	r6, [r3, #0]
 800824e:	2f6f      	cmp	r7, #111	; 0x6f
 8008250:	bf0c      	ite	eq
 8008252:	2308      	moveq	r3, #8
 8008254:	230a      	movne	r3, #10
 8008256:	4852      	ldr	r0, [pc, #328]	; (80083a0 <_printf_i+0x244>)
 8008258:	2100      	movs	r1, #0
 800825a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800825e:	6865      	ldr	r5, [r4, #4]
 8008260:	2d00      	cmp	r5, #0
 8008262:	bfa8      	it	ge
 8008264:	6821      	ldrge	r1, [r4, #0]
 8008266:	60a5      	str	r5, [r4, #8]
 8008268:	bfa4      	itt	ge
 800826a:	f021 0104 	bicge.w	r1, r1, #4
 800826e:	6021      	strge	r1, [r4, #0]
 8008270:	b90e      	cbnz	r6, 8008276 <_printf_i+0x11a>
 8008272:	2d00      	cmp	r5, #0
 8008274:	d04d      	beq.n	8008312 <_printf_i+0x1b6>
 8008276:	4615      	mov	r5, r2
 8008278:	fbb6 f1f3 	udiv	r1, r6, r3
 800827c:	fb03 6711 	mls	r7, r3, r1, r6
 8008280:	5dc7      	ldrb	r7, [r0, r7]
 8008282:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008286:	4637      	mov	r7, r6
 8008288:	42bb      	cmp	r3, r7
 800828a:	460e      	mov	r6, r1
 800828c:	d9f4      	bls.n	8008278 <_printf_i+0x11c>
 800828e:	2b08      	cmp	r3, #8
 8008290:	d10b      	bne.n	80082aa <_printf_i+0x14e>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	07de      	lsls	r6, r3, #31
 8008296:	d508      	bpl.n	80082aa <_printf_i+0x14e>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	6861      	ldr	r1, [r4, #4]
 800829c:	4299      	cmp	r1, r3
 800829e:	bfde      	ittt	le
 80082a0:	2330      	movle	r3, #48	; 0x30
 80082a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082aa:	1b52      	subs	r2, r2, r5
 80082ac:	6122      	str	r2, [r4, #16]
 80082ae:	464b      	mov	r3, r9
 80082b0:	4621      	mov	r1, r4
 80082b2:	4640      	mov	r0, r8
 80082b4:	f8cd a000 	str.w	sl, [sp]
 80082b8:	aa03      	add	r2, sp, #12
 80082ba:	f7ff fedf 	bl	800807c <_printf_common>
 80082be:	3001      	adds	r0, #1
 80082c0:	d14c      	bne.n	800835c <_printf_i+0x200>
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295
 80082c6:	b004      	add	sp, #16
 80082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082cc:	4834      	ldr	r0, [pc, #208]	; (80083a0 <_printf_i+0x244>)
 80082ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082d2:	6829      	ldr	r1, [r5, #0]
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80082da:	6029      	str	r1, [r5, #0]
 80082dc:	061d      	lsls	r5, r3, #24
 80082de:	d514      	bpl.n	800830a <_printf_i+0x1ae>
 80082e0:	07df      	lsls	r7, r3, #31
 80082e2:	bf44      	itt	mi
 80082e4:	f043 0320 	orrmi.w	r3, r3, #32
 80082e8:	6023      	strmi	r3, [r4, #0]
 80082ea:	b91e      	cbnz	r6, 80082f4 <_printf_i+0x198>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	f023 0320 	bic.w	r3, r3, #32
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	2310      	movs	r3, #16
 80082f6:	e7af      	b.n	8008258 <_printf_i+0xfc>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	f043 0320 	orr.w	r3, r3, #32
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	2378      	movs	r3, #120	; 0x78
 8008302:	4828      	ldr	r0, [pc, #160]	; (80083a4 <_printf_i+0x248>)
 8008304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008308:	e7e3      	b.n	80082d2 <_printf_i+0x176>
 800830a:	0659      	lsls	r1, r3, #25
 800830c:	bf48      	it	mi
 800830e:	b2b6      	uxthmi	r6, r6
 8008310:	e7e6      	b.n	80082e0 <_printf_i+0x184>
 8008312:	4615      	mov	r5, r2
 8008314:	e7bb      	b.n	800828e <_printf_i+0x132>
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	6826      	ldr	r6, [r4, #0]
 800831a:	1d18      	adds	r0, r3, #4
 800831c:	6961      	ldr	r1, [r4, #20]
 800831e:	6028      	str	r0, [r5, #0]
 8008320:	0635      	lsls	r5, r6, #24
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	d501      	bpl.n	800832a <_printf_i+0x1ce>
 8008326:	6019      	str	r1, [r3, #0]
 8008328:	e002      	b.n	8008330 <_printf_i+0x1d4>
 800832a:	0670      	lsls	r0, r6, #25
 800832c:	d5fb      	bpl.n	8008326 <_printf_i+0x1ca>
 800832e:	8019      	strh	r1, [r3, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	4615      	mov	r5, r2
 8008334:	6123      	str	r3, [r4, #16]
 8008336:	e7ba      	b.n	80082ae <_printf_i+0x152>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	2100      	movs	r1, #0
 800833c:	1d1a      	adds	r2, r3, #4
 800833e:	602a      	str	r2, [r5, #0]
 8008340:	681d      	ldr	r5, [r3, #0]
 8008342:	6862      	ldr	r2, [r4, #4]
 8008344:	4628      	mov	r0, r5
 8008346:	f000 fb3f 	bl	80089c8 <memchr>
 800834a:	b108      	cbz	r0, 8008350 <_printf_i+0x1f4>
 800834c:	1b40      	subs	r0, r0, r5
 800834e:	6060      	str	r0, [r4, #4]
 8008350:	6863      	ldr	r3, [r4, #4]
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	2300      	movs	r3, #0
 8008356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835a:	e7a8      	b.n	80082ae <_printf_i+0x152>
 800835c:	462a      	mov	r2, r5
 800835e:	4649      	mov	r1, r9
 8008360:	4640      	mov	r0, r8
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	47d0      	blx	sl
 8008366:	3001      	adds	r0, #1
 8008368:	d0ab      	beq.n	80082c2 <_printf_i+0x166>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	079b      	lsls	r3, r3, #30
 800836e:	d413      	bmi.n	8008398 <_printf_i+0x23c>
 8008370:	68e0      	ldr	r0, [r4, #12]
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	4298      	cmp	r0, r3
 8008376:	bfb8      	it	lt
 8008378:	4618      	movlt	r0, r3
 800837a:	e7a4      	b.n	80082c6 <_printf_i+0x16a>
 800837c:	2301      	movs	r3, #1
 800837e:	4632      	mov	r2, r6
 8008380:	4649      	mov	r1, r9
 8008382:	4640      	mov	r0, r8
 8008384:	47d0      	blx	sl
 8008386:	3001      	adds	r0, #1
 8008388:	d09b      	beq.n	80082c2 <_printf_i+0x166>
 800838a:	3501      	adds	r5, #1
 800838c:	68e3      	ldr	r3, [r4, #12]
 800838e:	9903      	ldr	r1, [sp, #12]
 8008390:	1a5b      	subs	r3, r3, r1
 8008392:	42ab      	cmp	r3, r5
 8008394:	dcf2      	bgt.n	800837c <_printf_i+0x220>
 8008396:	e7eb      	b.n	8008370 <_printf_i+0x214>
 8008398:	2500      	movs	r5, #0
 800839a:	f104 0619 	add.w	r6, r4, #25
 800839e:	e7f5      	b.n	800838c <_printf_i+0x230>
 80083a0:	08009225 	.word	0x08009225
 80083a4:	08009236 	.word	0x08009236

080083a8 <nan>:
 80083a8:	2000      	movs	r0, #0
 80083aa:	4901      	ldr	r1, [pc, #4]	; (80083b0 <nan+0x8>)
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	7ff80000 	.word	0x7ff80000

080083b4 <nanf>:
 80083b4:	4800      	ldr	r0, [pc, #0]	; (80083b8 <nanf+0x4>)
 80083b6:	4770      	bx	lr
 80083b8:	7fc00000 	.word	0x7fc00000

080083bc <strncmp>:
 80083bc:	4603      	mov	r3, r0
 80083be:	b510      	push	{r4, lr}
 80083c0:	b172      	cbz	r2, 80083e0 <strncmp+0x24>
 80083c2:	3901      	subs	r1, #1
 80083c4:	1884      	adds	r4, r0, r2
 80083c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083ce:	4290      	cmp	r0, r2
 80083d0:	d101      	bne.n	80083d6 <strncmp+0x1a>
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	d101      	bne.n	80083da <strncmp+0x1e>
 80083d6:	1a80      	subs	r0, r0, r2
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	2800      	cmp	r0, #0
 80083dc:	d1f3      	bne.n	80083c6 <strncmp+0xa>
 80083de:	e7fa      	b.n	80083d6 <strncmp+0x1a>
 80083e0:	4610      	mov	r0, r2
 80083e2:	e7f9      	b.n	80083d8 <strncmp+0x1c>

080083e4 <__swbuf_r>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	460e      	mov	r6, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	4605      	mov	r5, r0
 80083ec:	b118      	cbz	r0, 80083f6 <__swbuf_r+0x12>
 80083ee:	6983      	ldr	r3, [r0, #24]
 80083f0:	b90b      	cbnz	r3, 80083f6 <__swbuf_r+0x12>
 80083f2:	f000 f9e3 	bl	80087bc <__sinit>
 80083f6:	4b21      	ldr	r3, [pc, #132]	; (800847c <__swbuf_r+0x98>)
 80083f8:	429c      	cmp	r4, r3
 80083fa:	d12b      	bne.n	8008454 <__swbuf_r+0x70>
 80083fc:	686c      	ldr	r4, [r5, #4]
 80083fe:	69a3      	ldr	r3, [r4, #24]
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	071a      	lsls	r2, r3, #28
 8008406:	d52f      	bpl.n	8008468 <__swbuf_r+0x84>
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	b36b      	cbz	r3, 8008468 <__swbuf_r+0x84>
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	6820      	ldr	r0, [r4, #0]
 8008410:	b2f6      	uxtb	r6, r6
 8008412:	1ac0      	subs	r0, r0, r3
 8008414:	6963      	ldr	r3, [r4, #20]
 8008416:	4637      	mov	r7, r6
 8008418:	4283      	cmp	r3, r0
 800841a:	dc04      	bgt.n	8008426 <__swbuf_r+0x42>
 800841c:	4621      	mov	r1, r4
 800841e:	4628      	mov	r0, r5
 8008420:	f000 f938 	bl	8008694 <_fflush_r>
 8008424:	bb30      	cbnz	r0, 8008474 <__swbuf_r+0x90>
 8008426:	68a3      	ldr	r3, [r4, #8]
 8008428:	3001      	adds	r0, #1
 800842a:	3b01      	subs	r3, #1
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	701e      	strb	r6, [r3, #0]
 8008436:	6963      	ldr	r3, [r4, #20]
 8008438:	4283      	cmp	r3, r0
 800843a:	d004      	beq.n	8008446 <__swbuf_r+0x62>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	07db      	lsls	r3, r3, #31
 8008440:	d506      	bpl.n	8008450 <__swbuf_r+0x6c>
 8008442:	2e0a      	cmp	r6, #10
 8008444:	d104      	bne.n	8008450 <__swbuf_r+0x6c>
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 f923 	bl	8008694 <_fflush_r>
 800844e:	b988      	cbnz	r0, 8008474 <__swbuf_r+0x90>
 8008450:	4638      	mov	r0, r7
 8008452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <__swbuf_r+0x9c>)
 8008456:	429c      	cmp	r4, r3
 8008458:	d101      	bne.n	800845e <__swbuf_r+0x7a>
 800845a:	68ac      	ldr	r4, [r5, #8]
 800845c:	e7cf      	b.n	80083fe <__swbuf_r+0x1a>
 800845e:	4b09      	ldr	r3, [pc, #36]	; (8008484 <__swbuf_r+0xa0>)
 8008460:	429c      	cmp	r4, r3
 8008462:	bf08      	it	eq
 8008464:	68ec      	ldreq	r4, [r5, #12]
 8008466:	e7ca      	b.n	80083fe <__swbuf_r+0x1a>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f000 f81a 	bl	80084a4 <__swsetup_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d0cb      	beq.n	800840c <__swbuf_r+0x28>
 8008474:	f04f 37ff 	mov.w	r7, #4294967295
 8008478:	e7ea      	b.n	8008450 <__swbuf_r+0x6c>
 800847a:	bf00      	nop
 800847c:	08009268 	.word	0x08009268
 8008480:	08009288 	.word	0x08009288
 8008484:	08009248 	.word	0x08009248

08008488 <__ascii_wctomb>:
 8008488:	4603      	mov	r3, r0
 800848a:	4608      	mov	r0, r1
 800848c:	b141      	cbz	r1, 80084a0 <__ascii_wctomb+0x18>
 800848e:	2aff      	cmp	r2, #255	; 0xff
 8008490:	d904      	bls.n	800849c <__ascii_wctomb+0x14>
 8008492:	228a      	movs	r2, #138	; 0x8a
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	4770      	bx	lr
 800849c:	2001      	movs	r0, #1
 800849e:	700a      	strb	r2, [r1, #0]
 80084a0:	4770      	bx	lr
	...

080084a4 <__swsetup_r>:
 80084a4:	4b32      	ldr	r3, [pc, #200]	; (8008570 <__swsetup_r+0xcc>)
 80084a6:	b570      	push	{r4, r5, r6, lr}
 80084a8:	681d      	ldr	r5, [r3, #0]
 80084aa:	4606      	mov	r6, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	b125      	cbz	r5, 80084ba <__swsetup_r+0x16>
 80084b0:	69ab      	ldr	r3, [r5, #24]
 80084b2:	b913      	cbnz	r3, 80084ba <__swsetup_r+0x16>
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 f981 	bl	80087bc <__sinit>
 80084ba:	4b2e      	ldr	r3, [pc, #184]	; (8008574 <__swsetup_r+0xd0>)
 80084bc:	429c      	cmp	r4, r3
 80084be:	d10f      	bne.n	80084e0 <__swsetup_r+0x3c>
 80084c0:	686c      	ldr	r4, [r5, #4]
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084c8:	0719      	lsls	r1, r3, #28
 80084ca:	d42c      	bmi.n	8008526 <__swsetup_r+0x82>
 80084cc:	06dd      	lsls	r5, r3, #27
 80084ce:	d411      	bmi.n	80084f4 <__swsetup_r+0x50>
 80084d0:	2309      	movs	r3, #9
 80084d2:	6033      	str	r3, [r6, #0]
 80084d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	e03e      	b.n	800855e <__swsetup_r+0xba>
 80084e0:	4b25      	ldr	r3, [pc, #148]	; (8008578 <__swsetup_r+0xd4>)
 80084e2:	429c      	cmp	r4, r3
 80084e4:	d101      	bne.n	80084ea <__swsetup_r+0x46>
 80084e6:	68ac      	ldr	r4, [r5, #8]
 80084e8:	e7eb      	b.n	80084c2 <__swsetup_r+0x1e>
 80084ea:	4b24      	ldr	r3, [pc, #144]	; (800857c <__swsetup_r+0xd8>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	bf08      	it	eq
 80084f0:	68ec      	ldreq	r4, [r5, #12]
 80084f2:	e7e6      	b.n	80084c2 <__swsetup_r+0x1e>
 80084f4:	0758      	lsls	r0, r3, #29
 80084f6:	d512      	bpl.n	800851e <__swsetup_r+0x7a>
 80084f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084fa:	b141      	cbz	r1, 800850e <__swsetup_r+0x6a>
 80084fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008500:	4299      	cmp	r1, r3
 8008502:	d002      	beq.n	800850a <__swsetup_r+0x66>
 8008504:	4630      	mov	r0, r6
 8008506:	f7fd fa2b 	bl	8005960 <_free_r>
 800850a:	2300      	movs	r3, #0
 800850c:	6363      	str	r3, [r4, #52]	; 0x34
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	2300      	movs	r3, #0
 8008518:	6063      	str	r3, [r4, #4]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f043 0308 	orr.w	r3, r3, #8
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	6923      	ldr	r3, [r4, #16]
 8008528:	b94b      	cbnz	r3, 800853e <__swsetup_r+0x9a>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008534:	d003      	beq.n	800853e <__swsetup_r+0x9a>
 8008536:	4621      	mov	r1, r4
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fa05 	bl	8008948 <__smakebuf_r>
 800853e:	89a0      	ldrh	r0, [r4, #12]
 8008540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008544:	f010 0301 	ands.w	r3, r0, #1
 8008548:	d00a      	beq.n	8008560 <__swsetup_r+0xbc>
 800854a:	2300      	movs	r3, #0
 800854c:	60a3      	str	r3, [r4, #8]
 800854e:	6963      	ldr	r3, [r4, #20]
 8008550:	425b      	negs	r3, r3
 8008552:	61a3      	str	r3, [r4, #24]
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	b943      	cbnz	r3, 800856a <__swsetup_r+0xc6>
 8008558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800855c:	d1ba      	bne.n	80084d4 <__swsetup_r+0x30>
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	0781      	lsls	r1, r0, #30
 8008562:	bf58      	it	pl
 8008564:	6963      	ldrpl	r3, [r4, #20]
 8008566:	60a3      	str	r3, [r4, #8]
 8008568:	e7f4      	b.n	8008554 <__swsetup_r+0xb0>
 800856a:	2000      	movs	r0, #0
 800856c:	e7f7      	b.n	800855e <__swsetup_r+0xba>
 800856e:	bf00      	nop
 8008570:	20000018 	.word	0x20000018
 8008574:	08009268 	.word	0x08009268
 8008578:	08009288 	.word	0x08009288
 800857c:	08009248 	.word	0x08009248

08008580 <abort>:
 8008580:	2006      	movs	r0, #6
 8008582:	b508      	push	{r3, lr}
 8008584:	f000 faa0 	bl	8008ac8 <raise>
 8008588:	2001      	movs	r0, #1
 800858a:	f7fa f990 	bl	80028ae <_exit>
	...

08008590 <__sflush_r>:
 8008590:	898a      	ldrh	r2, [r1, #12]
 8008592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008594:	4605      	mov	r5, r0
 8008596:	0710      	lsls	r0, r2, #28
 8008598:	460c      	mov	r4, r1
 800859a:	d457      	bmi.n	800864c <__sflush_r+0xbc>
 800859c:	684b      	ldr	r3, [r1, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	dc04      	bgt.n	80085ac <__sflush_r+0x1c>
 80085a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc01      	bgt.n	80085ac <__sflush_r+0x1c>
 80085a8:	2000      	movs	r0, #0
 80085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	d0fa      	beq.n	80085a8 <__sflush_r+0x18>
 80085b2:	2300      	movs	r3, #0
 80085b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085b8:	682f      	ldr	r7, [r5, #0]
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	d032      	beq.n	8008624 <__sflush_r+0x94>
 80085be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	075a      	lsls	r2, r3, #29
 80085c4:	d505      	bpl.n	80085d2 <__sflush_r+0x42>
 80085c6:	6863      	ldr	r3, [r4, #4]
 80085c8:	1ac0      	subs	r0, r0, r3
 80085ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085cc:	b10b      	cbz	r3, 80085d2 <__sflush_r+0x42>
 80085ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085d0:	1ac0      	subs	r0, r0, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	4602      	mov	r2, r0
 80085d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085d8:	4628      	mov	r0, r5
 80085da:	6a21      	ldr	r1, [r4, #32]
 80085dc:	47b0      	blx	r6
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	d106      	bne.n	80085f2 <__sflush_r+0x62>
 80085e4:	6829      	ldr	r1, [r5, #0]
 80085e6:	291d      	cmp	r1, #29
 80085e8:	d82c      	bhi.n	8008644 <__sflush_r+0xb4>
 80085ea:	4a29      	ldr	r2, [pc, #164]	; (8008690 <__sflush_r+0x100>)
 80085ec:	40ca      	lsrs	r2, r1
 80085ee:	07d6      	lsls	r6, r2, #31
 80085f0:	d528      	bpl.n	8008644 <__sflush_r+0xb4>
 80085f2:	2200      	movs	r2, #0
 80085f4:	6062      	str	r2, [r4, #4]
 80085f6:	6922      	ldr	r2, [r4, #16]
 80085f8:	04d9      	lsls	r1, r3, #19
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	d504      	bpl.n	8008608 <__sflush_r+0x78>
 80085fe:	1c42      	adds	r2, r0, #1
 8008600:	d101      	bne.n	8008606 <__sflush_r+0x76>
 8008602:	682b      	ldr	r3, [r5, #0]
 8008604:	b903      	cbnz	r3, 8008608 <__sflush_r+0x78>
 8008606:	6560      	str	r0, [r4, #84]	; 0x54
 8008608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800860a:	602f      	str	r7, [r5, #0]
 800860c:	2900      	cmp	r1, #0
 800860e:	d0cb      	beq.n	80085a8 <__sflush_r+0x18>
 8008610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008614:	4299      	cmp	r1, r3
 8008616:	d002      	beq.n	800861e <__sflush_r+0x8e>
 8008618:	4628      	mov	r0, r5
 800861a:	f7fd f9a1 	bl	8005960 <_free_r>
 800861e:	2000      	movs	r0, #0
 8008620:	6360      	str	r0, [r4, #52]	; 0x34
 8008622:	e7c2      	b.n	80085aa <__sflush_r+0x1a>
 8008624:	6a21      	ldr	r1, [r4, #32]
 8008626:	2301      	movs	r3, #1
 8008628:	4628      	mov	r0, r5
 800862a:	47b0      	blx	r6
 800862c:	1c41      	adds	r1, r0, #1
 800862e:	d1c7      	bne.n	80085c0 <__sflush_r+0x30>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0c4      	beq.n	80085c0 <__sflush_r+0x30>
 8008636:	2b1d      	cmp	r3, #29
 8008638:	d001      	beq.n	800863e <__sflush_r+0xae>
 800863a:	2b16      	cmp	r3, #22
 800863c:	d101      	bne.n	8008642 <__sflush_r+0xb2>
 800863e:	602f      	str	r7, [r5, #0]
 8008640:	e7b2      	b.n	80085a8 <__sflush_r+0x18>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008648:	81a3      	strh	r3, [r4, #12]
 800864a:	e7ae      	b.n	80085aa <__sflush_r+0x1a>
 800864c:	690f      	ldr	r7, [r1, #16]
 800864e:	2f00      	cmp	r7, #0
 8008650:	d0aa      	beq.n	80085a8 <__sflush_r+0x18>
 8008652:	0793      	lsls	r3, r2, #30
 8008654:	bf18      	it	ne
 8008656:	2300      	movne	r3, #0
 8008658:	680e      	ldr	r6, [r1, #0]
 800865a:	bf08      	it	eq
 800865c:	694b      	ldreq	r3, [r1, #20]
 800865e:	1bf6      	subs	r6, r6, r7
 8008660:	600f      	str	r7, [r1, #0]
 8008662:	608b      	str	r3, [r1, #8]
 8008664:	2e00      	cmp	r6, #0
 8008666:	dd9f      	ble.n	80085a8 <__sflush_r+0x18>
 8008668:	4633      	mov	r3, r6
 800866a:	463a      	mov	r2, r7
 800866c:	4628      	mov	r0, r5
 800866e:	6a21      	ldr	r1, [r4, #32]
 8008670:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008674:	47e0      	blx	ip
 8008676:	2800      	cmp	r0, #0
 8008678:	dc06      	bgt.n	8008688 <__sflush_r+0xf8>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	e790      	b.n	80085aa <__sflush_r+0x1a>
 8008688:	4407      	add	r7, r0
 800868a:	1a36      	subs	r6, r6, r0
 800868c:	e7ea      	b.n	8008664 <__sflush_r+0xd4>
 800868e:	bf00      	nop
 8008690:	20400001 	.word	0x20400001

08008694 <_fflush_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	690b      	ldr	r3, [r1, #16]
 8008698:	4605      	mov	r5, r0
 800869a:	460c      	mov	r4, r1
 800869c:	b913      	cbnz	r3, 80086a4 <_fflush_r+0x10>
 800869e:	2500      	movs	r5, #0
 80086a0:	4628      	mov	r0, r5
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	b118      	cbz	r0, 80086ae <_fflush_r+0x1a>
 80086a6:	6983      	ldr	r3, [r0, #24]
 80086a8:	b90b      	cbnz	r3, 80086ae <_fflush_r+0x1a>
 80086aa:	f000 f887 	bl	80087bc <__sinit>
 80086ae:	4b14      	ldr	r3, [pc, #80]	; (8008700 <_fflush_r+0x6c>)
 80086b0:	429c      	cmp	r4, r3
 80086b2:	d11b      	bne.n	80086ec <_fflush_r+0x58>
 80086b4:	686c      	ldr	r4, [r5, #4]
 80086b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0ef      	beq.n	800869e <_fflush_r+0xa>
 80086be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086c0:	07d0      	lsls	r0, r2, #31
 80086c2:	d404      	bmi.n	80086ce <_fflush_r+0x3a>
 80086c4:	0599      	lsls	r1, r3, #22
 80086c6:	d402      	bmi.n	80086ce <_fflush_r+0x3a>
 80086c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ca:	f000 f915 	bl	80088f8 <__retarget_lock_acquire_recursive>
 80086ce:	4628      	mov	r0, r5
 80086d0:	4621      	mov	r1, r4
 80086d2:	f7ff ff5d 	bl	8008590 <__sflush_r>
 80086d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086d8:	4605      	mov	r5, r0
 80086da:	07da      	lsls	r2, r3, #31
 80086dc:	d4e0      	bmi.n	80086a0 <_fflush_r+0xc>
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	059b      	lsls	r3, r3, #22
 80086e2:	d4dd      	bmi.n	80086a0 <_fflush_r+0xc>
 80086e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086e6:	f000 f908 	bl	80088fa <__retarget_lock_release_recursive>
 80086ea:	e7d9      	b.n	80086a0 <_fflush_r+0xc>
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <_fflush_r+0x70>)
 80086ee:	429c      	cmp	r4, r3
 80086f0:	d101      	bne.n	80086f6 <_fflush_r+0x62>
 80086f2:	68ac      	ldr	r4, [r5, #8]
 80086f4:	e7df      	b.n	80086b6 <_fflush_r+0x22>
 80086f6:	4b04      	ldr	r3, [pc, #16]	; (8008708 <_fflush_r+0x74>)
 80086f8:	429c      	cmp	r4, r3
 80086fa:	bf08      	it	eq
 80086fc:	68ec      	ldreq	r4, [r5, #12]
 80086fe:	e7da      	b.n	80086b6 <_fflush_r+0x22>
 8008700:	08009268 	.word	0x08009268
 8008704:	08009288 	.word	0x08009288
 8008708:	08009248 	.word	0x08009248

0800870c <std>:
 800870c:	2300      	movs	r3, #0
 800870e:	b510      	push	{r4, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	e9c0 3300 	strd	r3, r3, [r0]
 8008716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800871a:	6083      	str	r3, [r0, #8]
 800871c:	8181      	strh	r1, [r0, #12]
 800871e:	6643      	str	r3, [r0, #100]	; 0x64
 8008720:	81c2      	strh	r2, [r0, #14]
 8008722:	6183      	str	r3, [r0, #24]
 8008724:	4619      	mov	r1, r3
 8008726:	2208      	movs	r2, #8
 8008728:	305c      	adds	r0, #92	; 0x5c
 800872a:	f7fd f911 	bl	8005950 <memset>
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <std+0x38>)
 8008730:	6224      	str	r4, [r4, #32]
 8008732:	6263      	str	r3, [r4, #36]	; 0x24
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <std+0x3c>)
 8008736:	62a3      	str	r3, [r4, #40]	; 0x28
 8008738:	4b04      	ldr	r3, [pc, #16]	; (800874c <std+0x40>)
 800873a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800873c:	4b04      	ldr	r3, [pc, #16]	; (8008750 <std+0x44>)
 800873e:	6323      	str	r3, [r4, #48]	; 0x30
 8008740:	bd10      	pop	{r4, pc}
 8008742:	bf00      	nop
 8008744:	08008b01 	.word	0x08008b01
 8008748:	08008b23 	.word	0x08008b23
 800874c:	08008b5b 	.word	0x08008b5b
 8008750:	08008b7f 	.word	0x08008b7f

08008754 <_cleanup_r>:
 8008754:	4901      	ldr	r1, [pc, #4]	; (800875c <_cleanup_r+0x8>)
 8008756:	f000 b8af 	b.w	80088b8 <_fwalk_reent>
 800875a:	bf00      	nop
 800875c:	08008695 	.word	0x08008695

08008760 <__sfmoreglue>:
 8008760:	2268      	movs	r2, #104	; 0x68
 8008762:	b570      	push	{r4, r5, r6, lr}
 8008764:	1e4d      	subs	r5, r1, #1
 8008766:	4355      	muls	r5, r2
 8008768:	460e      	mov	r6, r1
 800876a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800876e:	f7fd f95f 	bl	8005a30 <_malloc_r>
 8008772:	4604      	mov	r4, r0
 8008774:	b140      	cbz	r0, 8008788 <__sfmoreglue+0x28>
 8008776:	2100      	movs	r1, #0
 8008778:	e9c0 1600 	strd	r1, r6, [r0]
 800877c:	300c      	adds	r0, #12
 800877e:	60a0      	str	r0, [r4, #8]
 8008780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008784:	f7fd f8e4 	bl	8005950 <memset>
 8008788:	4620      	mov	r0, r4
 800878a:	bd70      	pop	{r4, r5, r6, pc}

0800878c <__sfp_lock_acquire>:
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <__sfp_lock_acquire+0x8>)
 800878e:	f000 b8b3 	b.w	80088f8 <__retarget_lock_acquire_recursive>
 8008792:	bf00      	nop
 8008794:	200004dd 	.word	0x200004dd

08008798 <__sfp_lock_release>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__sfp_lock_release+0x8>)
 800879a:	f000 b8ae 	b.w	80088fa <__retarget_lock_release_recursive>
 800879e:	bf00      	nop
 80087a0:	200004dd 	.word	0x200004dd

080087a4 <__sinit_lock_acquire>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__sinit_lock_acquire+0x8>)
 80087a6:	f000 b8a7 	b.w	80088f8 <__retarget_lock_acquire_recursive>
 80087aa:	bf00      	nop
 80087ac:	200004de 	.word	0x200004de

080087b0 <__sinit_lock_release>:
 80087b0:	4801      	ldr	r0, [pc, #4]	; (80087b8 <__sinit_lock_release+0x8>)
 80087b2:	f000 b8a2 	b.w	80088fa <__retarget_lock_release_recursive>
 80087b6:	bf00      	nop
 80087b8:	200004de 	.word	0x200004de

080087bc <__sinit>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
 80087c0:	f7ff fff0 	bl	80087a4 <__sinit_lock_acquire>
 80087c4:	69a3      	ldr	r3, [r4, #24]
 80087c6:	b11b      	cbz	r3, 80087d0 <__sinit+0x14>
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f7ff bff0 	b.w	80087b0 <__sinit_lock_release>
 80087d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087d4:	6523      	str	r3, [r4, #80]	; 0x50
 80087d6:	4b13      	ldr	r3, [pc, #76]	; (8008824 <__sinit+0x68>)
 80087d8:	4a13      	ldr	r2, [pc, #76]	; (8008828 <__sinit+0x6c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80087de:	42a3      	cmp	r3, r4
 80087e0:	bf08      	it	eq
 80087e2:	2301      	moveq	r3, #1
 80087e4:	4620      	mov	r0, r4
 80087e6:	bf08      	it	eq
 80087e8:	61a3      	streq	r3, [r4, #24]
 80087ea:	f000 f81f 	bl	800882c <__sfp>
 80087ee:	6060      	str	r0, [r4, #4]
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 f81b 	bl	800882c <__sfp>
 80087f6:	60a0      	str	r0, [r4, #8]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 f817 	bl	800882c <__sfp>
 80087fe:	2200      	movs	r2, #0
 8008800:	2104      	movs	r1, #4
 8008802:	60e0      	str	r0, [r4, #12]
 8008804:	6860      	ldr	r0, [r4, #4]
 8008806:	f7ff ff81 	bl	800870c <std>
 800880a:	2201      	movs	r2, #1
 800880c:	2109      	movs	r1, #9
 800880e:	68a0      	ldr	r0, [r4, #8]
 8008810:	f7ff ff7c 	bl	800870c <std>
 8008814:	2202      	movs	r2, #2
 8008816:	2112      	movs	r1, #18
 8008818:	68e0      	ldr	r0, [r4, #12]
 800881a:	f7ff ff77 	bl	800870c <std>
 800881e:	2301      	movs	r3, #1
 8008820:	61a3      	str	r3, [r4, #24]
 8008822:	e7d1      	b.n	80087c8 <__sinit+0xc>
 8008824:	08008e1c 	.word	0x08008e1c
 8008828:	08008755 	.word	0x08008755

0800882c <__sfp>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	4607      	mov	r7, r0
 8008830:	f7ff ffac 	bl	800878c <__sfp_lock_acquire>
 8008834:	4b1e      	ldr	r3, [pc, #120]	; (80088b0 <__sfp+0x84>)
 8008836:	681e      	ldr	r6, [r3, #0]
 8008838:	69b3      	ldr	r3, [r6, #24]
 800883a:	b913      	cbnz	r3, 8008842 <__sfp+0x16>
 800883c:	4630      	mov	r0, r6
 800883e:	f7ff ffbd 	bl	80087bc <__sinit>
 8008842:	3648      	adds	r6, #72	; 0x48
 8008844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008848:	3b01      	subs	r3, #1
 800884a:	d503      	bpl.n	8008854 <__sfp+0x28>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	b30b      	cbz	r3, 8008894 <__sfp+0x68>
 8008850:	6836      	ldr	r6, [r6, #0]
 8008852:	e7f7      	b.n	8008844 <__sfp+0x18>
 8008854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008858:	b9d5      	cbnz	r5, 8008890 <__sfp+0x64>
 800885a:	4b16      	ldr	r3, [pc, #88]	; (80088b4 <__sfp+0x88>)
 800885c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008860:	60e3      	str	r3, [r4, #12]
 8008862:	6665      	str	r5, [r4, #100]	; 0x64
 8008864:	f000 f847 	bl	80088f6 <__retarget_lock_init_recursive>
 8008868:	f7ff ff96 	bl	8008798 <__sfp_lock_release>
 800886c:	2208      	movs	r2, #8
 800886e:	4629      	mov	r1, r5
 8008870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008878:	6025      	str	r5, [r4, #0]
 800887a:	61a5      	str	r5, [r4, #24]
 800887c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008880:	f7fd f866 	bl	8005950 <memset>
 8008884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800888c:	4620      	mov	r0, r4
 800888e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008890:	3468      	adds	r4, #104	; 0x68
 8008892:	e7d9      	b.n	8008848 <__sfp+0x1c>
 8008894:	2104      	movs	r1, #4
 8008896:	4638      	mov	r0, r7
 8008898:	f7ff ff62 	bl	8008760 <__sfmoreglue>
 800889c:	4604      	mov	r4, r0
 800889e:	6030      	str	r0, [r6, #0]
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d1d5      	bne.n	8008850 <__sfp+0x24>
 80088a4:	f7ff ff78 	bl	8008798 <__sfp_lock_release>
 80088a8:	230c      	movs	r3, #12
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	e7ee      	b.n	800888c <__sfp+0x60>
 80088ae:	bf00      	nop
 80088b0:	08008e1c 	.word	0x08008e1c
 80088b4:	ffff0001 	.word	0xffff0001

080088b8 <_fwalk_reent>:
 80088b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088bc:	4606      	mov	r6, r0
 80088be:	4688      	mov	r8, r1
 80088c0:	2700      	movs	r7, #0
 80088c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088ca:	f1b9 0901 	subs.w	r9, r9, #1
 80088ce:	d505      	bpl.n	80088dc <_fwalk_reent+0x24>
 80088d0:	6824      	ldr	r4, [r4, #0]
 80088d2:	2c00      	cmp	r4, #0
 80088d4:	d1f7      	bne.n	80088c6 <_fwalk_reent+0xe>
 80088d6:	4638      	mov	r0, r7
 80088d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088dc:	89ab      	ldrh	r3, [r5, #12]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d907      	bls.n	80088f2 <_fwalk_reent+0x3a>
 80088e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088e6:	3301      	adds	r3, #1
 80088e8:	d003      	beq.n	80088f2 <_fwalk_reent+0x3a>
 80088ea:	4629      	mov	r1, r5
 80088ec:	4630      	mov	r0, r6
 80088ee:	47c0      	blx	r8
 80088f0:	4307      	orrs	r7, r0
 80088f2:	3568      	adds	r5, #104	; 0x68
 80088f4:	e7e9      	b.n	80088ca <_fwalk_reent+0x12>

080088f6 <__retarget_lock_init_recursive>:
 80088f6:	4770      	bx	lr

080088f8 <__retarget_lock_acquire_recursive>:
 80088f8:	4770      	bx	lr

080088fa <__retarget_lock_release_recursive>:
 80088fa:	4770      	bx	lr

080088fc <__swhatbuf_r>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	460e      	mov	r6, r1
 8008900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008904:	4614      	mov	r4, r2
 8008906:	2900      	cmp	r1, #0
 8008908:	461d      	mov	r5, r3
 800890a:	b096      	sub	sp, #88	; 0x58
 800890c:	da08      	bge.n	8008920 <__swhatbuf_r+0x24>
 800890e:	2200      	movs	r2, #0
 8008910:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008914:	602a      	str	r2, [r5, #0]
 8008916:	061a      	lsls	r2, r3, #24
 8008918:	d410      	bmi.n	800893c <__swhatbuf_r+0x40>
 800891a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891e:	e00e      	b.n	800893e <__swhatbuf_r+0x42>
 8008920:	466a      	mov	r2, sp
 8008922:	f000 f953 	bl	8008bcc <_fstat_r>
 8008926:	2800      	cmp	r0, #0
 8008928:	dbf1      	blt.n	800890e <__swhatbuf_r+0x12>
 800892a:	9a01      	ldr	r2, [sp, #4]
 800892c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008930:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008934:	425a      	negs	r2, r3
 8008936:	415a      	adcs	r2, r3
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	e7ee      	b.n	800891a <__swhatbuf_r+0x1e>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	2000      	movs	r0, #0
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	b016      	add	sp, #88	; 0x58
 8008944:	bd70      	pop	{r4, r5, r6, pc}
	...

08008948 <__smakebuf_r>:
 8008948:	898b      	ldrh	r3, [r1, #12]
 800894a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800894c:	079d      	lsls	r5, r3, #30
 800894e:	4606      	mov	r6, r0
 8008950:	460c      	mov	r4, r1
 8008952:	d507      	bpl.n	8008964 <__smakebuf_r+0x1c>
 8008954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	2301      	movs	r3, #1
 800895e:	6163      	str	r3, [r4, #20]
 8008960:	b002      	add	sp, #8
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	466a      	mov	r2, sp
 8008966:	ab01      	add	r3, sp, #4
 8008968:	f7ff ffc8 	bl	80088fc <__swhatbuf_r>
 800896c:	9900      	ldr	r1, [sp, #0]
 800896e:	4605      	mov	r5, r0
 8008970:	4630      	mov	r0, r6
 8008972:	f7fd f85d 	bl	8005a30 <_malloc_r>
 8008976:	b948      	cbnz	r0, 800898c <__smakebuf_r+0x44>
 8008978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897c:	059a      	lsls	r2, r3, #22
 800897e:	d4ef      	bmi.n	8008960 <__smakebuf_r+0x18>
 8008980:	f023 0303 	bic.w	r3, r3, #3
 8008984:	f043 0302 	orr.w	r3, r3, #2
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	e7e3      	b.n	8008954 <__smakebuf_r+0xc>
 800898c:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <__smakebuf_r+0x7c>)
 800898e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	6020      	str	r0, [r4, #0]
 8008994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	9b00      	ldr	r3, [sp, #0]
 800899c:	6120      	str	r0, [r4, #16]
 800899e:	6163      	str	r3, [r4, #20]
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	b15b      	cbz	r3, 80089bc <__smakebuf_r+0x74>
 80089a4:	4630      	mov	r0, r6
 80089a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089aa:	f000 f921 	bl	8008bf0 <_isatty_r>
 80089ae:	b128      	cbz	r0, 80089bc <__smakebuf_r+0x74>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	89a0      	ldrh	r0, [r4, #12]
 80089be:	4305      	orrs	r5, r0
 80089c0:	81a5      	strh	r5, [r4, #12]
 80089c2:	e7cd      	b.n	8008960 <__smakebuf_r+0x18>
 80089c4:	08008755 	.word	0x08008755

080089c8 <memchr>:
 80089c8:	4603      	mov	r3, r0
 80089ca:	b510      	push	{r4, lr}
 80089cc:	b2c9      	uxtb	r1, r1
 80089ce:	4402      	add	r2, r0
 80089d0:	4293      	cmp	r3, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	d101      	bne.n	80089da <memchr+0x12>
 80089d6:	2000      	movs	r0, #0
 80089d8:	e003      	b.n	80089e2 <memchr+0x1a>
 80089da:	7804      	ldrb	r4, [r0, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	428c      	cmp	r4, r1
 80089e0:	d1f6      	bne.n	80089d0 <memchr+0x8>
 80089e2:	bd10      	pop	{r4, pc}

080089e4 <memmove>:
 80089e4:	4288      	cmp	r0, r1
 80089e6:	b510      	push	{r4, lr}
 80089e8:	eb01 0402 	add.w	r4, r1, r2
 80089ec:	d902      	bls.n	80089f4 <memmove+0x10>
 80089ee:	4284      	cmp	r4, r0
 80089f0:	4623      	mov	r3, r4
 80089f2:	d807      	bhi.n	8008a04 <memmove+0x20>
 80089f4:	1e43      	subs	r3, r0, #1
 80089f6:	42a1      	cmp	r1, r4
 80089f8:	d008      	beq.n	8008a0c <memmove+0x28>
 80089fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a02:	e7f8      	b.n	80089f6 <memmove+0x12>
 8008a04:	4601      	mov	r1, r0
 8008a06:	4402      	add	r2, r0
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	d100      	bne.n	8008a0e <memmove+0x2a>
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a16:	e7f7      	b.n	8008a08 <memmove+0x24>

08008a18 <_realloc_r>:
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4614      	mov	r4, r2
 8008a20:	460e      	mov	r6, r1
 8008a22:	b921      	cbnz	r1, 8008a2e <_realloc_r+0x16>
 8008a24:	4611      	mov	r1, r2
 8008a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2a:	f7fd b801 	b.w	8005a30 <_malloc_r>
 8008a2e:	b92a      	cbnz	r2, 8008a3c <_realloc_r+0x24>
 8008a30:	f7fc ff96 	bl	8005960 <_free_r>
 8008a34:	4625      	mov	r5, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	f000 f8fa 	bl	8008c34 <_malloc_usable_size_r>
 8008a40:	4284      	cmp	r4, r0
 8008a42:	4607      	mov	r7, r0
 8008a44:	d802      	bhi.n	8008a4c <_realloc_r+0x34>
 8008a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a4a:	d812      	bhi.n	8008a72 <_realloc_r+0x5a>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7fc ffee 	bl	8005a30 <_malloc_r>
 8008a54:	4605      	mov	r5, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0ed      	beq.n	8008a36 <_realloc_r+0x1e>
 8008a5a:	42bc      	cmp	r4, r7
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	4631      	mov	r1, r6
 8008a60:	bf28      	it	cs
 8008a62:	463a      	movcs	r2, r7
 8008a64:	f7fe fb70 	bl	8007148 <memcpy>
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7fc ff78 	bl	8005960 <_free_r>
 8008a70:	e7e1      	b.n	8008a36 <_realloc_r+0x1e>
 8008a72:	4635      	mov	r5, r6
 8008a74:	e7df      	b.n	8008a36 <_realloc_r+0x1e>

08008a76 <_raise_r>:
 8008a76:	291f      	cmp	r1, #31
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	d904      	bls.n	8008a8a <_raise_r+0x14>
 8008a80:	2316      	movs	r3, #22
 8008a82:	6003      	str	r3, [r0, #0]
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a8c:	b112      	cbz	r2, 8008a94 <_raise_r+0x1e>
 8008a8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a92:	b94b      	cbnz	r3, 8008aa8 <_raise_r+0x32>
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 f831 	bl	8008afc <_getpid_r>
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa4:	f000 b818 	b.w	8008ad8 <_kill_r>
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d00a      	beq.n	8008ac2 <_raise_r+0x4c>
 8008aac:	1c59      	adds	r1, r3, #1
 8008aae:	d103      	bne.n	8008ab8 <_raise_r+0x42>
 8008ab0:	2316      	movs	r3, #22
 8008ab2:	6003      	str	r3, [r0, #0]
 8008ab4:	2001      	movs	r0, #1
 8008ab6:	e7e7      	b.n	8008a88 <_raise_r+0x12>
 8008ab8:	2400      	movs	r4, #0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ac0:	4798      	blx	r3
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e7e0      	b.n	8008a88 <_raise_r+0x12>
	...

08008ac8 <raise>:
 8008ac8:	4b02      	ldr	r3, [pc, #8]	; (8008ad4 <raise+0xc>)
 8008aca:	4601      	mov	r1, r0
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	f7ff bfd2 	b.w	8008a76 <_raise_r>
 8008ad2:	bf00      	nop
 8008ad4:	20000018 	.word	0x20000018

08008ad8 <_kill_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	2300      	movs	r3, #0
 8008adc:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_kill_r+0x20>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	f7f9 fed2 	bl	800288e <_kill>
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	d102      	bne.n	8008af4 <_kill_r+0x1c>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	b103      	cbz	r3, 8008af4 <_kill_r+0x1c>
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	bf00      	nop
 8008af8:	200004d8 	.word	0x200004d8

08008afc <_getpid_r>:
 8008afc:	f7f9 bec0 	b.w	8002880 <_getpid>

08008b00 <__sread>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	460c      	mov	r4, r1
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	f000 f89c 	bl	8008c44 <_read_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	bfab      	itete	ge
 8008b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b12:	89a3      	ldrhlt	r3, [r4, #12]
 8008b14:	181b      	addge	r3, r3, r0
 8008b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b1a:	bfac      	ite	ge
 8008b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b1e:	81a3      	strhlt	r3, [r4, #12]
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <__swrite>:
 8008b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	461f      	mov	r7, r3
 8008b28:	898b      	ldrh	r3, [r1, #12]
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	05db      	lsls	r3, r3, #23
 8008b2e:	460c      	mov	r4, r1
 8008b30:	4616      	mov	r6, r2
 8008b32:	d505      	bpl.n	8008b40 <__swrite+0x1e>
 8008b34:	2302      	movs	r3, #2
 8008b36:	2200      	movs	r2, #0
 8008b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3c:	f000 f868 	bl	8008c10 <_lseek_r>
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	4632      	mov	r2, r6
 8008b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	f000 b817 	b.w	8008b88 <_write_r>

08008b5a <__sseek>:
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b62:	f000 f855 	bl	8008c10 <_lseek_r>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	bf15      	itete	ne
 8008b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b76:	81a3      	strheq	r3, [r4, #12]
 8008b78:	bf18      	it	ne
 8008b7a:	81a3      	strhne	r3, [r4, #12]
 8008b7c:	bd10      	pop	{r4, pc}

08008b7e <__sclose>:
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 b813 	b.w	8008bac <_close_r>
	...

08008b88 <_write_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	2200      	movs	r2, #0
 8008b92:	4d05      	ldr	r5, [pc, #20]	; (8008ba8 <_write_r+0x20>)
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f9 feb0 	bl	80028fc <_write>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_write_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_write_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	200004d8 	.word	0x200004d8

08008bac <_close_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4d05      	ldr	r5, [pc, #20]	; (8008bc8 <_close_r+0x1c>)
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f9 febc 	bl	8002934 <_close>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_close_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_close_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	200004d8 	.word	0x200004d8

08008bcc <_fstat_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_fstat_r+0x20>)
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	f7f9 feb6 	bl	800294a <_fstat>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d102      	bne.n	8008be8 <_fstat_r+0x1c>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	b103      	cbz	r3, 8008be8 <_fstat_r+0x1c>
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	bf00      	nop
 8008bec:	200004d8 	.word	0x200004d8

08008bf0 <_isatty_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4d05      	ldr	r5, [pc, #20]	; (8008c0c <_isatty_r+0x1c>)
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f9 feb4 	bl	8002968 <_isatty>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_isatty_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_isatty_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	200004d8 	.word	0x200004d8

08008c10 <_lseek_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4d05      	ldr	r5, [pc, #20]	; (8008c30 <_lseek_r+0x20>)
 8008c1c:	602a      	str	r2, [r5, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f7f9 feac 	bl	800297c <_lseek>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_lseek_r+0x1e>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_lseek_r+0x1e>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	200004d8 	.word	0x200004d8

08008c34 <_malloc_usable_size_r>:
 8008c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c38:	1f18      	subs	r0, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfbc      	itt	lt
 8008c3e:	580b      	ldrlt	r3, [r1, r0]
 8008c40:	18c0      	addlt	r0, r0, r3
 8008c42:	4770      	bx	lr

08008c44 <_read_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4d05      	ldr	r5, [pc, #20]	; (8008c64 <_read_r+0x20>)
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7f9 fe35 	bl	80028c2 <_read>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_read_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_read_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	200004d8 	.word	0x200004d8

08008c68 <_init>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr
