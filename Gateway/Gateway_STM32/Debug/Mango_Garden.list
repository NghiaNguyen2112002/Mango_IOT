
Mango_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009848  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009958  08009958  00019958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009f98  08009f98  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f98  08009f98  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f9c  08009f9c  00019f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001ec  0800a18c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800a18c  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128e8  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd9  00000000  00000000  00032afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00035ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00036d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afd7  00000000  00000000  00037f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d5a  00000000  00000000  00052ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094099  00000000  00000000  00069c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdcea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a4  00000000  00000000  000fdd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009940 	.word	0x08009940

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009940 	.word	0x08009940

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c6:	2afd      	cmp	r2, #253	; 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	; 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	; 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <__gesf2>:
 8000eb0:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb4:	e006      	b.n	8000ec4 <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__lesf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	e002      	b.n	8000ec4 <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__cmpsf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed4:	bf18      	it	ne
 8000ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eda:	d011      	beq.n	8000f00 <__cmpsf2+0x40>
 8000edc:	b001      	add	sp, #4
 8000ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee2:	bf18      	it	ne
 8000ee4:	ea90 0f01 	teqne	r0, r1
 8000ee8:	bf58      	it	pl
 8000eea:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eee:	bf88      	it	hi
 8000ef0:	17c8      	asrhi	r0, r1, #31
 8000ef2:	bf38      	it	cc
 8000ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef8:	bf18      	it	ne
 8000efa:	f040 0001 	orrne.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f04:	d102      	bne.n	8000f0c <__cmpsf2+0x4c>
 8000f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0a:	d105      	bne.n	8000f18 <__cmpsf2+0x58>
 8000f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f10:	d1e4      	bne.n	8000edc <__cmpsf2+0x1c>
 8000f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f16:	d0e1      	beq.n	8000edc <__cmpsf2+0x1c>
 8000f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_cfrcmple>:
 8000f20:	4684      	mov	ip, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4661      	mov	r1, ip
 8000f26:	e7ff      	b.n	8000f28 <__aeabi_cfcmpeq>

08000f28 <__aeabi_cfcmpeq>:
 8000f28:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2a:	f7ff ffc9 	bl	8000ec0 <__cmpsf2>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	bf48      	it	mi
 8000f32:	f110 0f00 	cmnmi.w	r0, #0
 8000f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f38 <__aeabi_fcmpeq>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff fff4 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f40:	bf0c      	ite	eq
 8000f42:	2001      	moveq	r0, #1
 8000f44:	2000      	movne	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmplt>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffea 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f54:	bf34      	ite	cc
 8000f56:	2001      	movcc	r0, #1
 8000f58:	2000      	movcs	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmple>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffe0 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpge>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffd2 	bl	8000f20 <__aeabi_cfrcmple>
 8000f7c:	bf94      	ite	ls
 8000f7e:	2001      	movls	r0, #1
 8000f80:	2000      	movhi	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmpgt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffc8 	bl	8000f20 <__aeabi_cfrcmple>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpun>:
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	d102      	bne.n	8000fb0 <__aeabi_fcmpun+0x14>
 8000faa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fcmpun+0x26>
 8000fb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_fcmpun+0x20>
 8000fb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fba:	d102      	bne.n	8000fc2 <__aeabi_fcmpun+0x26>
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0001 	mov.w	r0, #1
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_f2uiz>:
 8000fc8:	0042      	lsls	r2, r0, #1
 8000fca:	d20e      	bcs.n	8000fea <__aeabi_f2uiz+0x22>
 8000fcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fd0:	d30b      	bcc.n	8000fea <__aeabi_f2uiz+0x22>
 8000fd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fda:	d409      	bmi.n	8000ff0 <__aeabi_f2uiz+0x28>
 8000fdc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr
 8000ff0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff4:	d101      	bne.n	8000ffa <__aeabi_f2uiz+0x32>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	d102      	bne.n	8001000 <__aeabi_f2uiz+0x38>
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	4770      	bx	lr
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_d2lz>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4605      	mov	r5, r0
 800100c:	460c      	mov	r4, r1
 800100e:	2200      	movs	r2, #0
 8001010:	2300      	movs	r3, #0
 8001012:	4628      	mov	r0, r5
 8001014:	4621      	mov	r1, r4
 8001016:	f7ff fd8f 	bl	8000b38 <__aeabi_dcmplt>
 800101a:	b928      	cbnz	r0, 8001028 <__aeabi_d2lz+0x20>
 800101c:	4628      	mov	r0, r5
 800101e:	4621      	mov	r1, r4
 8001020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001024:	f000 b80a 	b.w	800103c <__aeabi_d2ulz>
 8001028:	4628      	mov	r0, r5
 800102a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800102e:	f000 f805 	bl	800103c <__aeabi_d2ulz>
 8001032:	4240      	negs	r0, r0
 8001034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001038:	bd38      	pop	{r3, r4, r5, pc}
 800103a:	bf00      	nop

0800103c <__aeabi_d2ulz>:
 800103c:	b5d0      	push	{r4, r6, r7, lr}
 800103e:	2200      	movs	r2, #0
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__aeabi_d2ulz+0x34>)
 8001042:	4606      	mov	r6, r0
 8001044:	460f      	mov	r7, r1
 8001046:	f7ff fb05 	bl	8000654 <__aeabi_dmul>
 800104a:	f7ff fdb3 	bl	8000bb4 <__aeabi_d2uiz>
 800104e:	4604      	mov	r4, r0
 8001050:	f7ff fa86 	bl	8000560 <__aeabi_ui2d>
 8001054:	2200      	movs	r2, #0
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <__aeabi_d2ulz+0x38>)
 8001058:	f7ff fafc 	bl	8000654 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4630      	mov	r0, r6
 8001062:	4639      	mov	r1, r7
 8001064:	f7ff f93e 	bl	80002e4 <__aeabi_dsub>
 8001068:	f7ff fda4 	bl	8000bb4 <__aeabi_d2uiz>
 800106c:	4621      	mov	r1, r4
 800106e:	bdd0      	pop	{r4, r6, r7, pc}
 8001070:	3df00000 	.word	0x3df00000
 8001074:	41f00000 	.word	0x41f00000

08001078 <ConvertMessageToJsonString>:

char msg[100];
char msg_json[30];


char* ConvertMessageToJsonString(void){
 8001078:	b4b0      	push	{r4, r5, r7}
 800107a:	af00      	add	r7, sp, #0
	strcpy(msg_json, "{\"ID\":100,\"RELAY\":");
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <ConvertMessageToJsonString+0x40>)
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <ConvertMessageToJsonString+0x44>)
 8001080:	4614      	mov	r4, r2
 8001082:	461d      	mov	r5, r3
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	8022      	strh	r2, [r4, #0]
 800108e:	3402      	adds	r4, #2
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	7023      	strb	r3, [r4, #0]
	msg_json[18] = _Data_gateway.relay + '0';
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <ConvertMessageToJsonString+0x48>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3330      	adds	r3, #48	; 0x30
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <ConvertMessageToJsonString+0x40>)
 800109e:	749a      	strb	r2, [r3, #18]
	strcpy(msg_json + 19,"}\n");
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <ConvertMessageToJsonString+0x4c>)
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <ConvertMessageToJsonString+0x50>)
 80010a4:	8811      	ldrh	r1, [r2, #0]
 80010a6:	7892      	ldrb	r2, [r2, #2]
 80010a8:	8019      	strh	r1, [r3, #0]
 80010aa:	709a      	strb	r2, [r3, #2]

	return msg_json;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <ConvertMessageToJsonString+0x40>)
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bcb0      	pop	{r4, r5, r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000270 	.word	0x20000270
 80010bc:	08009958 	.word	0x08009958
 80010c0:	200002b8 	.word	0x200002b8
 80010c4:	20000283 	.word	0x20000283
 80010c8:	0800996c 	.word	0x0800996c

080010cc <ProcessMsg>:

void ProcessMsg(char* msg){
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, node_id;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
		10    "P"
		11    30
		12    "K"
		13    40
*/
	token = strtok(msg, ":,{}");
 80010d8:	4951      	ldr	r1, [pc, #324]	; (8001220 <ProcessMsg+0x154>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f006 fa16 	bl	800750c <strtok>
 80010e0:	60b8      	str	r0, [r7, #8]

	for(i = 0; (i < 100) && (token != NULL); i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e090      	b.n	800120a <ProcessMsg+0x13e>
		if(i == 1) {
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d118      	bne.n	8001120 <ProcessMsg+0x54>
			node_id = atoi(token);
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f005 fa5b 	bl	80065aa <atoi>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73bb      	strb	r3, [r7, #14]
			_Data_node[node_id].node_id = node_id;
 80010f8:	7bba      	ldrb	r2, [r7, #14]
 80010fa:	494a      	ldr	r1, [pc, #296]	; (8001224 <ProcessMsg+0x158>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	7bba      	ldrb	r2, [r7, #14]
 8001108:	701a      	strb	r2, [r3, #0]
			_Data_node[node_id].is_connected = 1;
 800110a:	7bba      	ldrb	r2, [r7, #14]
 800110c:	4945      	ldr	r1, [pc, #276]	; (8001224 <ProcessMsg+0x158>)
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3310      	adds	r3, #16
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e06c      	b.n	80011fa <ProcessMsg+0x12e>
		}
		else if(i == 3) _Data_node[node_id].temp = atoff(token);
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d10d      	bne.n	8001142 <ProcessMsg+0x76>
 8001126:	7bbc      	ldrb	r4, [r7, #14]
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f005 fa3b 	bl	80065a4 <atoff>
 800112e:	4602      	mov	r2, r0
 8001130:	493c      	ldr	r1, [pc, #240]	; (8001224 <ProcessMsg+0x158>)
 8001132:	4623      	mov	r3, r4
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4423      	add	r3, r4
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3304      	adds	r3, #4
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e05b      	b.n	80011fa <ProcessMsg+0x12e>
		else if(i == 5) _Data_node[node_id].humid = atoff(token);
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d10d      	bne.n	8001164 <ProcessMsg+0x98>
 8001148:	7bbc      	ldrb	r4, [r7, #14]
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f005 fa2a 	bl	80065a4 <atoff>
 8001150:	4602      	mov	r2, r0
 8001152:	4934      	ldr	r1, [pc, #208]	; (8001224 <ProcessMsg+0x158>)
 8001154:	4623      	mov	r3, r4
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4423      	add	r3, r4
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3308      	adds	r3, #8
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e04a      	b.n	80011fa <ProcessMsg+0x12e>
		else if(i == 7) _Data_node[node_id].adc = atoi(token);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d10f      	bne.n	800118a <ProcessMsg+0xbe>
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f005 fa1d 	bl	80065aa <atoi>
 8001170:	4603      	mov	r3, r0
 8001172:	7bba      	ldrb	r2, [r7, #14]
 8001174:	b2d8      	uxtb	r0, r3
 8001176:	492b      	ldr	r1, [pc, #172]	; (8001224 <ProcessMsg+0x158>)
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	330c      	adds	r3, #12
 8001184:	4602      	mov	r2, r0
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e037      	b.n	80011fa <ProcessMsg+0x12e>
		else if(i == 9) _Data_node[node_id].nito = atoi(token);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b09      	cmp	r3, #9
 800118e:	d10f      	bne.n	80011b0 <ProcessMsg+0xe4>
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f005 fa0a 	bl	80065aa <atoi>
 8001196:	4603      	mov	r3, r0
 8001198:	7bba      	ldrb	r2, [r7, #14]
 800119a:	b2d8      	uxtb	r0, r3
 800119c:	4921      	ldr	r1, [pc, #132]	; (8001224 <ProcessMsg+0x158>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	330d      	adds	r3, #13
 80011aa:	4602      	mov	r2, r0
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e024      	b.n	80011fa <ProcessMsg+0x12e>
		else if(i == 11) _Data_node[node_id].photpho = atoi(token);
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b0b      	cmp	r3, #11
 80011b4:	d10f      	bne.n	80011d6 <ProcessMsg+0x10a>
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f005 f9f7 	bl	80065aa <atoi>
 80011bc:	4603      	mov	r3, r0
 80011be:	7bba      	ldrb	r2, [r7, #14]
 80011c0:	b2d8      	uxtb	r0, r3
 80011c2:	4918      	ldr	r1, [pc, #96]	; (8001224 <ProcessMsg+0x158>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	330e      	adds	r3, #14
 80011d0:	4602      	mov	r2, r0
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e011      	b.n	80011fa <ProcessMsg+0x12e>
		else if(i == 13) _Data_node[node_id].kali = atoi(token);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b0d      	cmp	r3, #13
 80011da:	d10e      	bne.n	80011fa <ProcessMsg+0x12e>
 80011dc:	68b8      	ldr	r0, [r7, #8]
 80011de:	f005 f9e4 	bl	80065aa <atoi>
 80011e2:	4603      	mov	r3, r0
 80011e4:	7bba      	ldrb	r2, [r7, #14]
 80011e6:	b2d8      	uxtb	r0, r3
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <ProcessMsg+0x158>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	330f      	adds	r3, #15
 80011f6:	4602      	mov	r2, r0
 80011f8:	701a      	strb	r2, [r3, #0]
		token = strtok(NULL, ":,{}");
 80011fa:	4909      	ldr	r1, [pc, #36]	; (8001220 <ProcessMsg+0x154>)
 80011fc:	2000      	movs	r0, #0
 80011fe:	f006 f985 	bl	800750c <strtok>
 8001202:	60b8      	str	r0, [r7, #8]
	for(i = 0; (i < 100) && (token != NULL); i++){
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b63      	cmp	r3, #99	; 0x63
 800120e:	d803      	bhi.n	8001218 <ProcessMsg+0x14c>
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f47f af68 	bne.w	80010e8 <ProcessMsg+0x1c>
	}
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	08009970 	.word	0x08009970
 8001224:	20000290 	.word	0x20000290

08001228 <SystemMode>:

uint8_t SystemMode(void){
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	return mode_sys;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <SystemMode+0x10>)
 800122e:	781b      	ldrb	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	2000020a 	.word	0x2000020a

0800123c <FSM_Init>:
//==================HIGH LEVEL FUNCTION==================//
void FSM_Init(void){
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	mode_data = INIT;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <FSM_Init+0x2c>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	mode_lcd = INIT;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <FSM_Init+0x30>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	mode_sys = INIT;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <FSM_Init+0x34>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]

	node_turn = 0;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <FSM_Init+0x38>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	_time_screen = 50;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <FSM_Init+0x3c>)
 800125a:	2232      	movs	r2, #50	; 0x32
 800125c:	801a      	strh	r2, [r3, #0]

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000209 	.word	0x20000209
 800126c:	20000208 	.word	0x20000208
 8001270:	2000020a 	.word	0x2000020a
 8001274:	2000020b 	.word	0x2000020b
 8001278:	200002c0 	.word	0x200002c0

0800127c <FSM_LcdDisplay>:

void FSM_LcdDisplay(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	switch(mode_lcd){
 8001280:	4bbe      	ldr	r3, [pc, #760]	; (800157c <FSM_LcdDisplay+0x300>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b08      	cmp	r3, #8
 8001286:	f200 82fe 	bhi.w	8001886 <FSM_LcdDisplay+0x60a>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <FSM_LcdDisplay+0x14>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012b5 	.word	0x080012b5
 8001294:	080012ef 	.word	0x080012ef
 8001298:	08001415 	.word	0x08001415
 800129c:	08001513 	.word	0x08001513
 80012a0:	08001651 	.word	0x08001651
 80012a4:	0800170f 	.word	0x0800170f
 80012a8:	08001799 	.word	0x08001799
 80012ac:	080017b7 	.word	0x080017b7
 80012b0:	080017dd 	.word	0x080017dd
	case INIT:
		CLCD_PrintStringBuffer(0, 0, SCREEN_INIT_0);
 80012b4:	4ab2      	ldr	r2, [pc, #712]	; (8001580 <FSM_LcdDisplay+0x304>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 feb1 	bl	8002020 <CLCD_PrintStringBuffer>
		CLCD_PrintStringBuffer(1, 0, SCREEN_INIT_1);
 80012be:	4ab1      	ldr	r2, [pc, #708]	; (8001584 <FSM_LcdDisplay+0x308>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 feac 	bl	8002020 <CLCD_PrintStringBuffer>

		if(_time_screen < 5){
 80012c8:	4baf      	ldr	r3, [pc, #700]	; (8001588 <FSM_LcdDisplay+0x30c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	f200 82de 	bhi.w	800188e <FSM_LcdDisplay+0x612>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 80012d2:	4aae      	ldr	r2, [pc, #696]	; (800158c <FSM_LcdDisplay+0x310>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fea2 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 80012dc:	4aa9      	ldr	r2, [pc, #676]	; (8001584 <FSM_LcdDisplay+0x308>)
 80012de:	2100      	movs	r1, #0
 80012e0:	2001      	movs	r0, #1
 80012e2:	f000 fe9d 	bl	8002020 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONNECT_WF;
 80012e6:	4ba5      	ldr	r3, [pc, #660]	; (800157c <FSM_LcdDisplay+0x300>)
 80012e8:	2208      	movs	r2, #8
 80012ea:	701a      	strb	r2, [r3, #0]
//			mode_lcd = READY_DISPLAY;
		}
		break;
 80012ec:	e2cf      	b.n	800188e <FSM_LcdDisplay+0x612>
	case READY_DISPLAY:

		CLCD_PrintCharBuffer(1, 12 + (_counter_time_elapsed/10) % 4, '.');
 80012ee:	4ba8      	ldr	r3, [pc, #672]	; (8001590 <FSM_LcdDisplay+0x314>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	4aa8      	ldr	r2, [pc, #672]	; (8001594 <FSM_LcdDisplay+0x318>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	330c      	adds	r3, #12
 8001306:	b2db      	uxtb	r3, r3
 8001308:	222e      	movs	r2, #46	; 0x2e
 800130a:	4619      	mov	r1, r3
 800130c:	2001      	movs	r0, #1
 800130e:	f000 fe4b 	bl	8001fa8 <CLCD_PrintCharBuffer>
		if((_counter_time_elapsed/10) % 4 == 3) CLCD_PrintStringBuffer(1, 0, SCREEN_READY_DISPLAY_1);
 8001312:	4b9f      	ldr	r3, [pc, #636]	; (8001590 <FSM_LcdDisplay+0x314>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4a9f      	ldr	r2, [pc, #636]	; (8001594 <FSM_LcdDisplay+0x318>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	b29b      	uxth	r3, r3
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d104      	bne.n	8001334 <FSM_LcdDisplay+0xb8>
 800132a:	4a9b      	ldr	r2, [pc, #620]	; (8001598 <FSM_LcdDisplay+0x31c>)
 800132c:	2100      	movs	r1, #0
 800132e:	2001      	movs	r0, #1
 8001330:	f000 fe76 	bl	8002020 <CLCD_PrintStringBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001334:	f7ff ff78 	bl	8001228 <SystemMode>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10d      	bne.n	800135a <FSM_LcdDisplay+0xde>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800133e:	4a93      	ldr	r2, [pc, #588]	; (800158c <FSM_LcdDisplay+0x310>)
 8001340:	2100      	movs	r1, #0
 8001342:	2000      	movs	r0, #0
 8001344:	f000 fe6c 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001348:	4a8e      	ldr	r2, [pc, #568]	; (8001584 <FSM_LcdDisplay+0x308>)
 800134a:	2100      	movs	r1, #0
 800134c:	2001      	movs	r0, #1
 800134e:	f000 fe67 	bl	8002020 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONNECT_WF;
 8001352:	4b8a      	ldr	r3, [pc, #552]	; (800157c <FSM_LcdDisplay+0x300>)
 8001354:	2208      	movs	r2, #8
 8001356:	701a      	strb	r2, [r3, #0]
			mode_lcd = DISPLAY_DHT;
		}
		else{
			mode_lcd = TURN_NEXT_NODE;
		}
		break;
 8001358:	e2a6      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		else if(SystemMode() == SYS_CONFIG_WF){
 800135a:	f7ff ff65 	bl	8001228 <SystemMode>
 800135e:	4603      	mov	r3, r0
 8001360:	2b02      	cmp	r3, #2
 8001362:	d10d      	bne.n	8001380 <FSM_LcdDisplay+0x104>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001364:	4a8d      	ldr	r2, [pc, #564]	; (800159c <FSM_LcdDisplay+0x320>)
 8001366:	2100      	movs	r1, #0
 8001368:	2000      	movs	r0, #0
 800136a:	f000 fe59 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800136e:	4a85      	ldr	r2, [pc, #532]	; (8001584 <FSM_LcdDisplay+0x308>)
 8001370:	2100      	movs	r1, #0
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fe54 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <FSM_LcdDisplay+0x300>)
 800137a:	2207      	movs	r2, #7
 800137c:	701a      	strb	r2, [r3, #0]
		break;
 800137e:	e293      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		else if(_Data_node[node_turn].is_connected){
 8001380:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <FSM_LcdDisplay+0x324>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	4a87      	ldr	r2, [pc, #540]	; (80015a4 <FSM_LcdDisplay+0x328>)
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	3310      	adds	r3, #16
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d038      	beq.n	800140c <FSM_LcdDisplay+0x190>
			_time_screen = TIME_SCREEN;
 800139a:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <FSM_LcdDisplay+0x30c>)
 800139c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013a0:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_TEMP_HUMI_0);
 80013a2:	4a81      	ldr	r2, [pc, #516]	; (80015a8 <FSM_LcdDisplay+0x32c>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fe3a 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TEMP_HUMI_1);
 80013ac:	4a7f      	ldr	r2, [pc, #508]	; (80015ac <FSM_LcdDisplay+0x330>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 fe35 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(0, INDEX_LCD_CEL_SYMBOL, 0xDF);
 80013b6:	22df      	movs	r2, #223	; 0xdf
 80013b8:	210e      	movs	r1, #14
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 fdf4 	bl	8001fa8 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
 80013c0:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <FSM_LcdDisplay+0x324>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <FSM_LcdDisplay+0x328>)
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3330      	adds	r3, #48	; 0x30
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 fde3 	bl	8001fa8 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');
 80013e2:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <FSM_LcdDisplay+0x324>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <FSM_LcdDisplay+0x328>)
 80013ea:	460b      	mov	r3, r1
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3330      	adds	r3, #48	; 0x30
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	2001      	movs	r0, #1
 8001400:	f000 fdd2 	bl	8001fa8 <CLCD_PrintCharBuffer>
			mode_lcd = DISPLAY_DHT;
 8001404:	4b5d      	ldr	r3, [pc, #372]	; (800157c <FSM_LcdDisplay+0x300>)
 8001406:	2202      	movs	r2, #2
 8001408:	701a      	strb	r2, [r3, #0]
		break;
 800140a:	e24d      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
			mode_lcd = TURN_NEXT_NODE;
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <FSM_LcdDisplay+0x300>)
 800140e:	2206      	movs	r2, #6
 8001410:	701a      	strb	r2, [r3, #0]
		break;
 8001412:	e249      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
	case DISPLAY_DHT:
		CLCD_PrintFloatBuffer(0, INDEX_LCD_TEMP, _Data_node[node_turn].temp);
 8001414:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <FSM_LcdDisplay+0x324>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	4a62      	ldr	r2, [pc, #392]	; (80015a4 <FSM_LcdDisplay+0x328>)
 800141c:	460b      	mov	r3, r1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	2109      	movs	r1, #9
 800142e:	2000      	movs	r0, #0
 8001430:	f000 fea0 	bl	8002174 <CLCD_PrintFloatBuffer>
		CLCD_PrintFloatBuffer(1, INDEX_LCD_HUMI, _Data_node[node_turn].humid);
 8001434:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <FSM_LcdDisplay+0x324>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4a5a      	ldr	r2, [pc, #360]	; (80015a4 <FSM_LcdDisplay+0x328>)
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3308      	adds	r3, #8
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	2109      	movs	r1, #9
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fe90 	bl	8002174 <CLCD_PrintFloatBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001454:	f7ff fee8 	bl	8001228 <SystemMode>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10d      	bne.n	800147a <FSM_LcdDisplay+0x1fe>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <FSM_LcdDisplay+0x310>)
 8001460:	2100      	movs	r1, #0
 8001462:	2000      	movs	r0, #0
 8001464:	f000 fddc 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001468:	4a46      	ldr	r2, [pc, #280]	; (8001584 <FSM_LcdDisplay+0x308>)
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f000 fdd7 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <FSM_LcdDisplay+0x300>)
 8001474:	2208      	movs	r2, #8
 8001476:	701a      	strb	r2, [r3, #0]
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');

			mode_lcd = DISPLAY_SOILHUMID_NITO;
		}
		break;
 8001478:	e20b      	b.n	8001892 <FSM_LcdDisplay+0x616>
		else if(SystemMode() == SYS_CONFIG_WF){
 800147a:	f7ff fed5 	bl	8001228 <SystemMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b02      	cmp	r3, #2
 8001482:	d10d      	bne.n	80014a0 <FSM_LcdDisplay+0x224>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001484:	4a45      	ldr	r2, [pc, #276]	; (800159c <FSM_LcdDisplay+0x320>)
 8001486:	2100      	movs	r1, #0
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fdc9 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800148e:	4a3d      	ldr	r2, [pc, #244]	; (8001584 <FSM_LcdDisplay+0x308>)
 8001490:	2100      	movs	r1, #0
 8001492:	2001      	movs	r0, #1
 8001494:	f000 fdc4 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <FSM_LcdDisplay+0x300>)
 800149a:	2207      	movs	r2, #7
 800149c:	701a      	strb	r2, [r3, #0]
		break;
 800149e:	e1f8      	b.n	8001892 <FSM_LcdDisplay+0x616>
		else if(_time_screen < 5){
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <FSM_LcdDisplay+0x30c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	f200 81f4 	bhi.w	8001892 <FSM_LcdDisplay+0x616>
			_time_screen = TIME_SCREEN;
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <FSM_LcdDisplay+0x30c>)
 80014ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014b0:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_SOILHUMID_NITO_0);
 80014b2:	4a3f      	ldr	r2, [pc, #252]	; (80015b0 <FSM_LcdDisplay+0x334>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fdb2 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_SOILHUMID_NITO_1);
 80014bc:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <FSM_LcdDisplay+0x338>)
 80014be:	2100      	movs	r1, #0
 80014c0:	2001      	movs	r0, #1
 80014c2:	f000 fdad 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <FSM_LcdDisplay+0x324>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <FSM_LcdDisplay+0x328>)
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3330      	adds	r3, #48	; 0x30
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fd60 	bl	8001fa8 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <FSM_LcdDisplay+0x324>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <FSM_LcdDisplay+0x328>)
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3330      	adds	r3, #48	; 0x30
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	2100      	movs	r1, #0
 8001504:	2001      	movs	r0, #1
 8001506:	f000 fd4f 	bl	8001fa8 <CLCD_PrintCharBuffer>
			mode_lcd = DISPLAY_SOILHUMID_NITO;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <FSM_LcdDisplay+0x300>)
 800150c:	2203      	movs	r2, #3
 800150e:	701a      	strb	r2, [r3, #0]
		break;
 8001510:	e1bf      	b.n	8001892 <FSM_LcdDisplay+0x616>
	case DISPLAY_SOILHUMID_NITO:
		CLCD_PrintNumBuffer(0, INDEX_LCD_SHUMI, _Data_node[node_turn].adc);
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <FSM_LcdDisplay+0x324>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <FSM_LcdDisplay+0x328>)
 800151a:	460b      	mov	r3, r1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	330c      	adds	r3, #12
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b21b      	sxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	2109      	movs	r1, #9
 800152e:	2000      	movs	r0, #0
 8001530:	f000 fdac 	bl	800208c <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(1, INDEX_LCD_N, _Data_node[node_turn].nito);
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <FSM_LcdDisplay+0x324>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <FSM_LcdDisplay+0x328>)
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	330d      	adds	r3, #13
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b21b      	sxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	2105      	movs	r1, #5
 8001550:	2001      	movs	r0, #1
 8001552:	f000 fd9b 	bl	800208c <CLCD_PrintNumBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001556:	f7ff fe67 	bl	8001228 <SystemMode>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d12b      	bne.n	80015b8 <FSM_LcdDisplay+0x33c>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <FSM_LcdDisplay+0x310>)
 8001562:	2100      	movs	r1, #0
 8001564:	2000      	movs	r0, #0
 8001566:	f000 fd5b 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <FSM_LcdDisplay+0x308>)
 800156c:	2100      	movs	r1, #0
 800156e:	2001      	movs	r0, #1
 8001570:	f000 fd56 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <FSM_LcdDisplay+0x300>)
 8001576:	2208      	movs	r2, #8
 8001578:	701a      	strb	r2, [r3, #0]
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');

			mode_lcd = DISPLAY_PHOTPHO_KALI;
		}
		break;
 800157a:	e18c      	b.n	8001896 <FSM_LcdDisplay+0x61a>
 800157c:	20000208 	.word	0x20000208
 8001580:	08009978 	.word	0x08009978
 8001584:	0800998c 	.word	0x0800998c
 8001588:	200002c0 	.word	0x200002c0
 800158c:	080099a0 	.word	0x080099a0
 8001590:	200002c4 	.word	0x200002c4
 8001594:	cccccccd 	.word	0xcccccccd
 8001598:	080099b4 	.word	0x080099b4
 800159c:	080099c8 	.word	0x080099c8
 80015a0:	2000020b 	.word	0x2000020b
 80015a4:	20000290 	.word	0x20000290
 80015a8:	080099dc 	.word	0x080099dc
 80015ac:	080099f0 	.word	0x080099f0
 80015b0:	08009a04 	.word	0x08009a04
 80015b4:	08009a18 	.word	0x08009a18
		else if(SystemMode() == SYS_CONFIG_WF){
 80015b8:	f7ff fe36 	bl	8001228 <SystemMode>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d10d      	bne.n	80015de <FSM_LcdDisplay+0x362>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 80015c2:	4aba      	ldr	r2, [pc, #744]	; (80018ac <FSM_LcdDisplay+0x630>)
 80015c4:	2100      	movs	r1, #0
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 fd2a 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 80015cc:	4ab8      	ldr	r2, [pc, #736]	; (80018b0 <FSM_LcdDisplay+0x634>)
 80015ce:	2100      	movs	r1, #0
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 fd25 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 80015d6:	4bb7      	ldr	r3, [pc, #732]	; (80018b4 <FSM_LcdDisplay+0x638>)
 80015d8:	2207      	movs	r2, #7
 80015da:	701a      	strb	r2, [r3, #0]
		break;
 80015dc:	e15b      	b.n	8001896 <FSM_LcdDisplay+0x61a>
		else if(_time_screen < 5){
 80015de:	4bb6      	ldr	r3, [pc, #728]	; (80018b8 <FSM_LcdDisplay+0x63c>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	f200 8157 	bhi.w	8001896 <FSM_LcdDisplay+0x61a>
			_time_screen = TIME_SCREEN;
 80015e8:	4bb3      	ldr	r3, [pc, #716]	; (80018b8 <FSM_LcdDisplay+0x63c>)
 80015ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015ee:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_PHOTPHO_KALI_0);
 80015f0:	4ab2      	ldr	r2, [pc, #712]	; (80018bc <FSM_LcdDisplay+0x640>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 fd13 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_PHOTPHO_KALI_1);
 80015fa:	4ab1      	ldr	r2, [pc, #708]	; (80018c0 <FSM_LcdDisplay+0x644>)
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fd0e 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(0, 0, _Data_node[node_turn].node_id + '0');
 8001604:	4baf      	ldr	r3, [pc, #700]	; (80018c4 <FSM_LcdDisplay+0x648>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	4aaf      	ldr	r2, [pc, #700]	; (80018c8 <FSM_LcdDisplay+0x64c>)
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	3330      	adds	r3, #48	; 0x30
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	2000      	movs	r0, #0
 8001622:	f000 fcc1 	bl	8001fa8 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, 0, _Data_node[node_turn].node_id + '0');
 8001626:	4ba7      	ldr	r3, [pc, #668]	; (80018c4 <FSM_LcdDisplay+0x648>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4aa6      	ldr	r2, [pc, #664]	; (80018c8 <FSM_LcdDisplay+0x64c>)
 800162e:	460b      	mov	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3330      	adds	r3, #48	; 0x30
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	2100      	movs	r1, #0
 8001642:	2001      	movs	r0, #1
 8001644:	f000 fcb0 	bl	8001fa8 <CLCD_PrintCharBuffer>
			mode_lcd = DISPLAY_PHOTPHO_KALI;
 8001648:	4b9a      	ldr	r3, [pc, #616]	; (80018b4 <FSM_LcdDisplay+0x638>)
 800164a:	2204      	movs	r2, #4
 800164c:	701a      	strb	r2, [r3, #0]
		break;
 800164e:	e122      	b.n	8001896 <FSM_LcdDisplay+0x61a>
	case DISPLAY_PHOTPHO_KALI:
		CLCD_PrintNumBuffer(0, INDEX_LCD_P, _Data_node[node_turn].photpho);
 8001650:	4b9c      	ldr	r3, [pc, #624]	; (80018c4 <FSM_LcdDisplay+0x648>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4a9c      	ldr	r2, [pc, #624]	; (80018c8 <FSM_LcdDisplay+0x64c>)
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	330e      	adds	r3, #14
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b21b      	sxth	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	2105      	movs	r1, #5
 800166c:	2000      	movs	r0, #0
 800166e:	f000 fd0d 	bl	800208c <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(1, INDEX_LCD_K, _Data_node[node_turn].kali);
 8001672:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <FSM_LcdDisplay+0x648>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4a93      	ldr	r2, [pc, #588]	; (80018c8 <FSM_LcdDisplay+0x64c>)
 800167a:	460b      	mov	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	330f      	adds	r3, #15
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b21b      	sxth	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	2105      	movs	r1, #5
 800168e:	2001      	movs	r0, #1
 8001690:	f000 fcfc 	bl	800208c <CLCD_PrintNumBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001694:	f7ff fdc8 	bl	8001228 <SystemMode>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10d      	bne.n	80016ba <FSM_LcdDisplay+0x43e>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800169e:	4a8b      	ldr	r2, [pc, #556]	; (80018cc <FSM_LcdDisplay+0x650>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 fcbc 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 80016a8:	4a81      	ldr	r2, [pc, #516]	; (80018b0 <FSM_LcdDisplay+0x634>)
 80016aa:	2100      	movs	r1, #0
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fcb7 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 80016b2:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <FSM_LcdDisplay+0x638>)
 80016b4:	2208      	movs	r2, #8
 80016b6:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_RELAY_CUR_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_RELAY_CUR_1);

			mode_lcd = DISPLAY_RELAY_CUR;
		}
		break;
 80016b8:	e0ef      	b.n	800189a <FSM_LcdDisplay+0x61e>
		else if(SystemMode() == SYS_CONFIG_WF){
 80016ba:	f7ff fdb5 	bl	8001228 <SystemMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d10d      	bne.n	80016e0 <FSM_LcdDisplay+0x464>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 80016c4:	4a79      	ldr	r2, [pc, #484]	; (80018ac <FSM_LcdDisplay+0x630>)
 80016c6:	2100      	movs	r1, #0
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 fca9 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 80016ce:	4a78      	ldr	r2, [pc, #480]	; (80018b0 <FSM_LcdDisplay+0x634>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 fca4 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONFIG_WF;
 80016d8:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <FSM_LcdDisplay+0x638>)
 80016da:	2207      	movs	r2, #7
 80016dc:	701a      	strb	r2, [r3, #0]
		break;
 80016de:	e0dc      	b.n	800189a <FSM_LcdDisplay+0x61e>
		else if(_time_screen < 5){
 80016e0:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <FSM_LcdDisplay+0x63c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	f200 80d8 	bhi.w	800189a <FSM_LcdDisplay+0x61e>
			_time_screen = TIME_SCREEN;
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <FSM_LcdDisplay+0x63c>)
 80016ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016f0:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_RELAY_CUR_0);
 80016f2:	4a77      	ldr	r2, [pc, #476]	; (80018d0 <FSM_LcdDisplay+0x654>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 fc92 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_RELAY_CUR_1);
 80016fc:	4a75      	ldr	r2, [pc, #468]	; (80018d4 <FSM_LcdDisplay+0x658>)
 80016fe:	2100      	movs	r1, #0
 8001700:	2001      	movs	r0, #1
 8001702:	f000 fc8d 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_RELAY_CUR;
 8001706:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <FSM_LcdDisplay+0x638>)
 8001708:	2205      	movs	r2, #5
 800170a:	701a      	strb	r2, [r3, #0]
		break;
 800170c:	e0c5      	b.n	800189a <FSM_LcdDisplay+0x61e>
	case DISPLAY_RELAY_CUR:
		CLCD_PrintStringBuffer(0, INDEX_LCD_RELAY, RELAYSTATESTR(_Data_gateway.relay));
 800170e:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <FSM_LcdDisplay+0x65c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <FSM_LcdDisplay+0x49e>
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <FSM_LcdDisplay+0x660>)
 8001718:	e000      	b.n	800171c <FSM_LcdDisplay+0x4a0>
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <FSM_LcdDisplay+0x664>)
 800171c:	461a      	mov	r2, r3
 800171e:	2107      	movs	r1, #7
 8001720:	2000      	movs	r0, #0
 8001722:	f000 fc7d 	bl	8002020 <CLCD_PrintStringBuffer>
		CLCD_PrintFloatBuffer(1, INDEX_LCD_CUR, _Data_gateway.cur);
 8001726:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <FSM_LcdDisplay+0x65c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	2105      	movs	r1, #5
 800172e:	2001      	movs	r0, #1
 8001730:	f000 fd20 	bl	8002174 <CLCD_PrintFloatBuffer>

		if(SystemMode() == SYS_CONNECT_WF){
 8001734:	f7ff fd78 	bl	8001228 <SystemMode>
 8001738:	4603      	mov	r3, r0
 800173a:	2b01      	cmp	r3, #1
 800173c:	d10d      	bne.n	800175a <FSM_LcdDisplay+0x4de>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 800173e:	4a63      	ldr	r2, [pc, #396]	; (80018cc <FSM_LcdDisplay+0x650>)
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f000 fc6c 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 8001748:	4a59      	ldr	r2, [pc, #356]	; (80018b0 <FSM_LcdDisplay+0x634>)
 800174a:	2100      	movs	r1, #0
 800174c:	2001      	movs	r0, #1
 800174e:	f000 fc67 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = DISPLAY_CONNECT_WF;
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <FSM_LcdDisplay+0x638>)
 8001754:	2208      	movs	r2, #8
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e011      	b.n	800177e <FSM_LcdDisplay+0x502>
		}
		else if(SystemMode() == SYS_CONFIG_WF){
 800175a:	f7ff fd65 	bl	8001228 <SystemMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b02      	cmp	r3, #2
 8001762:	d10c      	bne.n	800177e <FSM_LcdDisplay+0x502>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001764:	4a51      	ldr	r2, [pc, #324]	; (80018ac <FSM_LcdDisplay+0x630>)
 8001766:	2100      	movs	r1, #0
 8001768:	2000      	movs	r0, #0
 800176a:	f000 fc59 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800176e:	4a50      	ldr	r2, [pc, #320]	; (80018b0 <FSM_LcdDisplay+0x634>)
 8001770:	2100      	movs	r1, #0
 8001772:	2001      	movs	r0, #1
 8001774:	f000 fc54 	bl	8002020 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONFIG_WF;
 8001778:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <FSM_LcdDisplay+0x638>)
 800177a:	2207      	movs	r2, #7
 800177c:	701a      	strb	r2, [r3, #0]
		}
		if(_time_screen < 5){
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <FSM_LcdDisplay+0x63c>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	2b04      	cmp	r3, #4
 8001784:	f200 808b 	bhi.w	800189e <FSM_LcdDisplay+0x622>
			_time_screen = TIME_SCREEN;
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <FSM_LcdDisplay+0x63c>)
 800178a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800178e:	801a      	strh	r2, [r3, #0]
			mode_lcd = TURN_NEXT_NODE;
 8001790:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <FSM_LcdDisplay+0x638>)
 8001792:	2206      	movs	r2, #6
 8001794:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001796:	e082      	b.n	800189e <FSM_LcdDisplay+0x622>
	case TURN_NEXT_NODE:

		node_turn = (node_turn + 1) % NO_OF_NODES;
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <FSM_LcdDisplay+0x648>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	bfb8      	it	lt
 80017a6:	425b      	neglt	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <FSM_LcdDisplay+0x648>)
 80017ac:	701a      	strb	r2, [r3, #0]

		mode_lcd = READY_DISPLAY;
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <FSM_LcdDisplay+0x638>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
		break;
 80017b4:	e078      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
	case DISPLAY_CONFIG_WF:

		if(SystemMode() == SYS_CONNECT_WF) {
 80017b6:	f7ff fd37 	bl	8001228 <SystemMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d170      	bne.n	80018a2 <FSM_LcdDisplay+0x626>
			CLCD_PrintStringBuffer(0, 0, SCREEN_WIFI_CONNECTING_0);
 80017c0:	4a42      	ldr	r2, [pc, #264]	; (80018cc <FSM_LcdDisplay+0x650>)
 80017c2:	2100      	movs	r1, #0
 80017c4:	2000      	movs	r0, #0
 80017c6:	f000 fc2b 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 80017ca:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <FSM_LcdDisplay+0x634>)
 80017cc:	2100      	movs	r1, #0
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 fc26 	bl	8002020 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONNECT_WF;
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <FSM_LcdDisplay+0x638>)
 80017d6:	2208      	movs	r2, #8
 80017d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80017da:	e062      	b.n	80018a2 <FSM_LcdDisplay+0x626>
	case DISPLAY_CONNECT_WF:
		//every 500ms print a '.'
		CLCD_PrintCharBuffer(1, 6 + (_counter_time_elapsed/10) % 5, '.');
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <FSM_LcdDisplay+0x668>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	4a41      	ldr	r2, [pc, #260]	; (80018e8 <FSM_LcdDisplay+0x66c>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <FSM_LcdDisplay+0x66c>)
 80017ec:	fba3 1302 	umull	r1, r3, r3, r2
 80017f0:	0899      	lsrs	r1, r3, #2
 80017f2:	460b      	mov	r3, r1
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3306      	adds	r3, #6
 8001800:	b2db      	uxtb	r3, r3
 8001802:	222e      	movs	r2, #46	; 0x2e
 8001804:	4619      	mov	r1, r3
 8001806:	2001      	movs	r0, #1
 8001808:	f000 fbce 	bl	8001fa8 <CLCD_PrintCharBuffer>

		if((_counter_time_elapsed/10) % 5 == 4) CLCD_PrintStringBuffer(1, 0, SCREEN_WIFI_CONNECTING_1);
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <FSM_LcdDisplay+0x668>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	4a35      	ldr	r2, [pc, #212]	; (80018e8 <FSM_LcdDisplay+0x66c>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <FSM_LcdDisplay+0x66c>)
 800181c:	fba3 1302 	umull	r1, r3, r3, r2
 8001820:	0899      	lsrs	r1, r3, #2
 8001822:	460b      	mov	r3, r1
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b04      	cmp	r3, #4
 800182e:	d104      	bne.n	800183a <FSM_LcdDisplay+0x5be>
 8001830:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <FSM_LcdDisplay+0x634>)
 8001832:	2100      	movs	r1, #0
 8001834:	2001      	movs	r0, #1
 8001836:	f000 fbf3 	bl	8002020 <CLCD_PrintStringBuffer>

		if(SystemMode() == SYS_CONFIG_WF){
 800183a:	f7ff fcf5 	bl	8001228 <SystemMode>
 800183e:	4603      	mov	r3, r0
 8001840:	2b02      	cmp	r3, #2
 8001842:	d10d      	bne.n	8001860 <FSM_LcdDisplay+0x5e4>
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIG_WIFI_0);
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <FSM_LcdDisplay+0x630>)
 8001846:	2100      	movs	r1, #0
 8001848:	2000      	movs	r0, #0
 800184a:	f000 fbe9 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIG_WIFI_1);
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <FSM_LcdDisplay+0x634>)
 8001850:	2100      	movs	r1, #0
 8001852:	2001      	movs	r0, #1
 8001854:	f000 fbe4 	bl	8002020 <CLCD_PrintStringBuffer>

			mode_lcd = DISPLAY_CONFIG_WF;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <FSM_LcdDisplay+0x638>)
 800185a:	2207      	movs	r2, #7
 800185c:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_READY_DISPLAY_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_READY_DISPLAY_1);

			mode_lcd = READY_DISPLAY;
		}
		break;
 800185e:	e022      	b.n	80018a6 <FSM_LcdDisplay+0x62a>
		else if(SystemMode() == SYS_PROCESS_DATA) {
 8001860:	f7ff fce2 	bl	8001228 <SystemMode>
 8001864:	4603      	mov	r3, r0
 8001866:	2b03      	cmp	r3, #3
 8001868:	d11d      	bne.n	80018a6 <FSM_LcdDisplay+0x62a>
			CLCD_PrintStringBuffer(0, 0, SCREEN_READY_DISPLAY_0);
 800186a:	4a20      	ldr	r2, [pc, #128]	; (80018ec <FSM_LcdDisplay+0x670>)
 800186c:	2100      	movs	r1, #0
 800186e:	2000      	movs	r0, #0
 8001870:	f000 fbd6 	bl	8002020 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_READY_DISPLAY_1);
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <FSM_LcdDisplay+0x674>)
 8001876:	2100      	movs	r1, #0
 8001878:	2001      	movs	r0, #1
 800187a:	f000 fbd1 	bl	8002020 <CLCD_PrintStringBuffer>
			mode_lcd = READY_DISPLAY;
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <FSM_LcdDisplay+0x638>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
		break;
 8001884:	e00f      	b.n	80018a6 <FSM_LcdDisplay+0x62a>
	default:
		mode_lcd = INIT;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <FSM_LcdDisplay+0x638>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
	}

}
 800188c:	e00c      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 800188e:	bf00      	nop
 8001890:	e00a      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 8001892:	bf00      	nop
 8001894:	e008      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 8001896:	bf00      	nop
 8001898:	e006      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 800189a:	bf00      	nop
 800189c:	e004      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 800189e:	bf00      	nop
 80018a0:	e002      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <FSM_LcdDisplay+0x62c>
		break;
 80018a6:	bf00      	nop
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	080099c8 	.word	0x080099c8
 80018b0:	0800998c 	.word	0x0800998c
 80018b4:	20000208 	.word	0x20000208
 80018b8:	200002c0 	.word	0x200002c0
 80018bc:	08009a2c 	.word	0x08009a2c
 80018c0:	08009a40 	.word	0x08009a40
 80018c4:	2000020b 	.word	0x2000020b
 80018c8:	20000290 	.word	0x20000290
 80018cc:	080099a0 	.word	0x080099a0
 80018d0:	08009a54 	.word	0x08009a54
 80018d4:	08009a68 	.word	0x08009a68
 80018d8:	200002b8 	.word	0x200002b8
 80018dc:	08009a7c 	.word	0x08009a7c
 80018e0:	08009a80 	.word	0x08009a80
 80018e4:	200002c4 	.word	0x200002c4
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	08009a84 	.word	0x08009a84
 80018f0:	080099b4 	.word	0x080099b4
 80018f4:	00000000 	.word	0x00000000

080018f8 <FSM_SystemControl>:

void FSM_SystemControl(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	switch(mode_sys){
 80018fc:	4b90      	ldr	r3, [pc, #576]	; (8001b40 <FSM_SystemControl+0x248>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b03      	cmp	r3, #3
 8001902:	f200 810b 	bhi.w	8001b1c <FSM_SystemControl+0x224>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <FSM_SystemControl+0x14>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	0800191d 	.word	0x0800191d
 8001910:	0800192d 	.word	0x0800192d
 8001914:	0800197f 	.word	0x0800197f
 8001918:	080019cd 	.word	0x080019cd
	case INIT:
		UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 800191c:	2108      	movs	r1, #8
 800191e:	4889      	ldr	r0, [pc, #548]	; (8001b44 <FSM_SystemControl+0x24c>)
 8001920:	f001 fb16 	bl	8002f50 <UESP_SendMsg>

		mode_sys = SYS_CONNECT_WF;
 8001924:	4b86      	ldr	r3, [pc, #536]	; (8001b40 <FSM_SystemControl+0x248>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
		break;
 800192a:	e100      	b.n	8001b2e <FSM_SystemControl+0x236>
	case SYS_CONNECT_WF:

		if(IN_IsPressed_ms(BT_CONFIG, 2000)){
 800192c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f9a5 	bl	8001c80 <IN_IsPressed_ms>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <FSM_SystemControl+0x54>
			UESP_SendMsg(CMD_CONFIG_WF, sizeof(CMD_CONFIG_WF));
 800193c:	2107      	movs	r1, #7
 800193e:	4882      	ldr	r0, [pc, #520]	; (8001b48 <FSM_SystemControl+0x250>)
 8001940:	f001 fb06 	bl	8002f50 <UESP_SendMsg>

			mode_sys = SYS_CONFIG_WF;
 8001944:	4b7e      	ldr	r3, [pc, #504]	; (8001b40 <FSM_SystemControl+0x248>)
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
			UESP_SendMsg(CMD_TRANSMIT_DATA, sizeof(CMD_TRANSMIT_DATA));

			mode_sys = SYS_PROCESS_DATA;
			}
		}
		break;
 800194a:	e0eb      	b.n	8001b24 <FSM_SystemControl+0x22c>
		else if(UESP_IsReceivedMsg()){
 800194c:	f001 fb16 	bl	8002f7c <UESP_IsReceivedMsg>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80e6 	beq.w	8001b24 <FSM_SystemControl+0x22c>
			if(strcmp(UESP_GetMsg(), CONNECT_WF_SUCCESS) == 0){
 8001958:	f001 fb22 	bl	8002fa0 <UESP_GetMsg>
 800195c:	4603      	mov	r3, r0
 800195e:	497b      	ldr	r1, [pc, #492]	; (8001b4c <FSM_SystemControl+0x254>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fbf5 	bl	8000150 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 80db 	bne.w	8001b24 <FSM_SystemControl+0x22c>
			UESP_SendMsg(CMD_TRANSMIT_DATA, sizeof(CMD_TRANSMIT_DATA));
 800196e:	2109      	movs	r1, #9
 8001970:	4877      	ldr	r0, [pc, #476]	; (8001b50 <FSM_SystemControl+0x258>)
 8001972:	f001 faed 	bl	8002f50 <UESP_SendMsg>
			mode_sys = SYS_PROCESS_DATA;
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <FSM_SystemControl+0x248>)
 8001978:	2203      	movs	r2, #3
 800197a:	701a      	strb	r2, [r3, #0]
		break;
 800197c:	e0d2      	b.n	8001b24 <FSM_SystemControl+0x22c>
	case SYS_CONFIG_WF:
		if(UESP_IsReceivedMsg()){
 800197e:	f001 fafd 	bl	8002f7c <UESP_IsReceivedMsg>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <FSM_SystemControl+0xb6>
			if((strcmp(UESP_GetMsg(), CONFIG_WF_SUCCESS == 0))) {
 8001988:	f001 fb0a 	bl	8002fa0 <UESP_GetMsg>
 800198c:	4603      	mov	r3, r0
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fbdd 	bl	8000150 <strcmp>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80c5 	beq.w	8001b28 <FSM_SystemControl+0x230>
				UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 800199e:	2108      	movs	r1, #8
 80019a0:	4868      	ldr	r0, [pc, #416]	; (8001b44 <FSM_SystemControl+0x24c>)
 80019a2:	f001 fad5 	bl	8002f50 <UESP_SendMsg>

				mode_sys = SYS_CONNECT_WF;
 80019a6:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <FSM_SystemControl+0x248>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
		else if(IN_IsPressed(BT_CONFIG)) {
			UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));

			mode_sys = SYS_CONNECT_WF;
		}
		break;
 80019ac:	e0bc      	b.n	8001b28 <FSM_SystemControl+0x230>
		else if(IN_IsPressed(BT_CONFIG)) {
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f952 	bl	8001c58 <IN_IsPressed>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b6 	beq.w	8001b28 <FSM_SystemControl+0x230>
			UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 80019bc:	2108      	movs	r1, #8
 80019be:	4861      	ldr	r0, [pc, #388]	; (8001b44 <FSM_SystemControl+0x24c>)
 80019c0:	f001 fac6 	bl	8002f50 <UESP_SendMsg>
			mode_sys = SYS_CONNECT_WF;
 80019c4:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <FSM_SystemControl+0x248>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
		break;
 80019ca:	e0ad      	b.n	8001b28 <FSM_SystemControl+0x230>
	case SYS_PROCESS_DATA:

		if(_time_read_data < 5) {
 80019cc:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <FSM_SystemControl+0x25c>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d831      	bhi.n	8001a38 <FSM_SystemControl+0x140>
			_time_read_data = TIME_READ_DATA;
 80019d4:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <FSM_SystemControl+0x25c>)
 80019d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019da:	801a      	strh	r2, [r3, #0]
			_Data_gateway.cur = IN_ReadADC() * 3.3 / 4096 * 10;
 80019dc:	f000 f8e0 	bl	8001ba0 <IN_ReadADC>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdbc 	bl	8000560 <__aeabi_ui2d>
 80019e8:	a353      	add	r3, pc, #332	; (adr r3, 8001b38 <FSM_SystemControl+0x240>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe31 	bl	8000654 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <FSM_SystemControl+0x260>)
 8001a00:	f7fe ff52 	bl	80008a8 <__aeabi_ddiv>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <FSM_SystemControl+0x264>)
 8001a12:	f7fe fe1f 	bl	8000654 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8e9 	bl	8000bf4 <__aeabi_d2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <FSM_SystemControl+0x268>)
 8001a26:	6053      	str	r3, [r2, #4]

			UESP_SendMsg(ConvertMessageToJsonString(), 25);
 8001a28:	f7ff fb26 	bl	8001078 <ConvertMessageToJsonString>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2119      	movs	r1, #25
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fa8d 	bl	8002f50 <UESP_SendMsg>
		else if(IN_IsPressed_ms(BT_CONFIG, 2000)){
			UESP_SendMsg(CMD_CONFIG_WF, sizeof(CMD_CONFIG_WF));

			mode_sys = SYS_CONFIG_WF;
		}
		break;
 8001a36:	e079      	b.n	8001b2c <FSM_SystemControl+0x234>
		else if(ULORA_IsReceivedMsg()) {
 8001a38:	f001 fabc 	bl	8002fb4 <ULORA_IsReceivedMsg>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d011      	beq.n	8001a66 <FSM_SystemControl+0x16e>
			UESP_SendMsg(msg, sprintf(msg, "%s", ULORA_GetMsg()));
 8001a42:	f001 fac9 	bl	8002fd8 <ULORA_GetMsg>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4946      	ldr	r1, [pc, #280]	; (8001b64 <FSM_SystemControl+0x26c>)
 8001a4c:	4846      	ldr	r0, [pc, #280]	; (8001b68 <FSM_SystemControl+0x270>)
 8001a4e:	f004 fedf 	bl	8006810 <siprintf>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	4843      	ldr	r0, [pc, #268]	; (8001b68 <FSM_SystemControl+0x270>)
 8001a5a:	f001 fa79 	bl	8002f50 <UESP_SendMsg>
			ProcessMsg(msg);
 8001a5e:	4842      	ldr	r0, [pc, #264]	; (8001b68 <FSM_SystemControl+0x270>)
 8001a60:	f7ff fb34 	bl	80010cc <ProcessMsg>
		break;
 8001a64:	e062      	b.n	8001b2c <FSM_SystemControl+0x234>
		else if(UESP_IsReceivedMsg()){
 8001a66:	f001 fa89 	bl	8002f7c <UESP_IsReceivedMsg>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d045      	beq.n	8001afc <FSM_SystemControl+0x204>
			if(strcmp(UESP_GetMsg(), DISCONNECT_WF) == 0){
 8001a70:	f001 fa96 	bl	8002fa0 <UESP_GetMsg>
 8001a74:	4603      	mov	r3, r0
 8001a76:	493d      	ldr	r1, [pc, #244]	; (8001b6c <FSM_SystemControl+0x274>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fb69 	bl	8000150 <strcmp>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <FSM_SystemControl+0x19c>
				UESP_SendMsg(CMD_CONNECT_WF, sizeof(CMD_CONNECT_WF));
 8001a84:	2108      	movs	r1, #8
 8001a86:	482f      	ldr	r0, [pc, #188]	; (8001b44 <FSM_SystemControl+0x24c>)
 8001a88:	f001 fa62 	bl	8002f50 <UESP_SendMsg>
				mode_sys = SYS_CONNECT_WF;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <FSM_SystemControl+0x248>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
		break;
 8001a92:	e04b      	b.n	8001b2c <FSM_SystemControl+0x234>
			else if(strcmp(UESP_GetMsg(), ONRELAY) == 0){
 8001a94:	f001 fa84 	bl	8002fa0 <UESP_GetMsg>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4935      	ldr	r1, [pc, #212]	; (8001b70 <FSM_SystemControl+0x278>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fb57 	bl	8000150 <strcmp>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10f      	bne.n	8001ac8 <FSM_SystemControl+0x1d0>
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4831      	ldr	r0, [pc, #196]	; (8001b74 <FSM_SystemControl+0x27c>)
 8001aae:	f002 fafc 	bl	80040aa <HAL_GPIO_WritePin>
				_Data_gateway.relay = 1;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <FSM_SystemControl+0x268>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
				UESP_SendMsg(ConvertMessageToJsonString(), 25);
 8001ab8:	f7ff fade 	bl	8001078 <ConvertMessageToJsonString>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2119      	movs	r1, #25
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fa45 	bl	8002f50 <UESP_SendMsg>
		break;
 8001ac6:	e031      	b.n	8001b2c <FSM_SystemControl+0x234>
			else if(strcmp(UESP_GetMsg(), OFFRELAY) == 0){
 8001ac8:	f001 fa6a 	bl	8002fa0 <UESP_GetMsg>
 8001acc:	4603      	mov	r3, r0
 8001ace:	492a      	ldr	r1, [pc, #168]	; (8001b78 <FSM_SystemControl+0x280>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fb3d 	bl	8000150 <strcmp>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d127      	bne.n	8001b2c <FSM_SystemControl+0x234>
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2108      	movs	r1, #8
 8001ae0:	4824      	ldr	r0, [pc, #144]	; (8001b74 <FSM_SystemControl+0x27c>)
 8001ae2:	f002 fae2 	bl	80040aa <HAL_GPIO_WritePin>
				_Data_gateway.relay = 0;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <FSM_SystemControl+0x268>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
				UESP_SendMsg(ConvertMessageToJsonString(), 25);
 8001aec:	f7ff fac4 	bl	8001078 <ConvertMessageToJsonString>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2119      	movs	r1, #25
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fa2b 	bl	8002f50 <UESP_SendMsg>
		break;
 8001afa:	e017      	b.n	8001b2c <FSM_SystemControl+0x234>
		else if(IN_IsPressed_ms(BT_CONFIG, 2000)){
 8001afc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 f8bd 	bl	8001c80 <IN_IsPressed_ms>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00f      	beq.n	8001b2c <FSM_SystemControl+0x234>
			UESP_SendMsg(CMD_CONFIG_WF, sizeof(CMD_CONFIG_WF));
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <FSM_SystemControl+0x250>)
 8001b10:	f001 fa1e 	bl	8002f50 <UESP_SendMsg>
			mode_sys = SYS_CONFIG_WF;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <FSM_SystemControl+0x248>)
 8001b16:	2202      	movs	r2, #2
 8001b18:	701a      	strb	r2, [r3, #0]
		break;
 8001b1a:	e007      	b.n	8001b2c <FSM_SystemControl+0x234>
	default:
		mode_sys = INIT;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <FSM_SystemControl+0x248>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
	}
}
 8001b22:	e004      	b.n	8001b2e <FSM_SystemControl+0x236>
		break;
 8001b24:	bf00      	nop
 8001b26:	e002      	b.n	8001b2e <FSM_SystemControl+0x236>
		break;
 8001b28:	bf00      	nop
 8001b2a:	e000      	b.n	8001b2e <FSM_SystemControl+0x236>
		break;
 8001b2c:	bf00      	nop
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	f3af 8000 	nop.w
 8001b38:	66666666 	.word	0x66666666
 8001b3c:	400a6666 	.word	0x400a6666
 8001b40:	2000020a 	.word	0x2000020a
 8001b44:	08009a98 	.word	0x08009a98
 8001b48:	08009aa0 	.word	0x08009aa0
 8001b4c:	08009aa8 	.word	0x08009aa8
 8001b50:	08009ab8 	.word	0x08009ab8
 8001b54:	200002c2 	.word	0x200002c2
 8001b58:	40b00000 	.word	0x40b00000
 8001b5c:	40240000 	.word	0x40240000
 8001b60:	200002b8 	.word	0x200002b8
 8001b64:	08009ac4 	.word	0x08009ac4
 8001b68:	2000020c 	.word	0x2000020c
 8001b6c:	08009ac8 	.word	0x08009ac8
 8001b70:	08009ad4 	.word	0x08009ad4
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	08009adc 	.word	0x08009adc

08001b7c <IN_Init>:
uint8_t Flag_for_button_press[NO_OF_BUTTONS];
uint16_t Counter_button_press[NO_OF_BUTTONS];

ADC_HandleTypeDef* adc;

void IN_Init(ADC_HandleTypeDef* hadc){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	adc = hadc;
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <IN_Init+0x20>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start(adc);
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <IN_Init+0x20>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fbb0 	bl	80032f4 <HAL_ADC_Start>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200002d0 	.word	0x200002d0

08001ba0 <IN_ReadADC>:

uint32_t IN_ReadADC(void){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(adc);
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <IN_ReadADC+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fc51 	bl	8003450 <HAL_ADC_GetValue>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200002d0 	.word	0x200002d0

08001bb8 <IN_ReadButton>:

//this function is called every 50ms
void IN_ReadButton(void){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	e039      	b.n	8001c38 <IN_ReadButton+0x80>
		if(HAL_GPIO_ReadPin(PORT_BUTTON[i], PIN_BUTTON[i]) == BUTTON_IS_PRESSED){
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <IN_ReadButton+0x90>)
 8001bc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	491f      	ldr	r1, [pc, #124]	; (8001c4c <IN_ReadButton+0x94>)
 8001bd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f002 fa50 	bl	800407c <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <IN_ReadButton+0x4a>
			if(Counter_button_press[i] < MAX_COUNTER){
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <IN_ReadButton+0x98>)
 8001be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bea:	2bc7      	cmp	r3, #199	; 0xc7
 8001bec:	d821      	bhi.n	8001c32 <IN_ReadButton+0x7a>
				Counter_button_press[i]++;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <IN_ReadButton+0x98>)
 8001bf2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bf6:	3201      	adds	r2, #1
 8001bf8:	b291      	uxth	r1, r2
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <IN_ReadButton+0x98>)
 8001bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001c00:	e017      	b.n	8001c32 <IN_ReadButton+0x7a>
			}
		}
		else {
			Flag_for_button_press[i] = (Counter_button_press[i] > 0) && (Counter_button_press[i] < 10);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <IN_ReadButton+0x98>)
 8001c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <IN_ReadButton+0x66>
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <IN_ReadButton+0x98>)
 8001c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	d801      	bhi.n	8001c1e <IN_ReadButton+0x66>
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	e000      	b.n	8001c20 <IN_ReadButton+0x68>
 8001c1e:	2200      	movs	r2, #0
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	b2d1      	uxtb	r1, r2
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <IN_ReadButton+0x9c>)
 8001c26:	54d1      	strb	r1, [r2, r3]
			Counter_button_press[i] = 0;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <IN_ReadButton+0x98>)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	3301      	adds	r3, #1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0c2      	beq.n	8001bc4 <IN_ReadButton+0xc>
		}
	}
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	200002cc 	.word	0x200002cc
 8001c54:	200002c8 	.word	0x200002c8

08001c58 <IN_IsPressed>:

uint8_t IN_IsPressed(uint8_t index){
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <IN_IsPressed+0x14>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e002      	b.n	8001c72 <IN_IsPressed+0x1a>

	return Flag_for_button_press[index];
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <IN_IsPressed+0x24>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	200002c8 	.word	0x200002c8

08001c80 <IN_IsPressed_ms>:

uint8_t IN_IsPressed_ms(uint8_t index, uint16_t duration){
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80bb      	strh	r3, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <IN_IsPressed_ms+0x1a>
 8001c96:	2300      	movs	r3, #0
 8001c98:	e00e      	b.n	8001cb8 <IN_IsPressed_ms+0x38>

	//button is read every 50ms -> counter += 1 every 50ms if button is held
	return Counter_button_press[index] >= (duration / 50);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <IN_IsPressed_ms+0x44>)
 8001c9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ca2:	88bb      	ldrh	r3, [r7, #4]
 8001ca4:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <IN_IsPressed_ms+0x48>)
 8001ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	bf2c      	ite	cs
 8001cb2:	2301      	movcs	r3, #1
 8001cb4:	2300      	movcc	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200002cc 	.word	0x200002cc
 8001cc8:	51eb851f 	.word	0x51eb851f

08001ccc <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fa0f 	bl	80030fc <HAL_Delay>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <WriteI2C>:


static void WriteI2C(uint8_t data, uint8_t mode){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f023 030f 	bic.w	r3, r3, #15
 8001cfe:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <WriteI2C+0x90>)
 8001d08:	7adb      	ldrb	r3, [r3, #11]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 8001d16:	7bbb      	ldrb	r3, [r7, #14]
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <WriteI2C+0x4c>
		dataH |= LCD_RS;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <WriteI2C+0x90>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <WriteI2C+0x90>)
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 0208 	add.w	r2, r7, #8
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f002 fb13 	bl	8004394 <HAL_I2C_Master_Transmit>
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200002d8 	.word	0x200002d8

08001d7c <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	70fb      	strb	r3, [r7, #3]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70bb      	strb	r3, [r7, #2]
 8001d92:	4613      	mov	r3, r2
 8001d94:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 8001d96:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <CLCD_Init+0x144>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 8001d9c:	4a48      	ldr	r2, [pc, #288]	; (8001ec0 <CLCD_Init+0x144>)
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 8001da2:	4a47      	ldr	r2, [pc, #284]	; (8001ec0 <CLCD_Init+0x144>)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8001da8:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <CLCD_Init+0x144>)
 8001daa:	78bb      	ldrb	r3, [r7, #2]
 8001dac:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <CLCD_Init+0x144>)
 8001db0:	2228      	movs	r2, #40	; 0x28
 8001db2:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <CLCD_Init+0x144>)
 8001db6:	2206      	movs	r2, #6
 8001db8:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <CLCD_Init+0x144>)
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <CLCD_Init+0x144>)
 8001dc2:	2214      	movs	r2, #20
 8001dc4:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <CLCD_Init+0x144>)
 8001dc8:	2208      	movs	r2, #8
 8001dca:	72da      	strb	r2, [r3, #11]

	Delay(50);
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f7ff ff7d 	bl	8001ccc <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <CLCD_Init+0x148>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <CLCD_Init+0x68>
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <CLCD_Init+0x148>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fc1a 	bl	8006618 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	787a      	ldrb	r2, [r7, #1]
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fc0a 	bl	8006608 <malloc>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <CLCD_Init+0x148>)
 8001dfa:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e008      	b.n	8001e14 <CLCD_Init+0x98>
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <CLCD_Init+0x148>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	4413      	add	r3, r2
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3301      	adds	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <CLCD_Init+0x144>)
 8001e18:	799b      	ldrb	r3, [r3, #6]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <CLCD_Init+0x144>)
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbec      	blt.n	8001e02 <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2033      	movs	r0, #51	; 0x33
 8001e2c:	f7ff ff5c 	bl	8001ce8 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 8001e30:	2100      	movs	r1, #0
 8001e32:	2033      	movs	r0, #51	; 0x33
 8001e34:	f7ff ff58 	bl	8001ce8 <WriteI2C>
	Delay(5);
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f7ff ff47 	bl	8001ccc <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2032      	movs	r0, #50	; 0x32
 8001e42:	f7ff ff51 	bl	8001ce8 <WriteI2C>
	Delay(5);
 8001e46:	2005      	movs	r0, #5
 8001e48:	f7ff ff40 	bl	8001ccc <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2020      	movs	r0, #32
 8001e50:	f7ff ff4a 	bl	8001ce8 <WriteI2C>
	Delay(5);
 8001e54:	2005      	movs	r0, #5
 8001e56:	f7ff ff39 	bl	8001ccc <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <CLCD_Init+0x144>)
 8001e5c:	79db      	ldrb	r3, [r3, #7]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff41 	bl	8001ce8 <WriteI2C>
	Delay(1);
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7ff ff30 	bl	8001ccc <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <CLCD_Init+0x144>)
 8001e6e:	7a5b      	ldrb	r3, [r3, #9]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff38 	bl	8001ce8 <WriteI2C>
	Delay(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff ff27 	bl	8001ccc <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <CLCD_Init+0x144>)
 8001e80:	7a9b      	ldrb	r3, [r3, #10]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff2f 	bl	8001ce8 <WriteI2C>
	Delay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff ff1e 	bl	8001ccc <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <CLCD_Init+0x144>)
 8001e92:	7a1b      	ldrb	r3, [r3, #8]
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff26 	bl	8001ce8 <WriteI2C>
	Delay(1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff ff15 	bl	8001ccc <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff ff1f 	bl	8001ce8 <WriteI2C>
	Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff ff0e 	bl	8001ccc <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff ff18 	bl	8001ce8 <WriteI2C>
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200002d8 	.word	0x200002d8
 8001ec4:	200002d4 	.word	0x200002d4

08001ec8 <SetCursor>:

void SetCursor(uint8_t row, uint8_t col){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <SetCursor+0x8c>)
 8001ede:	799a      	ldrb	r2, [r3, #6]
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ee6:	fb01 f202 	mul.w	r2, r1, r2
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <SetCursor+0x8c>)
 8001ef0:	795a      	ldrb	r2, [r3, #5]
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ef8:	fb01 f202 	mul.w	r2, r1, r2
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	71bb      	strb	r3, [r7, #6]

	switch(row){
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d819      	bhi.n	8001f3a <SetCursor+0x72>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <SetCursor+0x44>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f1d 	.word	0x08001f1d
 8001f10:	08001f23 	.word	0x08001f23
 8001f14:	08001f2b 	.word	0x08001f2b
 8001f18:	08001f33 	.word	0x08001f33
	case 0:
		address_dram = 0x00 + col;
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	73fb      	strb	r3, [r7, #15]
		break;
 8001f20:	e00b      	b.n	8001f3a <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	3340      	adds	r3, #64	; 0x40
 8001f26:	73fb      	strb	r3, [r7, #15]
		break;
 8001f28:	e007      	b.n	8001f3a <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	73fb      	strb	r3, [r7, #15]
		break;
 8001f30:	e003      	b.n	8001f3a <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	3354      	adds	r3, #84	; 0x54
 8001f36:	73fb      	strb	r3, [r7, #15]
		break;
 8001f38:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fecf 	bl	8001ce8 <WriteI2C>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002d8 	.word	0x200002d8

08001f58 <UpdateCharBuffer>:

void UpdateCharBuffer(uint8_t c){
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <UpdateCharBuffer+0x40>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <UpdateCharBuffer+0x44>)
 8001f68:	7812      	ldrb	r2, [r2, #0]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <UpdateCharBuffer+0x48>)
 8001f6e:	7952      	ldrb	r2, [r2, #5]
 8001f70:	fb01 f202 	mul.w	r2, r1, r2
 8001f74:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <UpdateCharBuffer+0x4c>)
 8001f76:	7809      	ldrb	r1, [r1, #0]
 8001f78:	440a      	add	r2, r1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <UpdateCharBuffer+0x4c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <UpdateCharBuffer+0x4c>)
 8001f8a:	701a      	strb	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200002d4 	.word	0x200002d4
 8001f9c:	200002e5 	.word	0x200002e5
 8001fa0:	200002d8 	.word	0x200002d8
 8001fa4:	200002e4 	.word	0x200002e4

08001fa8 <CLCD_PrintCharBuffer>:

void CLCD_PrintCharBuffer(uint8_t row, uint8_t col, char c){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	71bb      	strb	r3, [r7, #6]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	717b      	strb	r3, [r7, #5]
	currentRow = row % LCD.ROW;
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <CLCD_PrintCharBuffer+0x68>)
 8001fbc:	799a      	ldrb	r2, [r3, #6]
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fc4:	fb01 f202 	mul.w	r2, r1, r2
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <CLCD_PrintCharBuffer+0x6c>)
 8001fce:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <CLCD_PrintCharBuffer+0x68>)
 8001fd2:	795a      	ldrb	r2, [r3, #5]
 8001fd4:	79bb      	ldrb	r3, [r7, #6]
 8001fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fda:	fb01 f202 	mul.w	r2, r1, r2
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <CLCD_PrintCharBuffer+0x70>)
 8001fe4:	701a      	strb	r2, [r3, #0]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <CLCD_PrintCharBuffer+0x74>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <CLCD_PrintCharBuffer+0x6c>)
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <CLCD_PrintCharBuffer+0x68>)
 8001ff2:	7952      	ldrb	r2, [r2, #5]
 8001ff4:	fb01 f202 	mul.w	r2, r1, r2
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <CLCD_PrintCharBuffer+0x70>)
 8001ffa:	7809      	ldrb	r1, [r1, #0]
 8001ffc:	440a      	add	r2, r1
 8001ffe:	4413      	add	r3, r2
 8002000:	797a      	ldrb	r2, [r7, #5]
 8002002:	701a      	strb	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200002d8 	.word	0x200002d8
 8002014:	200002e5 	.word	0x200002e5
 8002018:	200002e4 	.word	0x200002e4
 800201c:	200002d4 	.word	0x200002d4

08002020 <CLCD_PrintStringBuffer>:

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	603a      	str	r2, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	460b      	mov	r3, r1
 800202e:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <CLCD_PrintStringBuffer+0x60>)
 8002032:	799a      	ldrb	r2, [r3, #6]
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	fbb3 f1f2 	udiv	r1, r3, r2
 800203a:	fb01 f202 	mul.w	r2, r1, r2
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <CLCD_PrintStringBuffer+0x64>)
 8002044:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <CLCD_PrintStringBuffer+0x60>)
 8002048:	795a      	ldrb	r2, [r3, #5]
 800204a:	79bb      	ldrb	r3, [r7, #6]
 800204c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002050:	fb01 f202 	mul.w	r2, r1, r2
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <CLCD_PrintStringBuffer+0x68>)
 800205a:	701a      	strb	r2, [r3, #0]
	while(*str){
 800205c:	e006      	b.n	800206c <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	603a      	str	r2, [r7, #0]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff76 	bl	8001f58 <UpdateCharBuffer>
	while(*str){
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f4      	bne.n	800205e <CLCD_PrintStringBuffer+0x3e>
	}
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200002d8 	.word	0x200002d8
 8002084:	200002e5 	.word	0x200002e5
 8002088:	200002e4 	.word	0x200002e4

0800208c <CLCD_PrintNumBuffer>:

void CLCD_PrintNumBuffer(uint8_t row, uint8_t col, int16_t num){
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	460b      	mov	r3, r1
 8002098:	71bb      	strb	r3, [r7, #6]
 800209a:	4613      	mov	r3, r2
 800209c:	80bb      	strh	r3, [r7, #4]
    char flag_num = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
    unsigned char i;
    unsigned long power_of_10 = 1000000000;
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <CLCD_PrintNumBuffer+0xd8>)
 80020a4:	60bb      	str	r3, [r7, #8]
    currentRow = row % 2;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <CLCD_PrintNumBuffer+0xdc>)
 80020b0:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <CLCD_PrintNumBuffer+0xe0>)
 80020bc:	701a      	strb	r2, [r3, #0]

    if(num < 0) {
 80020be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da07      	bge.n	80020d6 <CLCD_PrintNumBuffer+0x4a>
        num *= -1;
 80020c6:	88bb      	ldrh	r3, [r7, #4]
 80020c8:	425b      	negs	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	80bb      	strh	r3, [r7, #4]
        UpdateCharBuffer('-');
 80020ce:	202d      	movs	r0, #45	; 0x2d
 80020d0:	f7ff ff42 	bl	8001f58 <UpdateCharBuffer>
 80020d4:	e011      	b.n	80020fa <CLCD_PrintNumBuffer+0x6e>
    }
    else if(num == 0){
 80020d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <CLCD_PrintNumBuffer+0x60>
    	UpdateCharBuffer('0');
 80020de:	2030      	movs	r0, #48	; 0x30
 80020e0:	f7ff ff3a 	bl	8001f58 <UpdateCharBuffer>
    	UpdateCharBuffer('0');
 80020e4:	2030      	movs	r0, #48	; 0x30
 80020e6:	f7ff ff37 	bl	8001f58 <UpdateCharBuffer>
//        UpdateCharBuffer(' ');
//        UpdateCharBuffer(' ');
        return;
 80020ea:	e038      	b.n	800215e <CLCD_PrintNumBuffer+0xd2>
    }

    else if(num < 10){
 80020ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	dc02      	bgt.n	80020fa <CLCD_PrintNumBuffer+0x6e>
        UpdateCharBuffer('0');
 80020f4:	2030      	movs	r0, #48	; 0x30
 80020f6:	f7ff ff2f 	bl	8001f58 <UpdateCharBuffer>
//        UpdateCharBuffer(num + '0');
    }

    for(i = 10; i > 0; i--){
 80020fa:	230a      	movs	r3, #10
 80020fc:	73bb      	strb	r3, [r7, #14]
 80020fe:	e02b      	b.n	8002158 <CLCD_PrintNumBuffer+0xcc>
        if( (num / power_of_10) != 0){
 8002100:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	429a      	cmp	r2, r3
 8002108:	d80d      	bhi.n	8002126 <CLCD_PrintNumBuffer+0x9a>
            flag_num = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
            UpdateCharBuffer(num / power_of_10 + '0');
 800210e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3330      	adds	r3, #48	; 0x30
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff1a 	bl	8001f58 <UpdateCharBuffer>
 8002124:	e005      	b.n	8002132 <CLCD_PrintNumBuffer+0xa6>
        }
        else{
            if(flag_num != 0) UpdateCharBuffer('0');
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <CLCD_PrintNumBuffer+0xa6>
 800212c:	2030      	movs	r0, #48	; 0x30
 800212e:	f7ff ff13 	bl	8001f58 <UpdateCharBuffer>
        }
        num %= power_of_10;
 8002132:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	fbb3 f2f2 	udiv	r2, r3, r2
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	fb01 f202 	mul.w	r2, r1, r2
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	80bb      	strh	r3, [r7, #4]
        power_of_10 /= 10;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <CLCD_PrintNumBuffer+0xe4>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	60bb      	str	r3, [r7, #8]
    for(i = 10; i > 0; i--){
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	3b01      	subs	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1d0      	bne.n	8002100 <CLCD_PrintNumBuffer+0x74>
    }

//    UpdateCharBuffer(' ');
//    UpdateCharBuffer(' ');
}
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	3b9aca00 	.word	0x3b9aca00
 8002168:	200002e5 	.word	0x200002e5
 800216c:	200002e4 	.word	0x200002e4
 8002170:	cccccccd 	.word	0xcccccccd

08002174 <CLCD_PrintFloatBuffer>:

void CLCD_PrintFloatBuffer(uint8_t row, uint8_t col, float f){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	603a      	str	r2, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	460b      	mov	r3, r1
 8002182:	71bb      	strb	r3, [r7, #6]
	uint8_t integer_part, decimal_part;

	if(f >= 100) return;
 8002184:	492f      	ldr	r1, [pc, #188]	; (8002244 <CLCD_PrintFloatBuffer+0xd0>)
 8002186:	6838      	ldr	r0, [r7, #0]
 8002188:	f7fe fef4 	bl	8000f74 <__aeabi_fcmpge>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d153      	bne.n	800223a <CLCD_PrintFloatBuffer+0xc6>

    currentRow = row % 2;
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <CLCD_PrintFloatBuffer+0xd4>)
 800219c:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <CLCD_PrintFloatBuffer+0xd8>)
 80021a8:	701a      	strb	r2, [r3, #0]

    integer_part = (uint8_t) f;
 80021aa:	6838      	ldr	r0, [r7, #0]
 80021ac:	f7fe ff0c 	bl	8000fc8 <__aeabi_f2uiz>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]
    decimal_part = (uint8_t) ((f - integer_part)*10);
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fe26 	bl	8000e08 <__aeabi_i2f>
 80021bc:	4603      	mov	r3, r0
 80021be:	4619      	mov	r1, r3
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f7fe fd6b 	bl	8000c9c <__aeabi_fsub>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4921      	ldr	r1, [pc, #132]	; (8002250 <CLCD_PrintFloatBuffer+0xdc>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fd ffd2 	bl	8000174 <__aeabi_fmul>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fef8 	bl	8000fc8 <__aeabi_f2uiz>
 80021d8:	4603      	mov	r3, r0
 80021da:	73bb      	strb	r3, [r7, #14]

    UpdateCharBuffer(integer_part / 10 + '0');
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <CLCD_PrintFloatBuffer+0xe0>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3330      	adds	r3, #48	; 0x30
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff feb3 	bl	8001f58 <UpdateCharBuffer>
    UpdateCharBuffer(integer_part % 10 + '0');
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <CLCD_PrintFloatBuffer+0xe0>)
 80021f6:	fba3 1302 	umull	r1, r3, r3, r2
 80021fa:	08d9      	lsrs	r1, r3, #3
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3330      	adds	r3, #48	; 0x30
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fea3 	bl	8001f58 <UpdateCharBuffer>
    UpdateCharBuffer('.');
 8002212:	202e      	movs	r0, #46	; 0x2e
 8002214:	f7ff fea0 	bl	8001f58 <UpdateCharBuffer>
    UpdateCharBuffer(decimal_part % 10 + '0');
 8002218:	7bba      	ldrb	r2, [r7, #14]
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <CLCD_PrintFloatBuffer+0xe0>)
 800221c:	fba3 1302 	umull	r1, r3, r3, r2
 8002220:	08d9      	lsrs	r1, r3, #3
 8002222:	460b      	mov	r3, r1
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3330      	adds	r3, #48	; 0x30
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fe90 	bl	8001f58 <UpdateCharBuffer>
 8002238:	e000      	b.n	800223c <CLCD_PrintFloatBuffer+0xc8>
	if(f >= 100) return;
 800223a:	bf00      	nop
}
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	42c80000 	.word	0x42c80000
 8002248:	200002e5 	.word	0x200002e5
 800224c:	200002e4 	.word	0x200002e4
 8002250:	41200000 	.word	0x41200000
 8002254:	cccccccd 	.word	0xcccccccd

08002258 <CLCD_DisplayScreen>:
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
}

void CLCD_DisplayScreen(void){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 800225e:	2300      	movs	r3, #0
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	e021      	b.n	80022a8 <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fe2d 	bl	8001ec8 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 800226e:	2300      	movs	r3, #0
 8002270:	71bb      	strb	r3, [r7, #6]
 8002272:	e011      	b.n	8002298 <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <CLCD_DisplayScreen+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	79fa      	ldrb	r2, [r7, #7]
 800227a:	4911      	ldr	r1, [pc, #68]	; (80022c0 <CLCD_DisplayScreen+0x68>)
 800227c:	7949      	ldrb	r1, [r1, #5]
 800227e:	fb02 f101 	mul.w	r1, r2, r1
 8002282:	79ba      	ldrb	r2, [r7, #6]
 8002284:	440a      	add	r2, r1
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2101      	movs	r1, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd2b 	bl	8001ce8 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 8002292:	79bb      	ldrb	r3, [r7, #6]
 8002294:	3301      	adds	r3, #1
 8002296:	71bb      	strb	r3, [r7, #6]
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <CLCD_DisplayScreen+0x68>)
 800229a:	795b      	ldrb	r3, [r3, #5]
 800229c:	79ba      	ldrb	r2, [r7, #6]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3e8      	bcc.n	8002274 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	3301      	adds	r3, #1
 80022a6:	71fb      	strb	r3, [r7, #7]
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <CLCD_DisplayScreen+0x68>)
 80022aa:	799b      	ldrb	r3, [r3, #6]
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3d8      	bcc.n	8002264 <CLCD_DisplayScreen+0xc>
		}
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200002d4 	.word	0x200002d4
 80022c0:	200002d8 	.word	0x200002d8

080022c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c8:	f000 feb6 	bl	8003038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022cc:	f000 f874 	bl	80023b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d0:	f000 f9ee 	bl	80026b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022d4:	f000 f91e 	bl	8002514 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80022d8:	f000 f996 	bl	8002608 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80022dc:	f000 f948 	bl	8002570 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80022e0:	f000 f9bc 	bl	800265c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80022e4:	f000 f8b8 	bl	8002458 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  IN_Init(&hadc1);
 80022e8:	4829      	ldr	r0, [pc, #164]	; (8002390 <main+0xcc>)
 80022ea:	f7ff fc47 	bl	8001b7c <IN_Init>
  CLCD_Init(&hi2c1, 0x3F, 2, 16);
 80022ee:	2310      	movs	r3, #16
 80022f0:	2202      	movs	r2, #2
 80022f2:	213f      	movs	r1, #63	; 0x3f
 80022f4:	4827      	ldr	r0, [pc, #156]	; (8002394 <main+0xd0>)
 80022f6:	f7ff fd41 	bl	8001d7c <CLCD_Init>

  UART_Init(&huart1, &huart2);
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <main+0xd4>)
 80022fc:	4827      	ldr	r0, [pc, #156]	; (800239c <main+0xd8>)
 80022fe:	f000 fdeb 	bl	8002ed8 <UART_Init>
  FSM_Init();
 8002302:	f7fe ff9b 	bl	800123c <FSM_Init>

  TM_Init(&htim2);
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <main+0xdc>)
 8002308:	f000 fd12 	bl	8002d30 <TM_Init>
  TM_SetTime(50);
 800230c:	2032      	movs	r0, #50	; 0x32
 800230e:	f000 fd2f 	bl	8002d70 <TM_SetTime>

  HAL_Delay(1000);
 8002312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002316:	f000 fef1 	bl	80030fc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 800231a:	f000 fd4b 	bl	8002db4 <TM_IsFlag>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0fa      	beq.n	800231a <main+0x56>
		  _counter_time_elapsed += 1;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <main+0xe0>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <main+0xe0>)
 800232e:	801a      	strh	r2, [r3, #0]

		  IN_ReadButton();
 8002330:	f7ff fc42 	bl	8001bb8 <IN_ReadButton>

		  if(_time_screen >= 5) _time_screen -= 5;
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <main+0xe4>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d905      	bls.n	8002348 <main+0x84>
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <main+0xe4>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	3b05      	subs	r3, #5
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <main+0xe4>)
 8002346:	801a      	strh	r2, [r3, #0]
		  if(_time_read_data >= 5) _time_read_data -= 5;
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <main+0xe8>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d905      	bls.n	800235c <main+0x98>
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <main+0xe8>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	3b05      	subs	r3, #5
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <main+0xe8>)
 800235a:	801a      	strh	r2, [r3, #0]

		  FSM_SystemControl();
 800235c:	f7ff facc 	bl	80018f8 <FSM_SystemControl>
//		  FSM_DataTransfer();
		  FSM_LcdDisplay();
 8002360:	f7fe ff8c 	bl	800127c <FSM_LcdDisplay>

		  if(_counter_time_elapsed % 10 == 0) HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <main+0xe0>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <main+0xec>)
 800236a:	fba3 1302 	umull	r1, r3, r3, r2
 800236e:	08d9      	lsrs	r1, r3, #3
 8002370:	460b      	mov	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <main+0xc6>
 8002380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002384:	480b      	ldr	r0, [pc, #44]	; (80023b4 <main+0xf0>)
 8002386:	f001 fea8 	bl	80040da <HAL_GPIO_TogglePin>

		  CLCD_DisplayScreen();
 800238a:	f7ff ff65 	bl	8002258 <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 800238e:	e7c4      	b.n	800231a <main+0x56>
 8002390:	200002e8 	.word	0x200002e8
 8002394:	20000318 	.word	0x20000318
 8002398:	200003f8 	.word	0x200003f8
 800239c:	200003b4 	.word	0x200003b4
 80023a0:	2000036c 	.word	0x2000036c
 80023a4:	200002c4 	.word	0x200002c4
 80023a8:	200002c0 	.word	0x200002c0
 80023ac:	200002c2 	.word	0x200002c2
 80023b0:	cccccccd 	.word	0xcccccccd
 80023b4:	40011000 	.word	0x40011000

080023b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b094      	sub	sp, #80	; 0x50
 80023bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c2:	2228      	movs	r2, #40	; 0x28
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 f92e 	bl	8006628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023e8:	2302      	movs	r3, #2
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ec:	2301      	movs	r3, #1
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f0:	2310      	movs	r3, #16
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 facf 	bl	80049a0 <HAL_RCC_OscConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002408:	f000 f9d4 	bl	80027b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240c:	230f      	movs	r3, #15
 800240e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fd3c 	bl	8004ea4 <HAL_RCC_ClockConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002432:	f000 f9bf 	bl	80027b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002436:	2302      	movs	r3, #2
 8002438:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fec7 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800244c:	f000 f9b2 	bl	80027b4 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	; 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <MX_ADC1_Init+0xb0>)
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <MX_ADC1_Init+0xb4>)
 800247e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_ADC1_Init+0xb0>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <MX_ADC1_Init+0xb0>)
 8002488:	2201      	movs	r2, #1
 800248a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <MX_ADC1_Init+0xb0>)
 800248e:	2200      	movs	r2, #0
 8002490:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_ADC1_Init+0xb0>)
 8002494:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002498:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <MX_ADC1_Init+0xb0>)
 800249c:	2200      	movs	r2, #0
 800249e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MX_ADC1_Init+0xb0>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024a6:	4818      	ldr	r0, [pc, #96]	; (8002508 <MX_ADC1_Init+0xb0>)
 80024a8:	f000 fe4c 	bl	8003144 <HAL_ADC_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80024b2:	f000 f97f 	bl	80027b4 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_ADC1_Init+0xb8>)
 80024b8:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4619      	mov	r1, r3
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_ADC1_Init+0xb0>)
 80024d2:	f001 f997 	bl	8003804 <HAL_ADC_AnalogWDGConfig>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80024dc:	f000 f96a 	bl	80027b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80024e8:	2307      	movs	r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_ADC1_Init+0xb0>)
 80024f2:	f001 f88f 	bl	8003614 <HAL_ADC_ConfigChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80024fc:	f000 f95a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200002e8 	.word	0x200002e8
 800250c:	40012400 	.word	0x40012400
 8002510:	00800200 	.word	0x00800200

08002514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_I2C1_Init+0x50>)
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <MX_I2C1_Init+0x54>)
 800251c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_I2C1_Init+0x50>)
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <MX_I2C1_Init+0x58>)
 8002522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_I2C1_Init+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_I2C1_Init+0x50>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_I2C1_Init+0x50>)
 8002532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <MX_I2C1_Init+0x50>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_I2C1_Init+0x50>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <MX_I2C1_Init+0x50>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_I2C1_Init+0x50>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <MX_I2C1_Init+0x50>)
 8002552:	f001 fddb 	bl	800410c <HAL_I2C_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800255c:	f000 f92a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000318 	.word	0x20000318
 8002568:	40005400 	.word	0x40005400
 800256c:	000186a0 	.word	0x000186a0

08002570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	463b      	mov	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_TIM2_Init+0x94>)
 800258e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_TIM2_Init+0x94>)
 8002596:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800259a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <MX_TIM2_Init+0x94>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_TIM2_Init+0x94>)
 80025a4:	2231      	movs	r2, #49	; 0x31
 80025a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_TIM2_Init+0x94>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_TIM2_Init+0x94>)
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_TIM2_Init+0x94>)
 80025b6:	f002 fec3 	bl	8005340 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025c0:	f000 f8f8 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_TIM2_Init+0x94>)
 80025d2:	f003 f85f 	bl	8005694 <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025dc:	f000 f8ea 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM2_Init+0x94>)
 80025ee:	f003 fa31 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025f8:	f000 f8dc 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000036c 	.word	0x2000036c

08002608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <MX_USART1_UART_Init+0x50>)
 8002610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800262e:	220c      	movs	r2, #12
 8002630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_USART1_UART_Init+0x4c>)
 8002640:	f003 fa78 	bl	8005b34 <HAL_UART_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800264a:	f000 f8b3 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200003b4 	.word	0x200003b4
 8002658:	40013800 	.word	0x40013800

0800265c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <MX_USART2_UART_Init+0x50>)
 8002664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800266c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002682:	220c      	movs	r2, #12
 8002684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002694:	f003 fa4e 	bl	8005b34 <HAL_UART_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800269e:	f000 f889 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200003f8 	.word	0x200003f8
 80026ac:	40004400 	.word	0x40004400

080026b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a30      	ldr	r2, [pc, #192]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <MX_GPIO_Init+0xf4>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002712:	4825      	ldr	r0, [pc, #148]	; (80027a8 <MX_GPIO_Init+0xf8>)
 8002714:	f001 fcc9 	bl	80040aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2130      	movs	r1, #48	; 0x30
 800271c:	4823      	ldr	r0, [pc, #140]	; (80027ac <MX_GPIO_Init+0xfc>)
 800271e:	f001 fcc4 	bl	80040aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	2108      	movs	r1, #8
 8002726:	4822      	ldr	r0, [pc, #136]	; (80027b0 <MX_GPIO_Init+0x100>)
 8002728:	f001 fcbf 	bl	80040aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800272c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002736:	2301      	movs	r3, #1
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2302      	movs	r3, #2
 800273c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4619      	mov	r1, r3
 8002744:	4818      	ldr	r0, [pc, #96]	; (80027a8 <MX_GPIO_Init+0xf8>)
 8002746:	f001 fb15 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800274a:	2330      	movs	r3, #48	; 0x30
 800274c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	2301      	movs	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002752:	2301      	movs	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2302      	movs	r3, #2
 8002758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f107 0310 	add.w	r3, r7, #16
 800275e:	4619      	mov	r1, r3
 8002760:	4812      	ldr	r0, [pc, #72]	; (80027ac <MX_GPIO_Init+0xfc>)
 8002762:	f001 fb07 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT0_Pin */
  GPIO_InitStruct.Pin = BT0_Pin;
 8002766:	2302      	movs	r3, #2
 8002768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT0_GPIO_Port, &GPIO_InitStruct);
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4619      	mov	r1, r3
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_GPIO_Init+0x100>)
 800277a:	f001 fafb 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 800277e:	2308      	movs	r3, #8
 8002780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002786:	2301      	movs	r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2302      	movs	r3, #2
 800278c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0310 	add.w	r3, r7, #16
 8002792:	4619      	mov	r1, r3
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_GPIO_Init+0x100>)
 8002796:	f001 faed 	bl	8003d74 <HAL_GPIO_Init>

}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40010800 	.word	0x40010800
 80027b0:	40010c00 	.word	0x40010c00

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	e7fe      	b.n	80027bc <Error_Handler+0x8>
	...

080027c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_MspInit+0x5c>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_MspInit+0x5c>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6193      	str	r3, [r2, #24]
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_MspInit+0x5c>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_MspInit+0x5c>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <HAL_MspInit+0x5c>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_MspInit+0x5c>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_MspInit+0x60>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_MspInit+0x60>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	40010000 	.word	0x40010000

08002824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_ADC_MspInit+0x7c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d129      	bne.n	8002898 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_ADC_MspInit+0x80>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_ADC_MspInit+0x80>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_ADC_MspInit+0x80>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_ADC_MspInit+0x80>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_ADC_MspInit+0x80>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_ADC_MspInit+0x80>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002878:	2303      	movs	r3, #3
 800287a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4619      	mov	r1, r3
 8002882:	4809      	ldr	r0, [pc, #36]	; (80028a8 <HAL_ADC_MspInit+0x84>)
 8002884:	f001 fa76 	bl	8003d74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2012      	movs	r0, #18
 800288e:	f001 f98a 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002892:	2012      	movs	r0, #18
 8002894:	f001 f9a3 	bl	8003bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40012400 	.word	0x40012400
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40010800 	.word	0x40010800

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_I2C_MspInit+0x70>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d123      	bne.n	8002914 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028e4:	23c0      	movs	r3, #192	; 0xc0
 80028e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4619      	mov	r1, r3
 80028f6:	480b      	ldr	r0, [pc, #44]	; (8002924 <HAL_I2C_MspInit+0x78>)
 80028f8:	f001 fa3c 	bl	8003d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_I2C_MspInit+0x74>)
 8002902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002906:	61d3      	str	r3, [r2, #28]
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_I2C_MspInit+0x74>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40005400 	.word	0x40005400
 8002920:	40021000 	.word	0x40021000
 8002924:	40010c00 	.word	0x40010c00

08002928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d113      	bne.n	8002962 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_TIM_Base_MspInit+0x44>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_TIM_Base_MspInit+0x44>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	61d3      	str	r3, [r2, #28]
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_TIM_Base_MspInit+0x44>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201c      	movs	r0, #28
 8002958:	f001 f925 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295c:	201c      	movs	r0, #28
 800295e:	f001 f93e 	bl	8003bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0318 	add.w	r3, r7, #24
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <HAL_UART_MspInit+0x118>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d13a      	bne.n	8002a06 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a3d      	ldr	r2, [pc, #244]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a37      	ldr	r2, [pc, #220]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 0318 	add.w	r3, r7, #24
 80029d2:	4619      	mov	r1, r3
 80029d4:	482e      	ldr	r0, [pc, #184]	; (8002a90 <HAL_UART_MspInit+0x120>)
 80029d6:	f001 f9cd 	bl	8003d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0318 	add.w	r3, r7, #24
 80029ec:	4619      	mov	r1, r3
 80029ee:	4828      	ldr	r0, [pc, #160]	; (8002a90 <HAL_UART_MspInit+0x120>)
 80029f0:	f001 f9c0 	bl	8003d74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	2025      	movs	r0, #37	; 0x25
 80029fa:	f001 f8d4 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029fe:	2025      	movs	r0, #37	; 0x25
 8002a00:	f001 f8ed 	bl	8003bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a04:	e03c      	b.n	8002a80 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_UART_MspInit+0x124>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d137      	bne.n	8002a80 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_UART_MspInit+0x11c>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a40:	2304      	movs	r3, #4
 8002a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 0318 	add.w	r3, r7, #24
 8002a50:	4619      	mov	r1, r3
 8002a52:	480f      	ldr	r0, [pc, #60]	; (8002a90 <HAL_UART_MspInit+0x120>)
 8002a54:	f001 f98e 	bl	8003d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4809      	ldr	r0, [pc, #36]	; (8002a90 <HAL_UART_MspInit+0x120>)
 8002a6c:	f001 f982 	bl	8003d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2026      	movs	r0, #38	; 0x26
 8002a76:	f001 f896 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a7a:	2026      	movs	r0, #38	; 0x26
 8002a7c:	f001 f8af 	bl	8003bde <HAL_NVIC_EnableIRQ>
}
 8002a80:	bf00      	nop
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010800 	.word	0x40010800
 8002a94:	40004400 	.word	0x40004400

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <NMI_Handler+0x4>

08002a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ade:	f000 faf1 	bl	80030c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <ADC1_2_IRQHandler+0x10>)
 8002aee:	f000 fcbb 	bl	8003468 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200002e8 	.word	0x200002e8

08002afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <TIM2_IRQHandler+0x10>)
 8002b02:	f002 fcbf 	bl	8005484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000036c 	.word	0x2000036c

08002b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <USART1_IRQHandler+0x10>)
 8002b16:	f003 f91d 	bl	8005d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200003b4 	.word	0x200003b4

08002b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <USART2_IRQHandler+0x10>)
 8002b2a:	f003 f913 	bl	8005d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200003f8 	.word	0x200003f8

08002b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <_kill>:

int _kill(int pid, int sig)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b50:	f003 fd30 	bl	80065b4 <__errno>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2216      	movs	r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
  return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_exit>:

void _exit (int status)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffe7 	bl	8002b46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b78:	e7fe      	b.n	8002b78 <_exit+0x12>

08002b7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e00a      	b.n	8002ba2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b8c:	f3af 8000 	nop.w
 8002b90:	4601      	mov	r1, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	60ba      	str	r2, [r7, #8]
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	dbf0      	blt.n	8002b8c <_read+0x12>
  }

  return len;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e009      	b.n	8002bda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	60ba      	str	r2, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	dbf1      	blt.n	8002bc6 <_write+0x12>
  }
  return len;
 8002be2:	687b      	ldr	r3, [r7, #4]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_close>:

int _close(int file)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c12:	605a      	str	r2, [r3, #4]
  return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_isatty>:

int _isatty(int file)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f003 fc9a 	bl	80065b4 <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20005000 	.word	0x20005000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	2000043c 	.word	0x2000043c
 8002cb4:	20000538 	.word	0x20000538

08002cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint8_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <RunSoftwareTimer+0x38>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <RunSoftwareTimer+0x2e>
		counter_timer--;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <RunSoftwareTimer+0x38>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <RunSoftwareTimer+0x38>)
 8002cda:	701a      	strb	r2, [r3, #0]
		if(counter_timer == 0){
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <RunSoftwareTimer+0x38>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <RunSoftwareTimer+0x2e>
			counter_timer = MUL_timer;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <RunSoftwareTimer+0x3c>)
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <RunSoftwareTimer+0x38>)
 8002cea:	701a      	strb	r2, [r3, #0]
			flag_timer = 1;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <RunSoftwareTimer+0x40>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000445 	.word	0x20000445
 8002d00:	2000000d 	.word	0x2000000d
 8002d04:	20000444 	.word	0x20000444

08002d08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 8002d1e:	f7ff ffd1 	bl	8002cc4 <RunSoftwareTimer>
	}
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000440 	.word	0x20000440

08002d30 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	stimer = htim;
 8002d38:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <TM_Init+0x30>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <TM_Init+0x34>)
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <TM_Init+0x38>)
 8002d44:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <TM_Init+0x3c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <TM_Init+0x30>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 fb45 	bl	80053e0 <HAL_TIM_Base_Start_IT>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000440 	.word	0x20000440
 8002d64:	2000000d 	.word	0x2000000d
 8002d68:	20000445 	.word	0x20000445
 8002d6c:	20000444 	.word	0x20000444

08002d70 <TM_SetTime>:

void TM_SetTime(uint16_t duration){
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <TM_SetTime+0x34>)
 8002d7e:	7812      	ldrb	r2, [r2, #0]
 8002d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <TM_SetTime+0x38>)
 8002d88:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <TM_SetTime+0x38>)
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <TM_SetTime+0x3c>)
 8002d90:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <TM_SetTime+0x40>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	2000000c 	.word	0x2000000c
 8002da8:	2000000d 	.word	0x2000000d
 8002dac:	20000445 	.word	0x20000445
 8002db0:	20000444 	.word	0x20000444

08002db4 <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	if(flag_timer) {
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <TM_IsFlag+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <TM_IsFlag+0x16>
		flag_timer = 0;
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <TM_IsFlag+0x20>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
		return 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <TM_IsFlag+0x18>
	}
	return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000444 	.word	0x20000444

08002dd8 <HAL_UART_RxCpltCallback>:
uint8_t byte_esp_received, byte_lora_received;
uint8_t flag_esp_received_str, flag_lora_received_str;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == u_esp->Instance){
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_UART_RxCpltCallback+0xd8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d12a      	bne.n	8002e44 <HAL_UART_RxCpltCallback+0x6c>
		if(byte_esp_received == '!'){
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_UART_RxCpltCallback+0xdc>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b21      	cmp	r3, #33	; 0x21
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_RxCpltCallback+0x2c>
			index_msg_esp = 0;
 8002df6:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_UART_RxCpltCallback+0xe0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
			flag_esp_received_str = 0;
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_UART_RxCpltCallback+0xe4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e018      	b.n	8002e36 <HAL_UART_RxCpltCallback+0x5e>
		}
		else if(byte_esp_received == '#'){
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_UART_RxCpltCallback+0xdc>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b23      	cmp	r3, #35	; 0x23
 8002e0a:	d109      	bne.n	8002e20 <HAL_UART_RxCpltCallback+0x48>
			msg_esp[index_msg_esp] = '\0';
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <HAL_UART_RxCpltCallback+0xe0>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]
			flag_esp_received_str = 1;
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_UART_RxCpltCallback+0xe4>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e00a      	b.n	8002e36 <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			msg_esp[index_msg_esp++] = byte_esp_received;
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_UART_RxCpltCallback+0xe0>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	b2d1      	uxtb	r1, r2
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <HAL_UART_RxCpltCallback+0xe0>)
 8002e2a:	7011      	strb	r1, [r2, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_UART_RxCpltCallback+0xdc>)
 8002e30:	7819      	ldrb	r1, [r3, #0]
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e34:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(u_esp, &byte_esp_received, 1);
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_UART_RxCpltCallback+0xd8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	491d      	ldr	r1, [pc, #116]	; (8002eb4 <HAL_UART_RxCpltCallback+0xdc>)
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 ff57 	bl	8005cf2 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == u_lora->Instance){
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_UART_RxCpltCallback+0xec>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d12a      	bne.n	8002ea8 <HAL_UART_RxCpltCallback+0xd0>
		if(byte_lora_received == '!'){
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_UART_RxCpltCallback+0xf0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b21      	cmp	r3, #33	; 0x21
 8002e58:	d106      	bne.n	8002e68 <HAL_UART_RxCpltCallback+0x90>
			index_msg_lora = 0;
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_UART_RxCpltCallback+0xf4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			flag_lora_received_str = 0;
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_UART_RxCpltCallback+0xf8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e018      	b.n	8002e9a <HAL_UART_RxCpltCallback+0xc2>
		}
		else if(byte_lora_received == '#'){
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_UART_RxCpltCallback+0xf0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b23      	cmp	r3, #35	; 0x23
 8002e6e:	d109      	bne.n	8002e84 <HAL_UART_RxCpltCallback+0xac>
			msg_lora[index_msg_lora] = '\0';
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_UART_RxCpltCallback+0xf4>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_UART_RxCpltCallback+0xfc>)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5499      	strb	r1, [r3, r2]
			flag_lora_received_str = 1;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_UART_RxCpltCallback+0xf8>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e00a      	b.n	8002e9a <HAL_UART_RxCpltCallback+0xc2>
		}
		else {
			msg_lora[index_msg_lora++] = byte_lora_received;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_UART_RxCpltCallback+0xf4>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	b2d1      	uxtb	r1, r2
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_UART_RxCpltCallback+0xf4>)
 8002e8e:	7011      	strb	r1, [r2, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_UART_RxCpltCallback+0xf0>)
 8002e94:	7819      	ldrb	r1, [r3, #0]
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_UART_RxCpltCallback+0xfc>)
 8002e98:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(u_lora, &byte_lora_received, 1);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_UART_RxCpltCallback+0xec>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4909      	ldr	r1, [pc, #36]	; (8002ec8 <HAL_UART_RxCpltCallback+0xf0>)
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 ff25 	bl	8005cf2 <HAL_UART_Receive_IT>
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000448 	.word	0x20000448
 8002eb4:	2000051a 	.word	0x2000051a
 8002eb8:	20000518 	.word	0x20000518
 8002ebc:	2000051c 	.word	0x2000051c
 8002ec0:	20000450 	.word	0x20000450
 8002ec4:	2000044c 	.word	0x2000044c
 8002ec8:	2000051b 	.word	0x2000051b
 8002ecc:	20000519 	.word	0x20000519
 8002ed0:	2000051d 	.word	0x2000051d
 8002ed4:	200004b4 	.word	0x200004b4

08002ed8 <UART_Init>:




//==================HIGH LEVEL FUNCTION==================//
void UART_Init(UART_HandleTypeDef* uart_esp, UART_HandleTypeDef* uart_lora){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	u_esp = uart_esp;
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <UART_Init+0x58>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6013      	str	r3, [r2, #0]
	u_lora = uart_lora;
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <UART_Init+0x5c>)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6013      	str	r3, [r2, #0]
	index_msg_esp = index_msg_lora = 0;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <UART_Init+0x60>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <UART_Init+0x60>)
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <UART_Init+0x64>)
 8002efa:	701a      	strb	r2, [r3, #0]
	flag_esp_received_str = flag_lora_received_str = 0;
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <UART_Init+0x68>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <UART_Init+0x68>)
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <UART_Init+0x6c>)
 8002f08:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(u_esp, &byte_esp_received, 1);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <UART_Init+0x58>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	490d      	ldr	r1, [pc, #52]	; (8002f48 <UART_Init+0x70>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 feed 	bl	8005cf2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(u_lora, &byte_lora_received, 1);
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <UART_Init+0x5c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	490b      	ldr	r1, [pc, #44]	; (8002f4c <UART_Init+0x74>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f002 fee6 	bl	8005cf2 <HAL_UART_Receive_IT>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000448 	.word	0x20000448
 8002f34:	2000044c 	.word	0x2000044c
 8002f38:	20000519 	.word	0x20000519
 8002f3c:	20000518 	.word	0x20000518
 8002f40:	2000051d 	.word	0x2000051d
 8002f44:	2000051c 	.word	0x2000051c
 8002f48:	2000051a 	.word	0x2000051a
 8002f4c:	2000051b 	.word	0x2000051b

08002f50 <UESP_SendMsg>:

void UESP_SendMsg(char* msg, uint8_t size){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
//	HAL_UART_Transmit(u_esp, msg, sizeof(msg), 1000);
	HAL_UART_Transmit(u_esp, msg, size, 1000);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <UESP_SendMsg+0x28>)
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	f002 fe30 	bl	8005bce <HAL_UART_Transmit>

}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000448 	.word	0x20000448

08002f7c <UESP_IsReceivedMsg>:

uint8_t UESP_IsReceivedMsg(void){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
	uint8_t temp = flag_esp_received_str;
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <UESP_IsReceivedMsg+0x20>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]

	flag_esp_received_str = 0;
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <UESP_IsReceivedMsg+0x20>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
	return temp;
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000051c 	.word	0x2000051c

08002fa0 <UESP_GetMsg>:

uint8_t* UESP_GetMsg(void){
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0

	return msg_esp;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <UESP_GetMsg+0x10>)
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000450 	.word	0x20000450

08002fb4 <ULORA_IsReceivedMsg>:

void ULORA_SendMsg(char* msg, uint8_t size){
	HAL_UART_Transmit(u_lora, msg, size, 1000);
}

uint8_t ULORA_IsReceivedMsg(void){
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
	uint8_t temp = flag_lora_received_str;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <ULORA_IsReceivedMsg+0x20>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]

	flag_lora_received_str = 0;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <ULORA_IsReceivedMsg+0x20>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
	return temp;
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000051d 	.word	0x2000051d

08002fd8 <ULORA_GetMsg>:

uint8_t* ULORA_GetMsg(void){
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
//	if(!flag_lora_received_str) return "";

//	flag_lora_received_str = 0;

	return msg_lora;
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <ULORA_GetMsg+0x10>)
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200004b4 	.word	0x200004b4

08002fec <Reset_Handler>:
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <LoopFillZerobss+0x12>)
 8002fee:	490d      	ldr	r1, [pc, #52]	; (8003024 <LoopFillZerobss+0x16>)
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <LoopFillZerobss+0x1a>)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e002      	b.n	8002ffc <LoopCopyDataInit>

08002ff6 <CopyDataInit>:
 8002ff6:	58d4      	ldr	r4, [r2, r3]
 8002ff8:	50c4      	str	r4, [r0, r3]
 8002ffa:	3304      	adds	r3, #4

08002ffc <LoopCopyDataInit>:
 8002ffc:	18c4      	adds	r4, r0, r3
 8002ffe:	428c      	cmp	r4, r1
 8003000:	d3f9      	bcc.n	8002ff6 <CopyDataInit>
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <LoopFillZerobss+0x1e>)
 8003004:	4c0a      	ldr	r4, [pc, #40]	; (8003030 <LoopFillZerobss+0x22>)
 8003006:	2300      	movs	r3, #0
 8003008:	e001      	b.n	800300e <LoopFillZerobss>

0800300a <FillZerobss>:
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	3204      	adds	r2, #4

0800300e <LoopFillZerobss>:
 800300e:	42a2      	cmp	r2, r4
 8003010:	d3fb      	bcc.n	800300a <FillZerobss>
 8003012:	f7ff fe51 	bl	8002cb8 <SystemInit>
 8003016:	f003 fad3 	bl	80065c0 <__libc_init_array>
 800301a:	f7ff f953 	bl	80022c4 <main>
 800301e:	4770      	bx	lr
 8003020:	20000000 	.word	0x20000000
 8003024:	200001ec 	.word	0x200001ec
 8003028:	08009fa0 	.word	0x08009fa0
 800302c:	200001ec 	.word	0x200001ec
 8003030:	20000534 	.word	0x20000534

08003034 <CAN1_RX1_IRQHandler>:
 8003034:	e7fe      	b.n	8003034 <CAN1_RX1_IRQHandler>
	...

08003038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_Init+0x28>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_Init+0x28>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f000 fda1 	bl	8003b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304e:	200f      	movs	r0, #15
 8003050:	f000 f808 	bl	8003064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003054:	f7ff fbb4 	bl	80027c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40022000 	.word	0x40022000

08003064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_InitTick+0x54>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_InitTick+0x58>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307a:	fbb3 f3f1 	udiv	r3, r3, r1
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fdb9 	bl	8003bfa <HAL_SYSTICK_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00e      	b.n	80030b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d80a      	bhi.n	80030ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003098:	2200      	movs	r2, #0
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f000 fd81 	bl	8003ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <HAL_InitTick+0x5c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000008 	.word	0x20000008
 80030bc:	20000014 	.word	0x20000014
 80030c0:	20000010 	.word	0x20000010

080030c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_IncTick+0x1c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_IncTick+0x20>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_IncTick+0x20>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	20000014 	.word	0x20000014
 80030e4:	20000520 	.word	0x20000520

080030e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return uwTick;
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <HAL_GetTick+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000520 	.word	0x20000520

080030fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fff0 	bl	80030e8 <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d005      	beq.n	8003122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_Delay+0x44>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003122:	bf00      	nop
 8003124:	f7ff ffe0 	bl	80030e8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d8f7      	bhi.n	8003124 <HAL_Delay+0x28>
  {
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000014 	.word	0x20000014

08003144 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0be      	b.n	80032e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fb4e 	bl	8002824 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fbeb 	bl	8003964 <ADC_ConversionStop_Disable>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8099 	bne.w	80032d2 <HAL_ADC_Init+0x18e>
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 8095 	bne.w	80032d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b0:	f023 0302 	bic.w	r3, r3, #2
 80031b4:	f043 0202 	orr.w	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7b1b      	ldrb	r3, [r3, #12]
 80031ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d003      	beq.n	80031e6 <HAL_ADC_Init+0xa2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_ADC_Init+0xa8>
 80031e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ea:	e000      	b.n	80031ee <HAL_ADC_Init+0xaa>
 80031ec:	2300      	movs	r3, #0
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7d1b      	ldrb	r3, [r3, #20]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d119      	bne.n	8003230 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7b1b      	ldrb	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	3b01      	subs	r3, #1
 800320a:	035a      	lsls	r2, r3, #13
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e00b      	b.n	8003230 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_ADC_Init+0x1a8>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	430b      	orrs	r3, r1
 8003256:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d003      	beq.n	800326a <HAL_ADC_Init+0x126>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d104      	bne.n	8003274 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	3b01      	subs	r3, #1
 8003270:	051b      	lsls	r3, r3, #20
 8003272:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	430a      	orrs	r2, r1
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_ADC_Init+0x1ac>)
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d10b      	bne.n	80032b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032ae:	e018      	b.n	80032e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f023 0312 	bic.w	r3, r3, #18
 80032b8:	f043 0210 	orr.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032d0:	e007      	b.n	80032e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffe1f7fd 	.word	0xffe1f7fd
 80032f0:	ff1f0efe 	.word	0xff1f0efe

080032f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADC_Start+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e098      	b.n	8003440 <HAL_ADC_Start+0x14c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 faca 	bl	80038b0 <ADC_Enable>
 800331c:	4603      	mov	r3, r0
 800331e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8087 	bne.w	8003436 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_ADC_Start+0x154>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d105      	bne.n	8003352 <HAL_ADC_Start+0x5e>
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_ADC_Start+0x158>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d115      	bne.n	800337e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d026      	beq.n	80033ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800337c:	e01d      	b.n	80033ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <HAL_ADC_Start+0x158>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_ADC_Start+0xaa>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_ADC_Start+0x154>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10d      	bne.n	80033ba <HAL_ADC_Start+0xc6>
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_ADC_Start+0x158>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f023 0206 	bic.w	r2, r3, #6
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80033d2:	e002      	b.n	80033da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0202 	mvn.w	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033fa:	d113      	bne.n	8003424 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_ADC_Start+0x154>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d105      	bne.n	8003412 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_ADC_Start+0x158>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	e00c      	b.n	800343e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e003      	b.n	800343e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40012800 	.word	0x40012800
 800344c:	40012400 	.word	0x40012400

08003450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d140      	bne.n	8003500 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d139      	bne.n	8003500 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034b2:	d11d      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d119      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0220 	bic.w	r2, r2, #32
 80034ca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f87c 	bl	80035ee <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0212 	mvn.w	r2, #18
 80034fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d14f      	bne.n	80035ae <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d148      	bne.n	80035ae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800353e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003542:	d012      	beq.n	800356a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800354e:	2b00      	cmp	r3, #0
 8003550:	d125      	bne.n	800359e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800355c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003560:	d11d      	bne.n	800359e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003566:	2b00      	cmp	r3, #0
 8003568:	d119      	bne.n	800359e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003578:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f043 0201 	orr.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa21 	bl	80039e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 020c 	mvn.w	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d114      	bne.n	80035e6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10d      	bne.n	80035e6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f812 	bl	8003600 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0201 	mvn.w	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
	...

08003614 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x20>
 8003630:	2302      	movs	r3, #2
 8003632:	e0dc      	b.n	80037ee <HAL_ADC_ConfigChannel+0x1da>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d81c      	bhi.n	800367e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b05      	subs	r3, #5
 8003656:	221f      	movs	r2, #31
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	4019      	ands	r1, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	3b05      	subs	r3, #5
 8003670:	fa00 f203 	lsl.w	r2, r0, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	635a      	str	r2, [r3, #52]	; 0x34
 800367c:	e03c      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d81c      	bhi.n	80036c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	3b23      	subs	r3, #35	; 0x23
 8003698:	221f      	movs	r2, #31
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	4019      	ands	r1, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	3b23      	subs	r3, #35	; 0x23
 80036b2:	fa00 f203 	lsl.w	r2, r0, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
 80036be:	e01b      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	3b41      	subs	r3, #65	; 0x41
 80036d2:	221f      	movs	r2, #31
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	4019      	ands	r1, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	3b41      	subs	r3, #65	; 0x41
 80036ec:	fa00 f203 	lsl.w	r2, r0, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b09      	cmp	r3, #9
 80036fe:	d91c      	bls.n	800373a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68d9      	ldr	r1, [r3, #12]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	4019      	ands	r1, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6898      	ldr	r0, [r3, #8]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	3b1e      	subs	r3, #30
 800372c:	fa00 f203 	lsl.w	r2, r0, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	e019      	b.n	800376e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6919      	ldr	r1, [r3, #16]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	2207      	movs	r2, #7
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	4019      	ands	r1, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6898      	ldr	r0, [r3, #8]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	fa00 f203 	lsl.w	r2, r0, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b10      	cmp	r3, #16
 8003774:	d003      	beq.n	800377e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800377a:	2b11      	cmp	r3, #17
 800377c:	d132      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d125      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d126      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d11a      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_ADC_ConfigChannel+0x1e8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_ADC_ConfigChannel+0x1ec>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0c9a      	lsrs	r2, r3, #18
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037c4:	e002      	b.n	80037cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f9      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x1b2>
 80037d2:	e007      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012400 	.word	0x40012400
 80037fc:	20000008 	.word	0x20000008
 8003800:	431bde83 	.word	0x431bde83

08003804 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_ADC_AnalogWDGConfig+0xa4>)
 800381e:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_ADC_AnalogWDGConfig+0x2a>
 800382a:	2302      	movs	r3, #2
 800382c:	e035      	b.n	800389a <HAL_ADC_AnalogWDGConfig+0x96>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7a1b      	ldrb	r3, [r3, #8]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d108      	bne.n	8003850 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e007      	b.n	8003860 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_ADC_AnalogWDGConfig+0xa8>)
 8003868:	4013      	ands	r3, r2
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	6811      	ldr	r1, [r2, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6852      	ldr	r2, [r2, #4]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	68d2      	ldr	r2, [r2, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	6912      	ldr	r2, [r2, #16]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	00800200 	.word	0x00800200
 80038a8:	00400200 	.word	0x00400200
 80038ac:	ff3ffde0 	.word	0xff3ffde0

080038b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d040      	beq.n	8003950 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038de:	4b1f      	ldr	r3, [pc, #124]	; (800395c <ADC_Enable+0xac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <ADC_Enable+0xb0>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038ec:	e002      	b.n	80038f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f9      	bne.n	80038ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038fa:	f7ff fbf5 	bl	80030e8 <HAL_GetTick>
 80038fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003900:	e01f      	b.n	8003942 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003902:	f7ff fbf1 	bl	80030e8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d918      	bls.n	8003942 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d011      	beq.n	8003942 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f043 0210 	orr.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d1d8      	bne.n	8003902 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000008 	.word	0x20000008
 8003960:	431bde83 	.word	0x431bde83

08003964 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d12e      	bne.n	80039dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800398e:	f7ff fbab 	bl	80030e8 <HAL_GetTick>
 8003992:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003994:	e01b      	b.n	80039ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003996:	f7ff fba7 	bl	80030e8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d914      	bls.n	80039ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10d      	bne.n	80039ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e007      	b.n	80039de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d0dc      	beq.n	8003996 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a14:	4013      	ands	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a2a:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	60d3      	str	r3, [r2, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <__NVIC_GetPriorityGrouping+0x18>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	f003 0307 	and.w	r3, r3, #7
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db0b      	blt.n	8003a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	f003 021f 	and.w	r2, r3, #31
 8003a74:	4906      	ldr	r1, [pc, #24]	; (8003a90 <__NVIC_EnableIRQ+0x34>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	e000e100 	.word	0xe000e100

08003a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db0a      	blt.n	8003abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	490c      	ldr	r1, [pc, #48]	; (8003ae0 <__NVIC_SetPriority+0x4c>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003abc:	e00a      	b.n	8003ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <__NVIC_SetPriority+0x50>)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3b04      	subs	r3, #4
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	761a      	strb	r2, [r3, #24]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e100 	.word	0xe000e100
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f1c3 0307 	rsb	r3, r3, #7
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	bf28      	it	cs
 8003b06:	2304      	movcs	r3, #4
 8003b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d902      	bls.n	8003b18 <NVIC_EncodePriority+0x30>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3b03      	subs	r3, #3
 8003b16:	e000      	b.n	8003b1a <NVIC_EncodePriority+0x32>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43d9      	mvns	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	4313      	orrs	r3, r2
         );
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b5c:	d301      	bcc.n	8003b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00f      	b.n	8003b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <SysTick_Config+0x40>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b6a:	210f      	movs	r1, #15
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	f7ff ff90 	bl	8003a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <SysTick_Config+0x40>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <SysTick_Config+0x40>)
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000e010 	.word	0xe000e010

08003b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff2d 	bl	80039f8 <__NVIC_SetPriorityGrouping>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	4603      	mov	r3, r0
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb8:	f7ff ff42 	bl	8003a40 <__NVIC_GetPriorityGrouping>
 8003bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f7ff ff90 	bl	8003ae8 <NVIC_EncodePriority>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff5f 	bl	8003a94 <__NVIC_SetPriority>
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	4603      	mov	r3, r0
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff35 	bl	8003a5c <__NVIC_EnableIRQ>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ffa2 	bl	8003b4c <SysTick_Config>
 8003c08:	4603      	mov	r3, r0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d008      	beq.n	8003c3a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e020      	b.n	8003c7c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 020e 	bic.w	r2, r2, #14
 8003c48:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d005      	beq.n	8003caa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e051      	b.n	8003d4e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 020e 	bic.w	r2, r2, #14
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_DMA_Abort_IT+0xd0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d029      	beq.n	8003d28 <HAL_DMA_Abort_IT+0xa0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_DMA_Abort_IT+0xd4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_DMA_Abort_IT+0x9c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <HAL_DMA_Abort_IT+0xd8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01a      	beq.n	8003d1e <HAL_DMA_Abort_IT+0x96>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_DMA_Abort_IT+0xdc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d012      	beq.n	8003d18 <HAL_DMA_Abort_IT+0x90>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_DMA_Abort_IT+0xe0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00a      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x8a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_DMA_Abort_IT+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d102      	bne.n	8003d0c <HAL_DMA_Abort_IT+0x84>
 8003d06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d0a:	e00e      	b.n	8003d2a <HAL_DMA_Abort_IT+0xa2>
 8003d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d10:	e00b      	b.n	8003d2a <HAL_DMA_Abort_IT+0xa2>
 8003d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d16:	e008      	b.n	8003d2a <HAL_DMA_Abort_IT+0xa2>
 8003d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1c:	e005      	b.n	8003d2a <HAL_DMA_Abort_IT+0xa2>
 8003d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d22:	e002      	b.n	8003d2a <HAL_DMA_Abort_IT+0xa2>
 8003d24:	2310      	movs	r3, #16
 8003d26:	e000      	b.n	8003d2a <HAL_DMA_Abort_IT+0xa2>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <HAL_DMA_Abort_IT+0xe8>)
 8003d2c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
    } 
  }
  return status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40020008 	.word	0x40020008
 8003d5c:	4002001c 	.word	0x4002001c
 8003d60:	40020030 	.word	0x40020030
 8003d64:	40020044 	.word	0x40020044
 8003d68:	40020058 	.word	0x40020058
 8003d6c:	4002006c 	.word	0x4002006c
 8003d70:	40020000 	.word	0x40020000

08003d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b08b      	sub	sp, #44	; 0x2c
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d86:	e169      	b.n	800405c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d88:	2201      	movs	r2, #1
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f040 8158 	bne.w	8004056 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a9a      	ldr	r2, [pc, #616]	; (8004014 <HAL_GPIO_Init+0x2a0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d05e      	beq.n	8003e6e <HAL_GPIO_Init+0xfa>
 8003db0:	4a98      	ldr	r2, [pc, #608]	; (8004014 <HAL_GPIO_Init+0x2a0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d875      	bhi.n	8003ea2 <HAL_GPIO_Init+0x12e>
 8003db6:	4a98      	ldr	r2, [pc, #608]	; (8004018 <HAL_GPIO_Init+0x2a4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d058      	beq.n	8003e6e <HAL_GPIO_Init+0xfa>
 8003dbc:	4a96      	ldr	r2, [pc, #600]	; (8004018 <HAL_GPIO_Init+0x2a4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d86f      	bhi.n	8003ea2 <HAL_GPIO_Init+0x12e>
 8003dc2:	4a96      	ldr	r2, [pc, #600]	; (800401c <HAL_GPIO_Init+0x2a8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d052      	beq.n	8003e6e <HAL_GPIO_Init+0xfa>
 8003dc8:	4a94      	ldr	r2, [pc, #592]	; (800401c <HAL_GPIO_Init+0x2a8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d869      	bhi.n	8003ea2 <HAL_GPIO_Init+0x12e>
 8003dce:	4a94      	ldr	r2, [pc, #592]	; (8004020 <HAL_GPIO_Init+0x2ac>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d04c      	beq.n	8003e6e <HAL_GPIO_Init+0xfa>
 8003dd4:	4a92      	ldr	r2, [pc, #584]	; (8004020 <HAL_GPIO_Init+0x2ac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d863      	bhi.n	8003ea2 <HAL_GPIO_Init+0x12e>
 8003dda:	4a92      	ldr	r2, [pc, #584]	; (8004024 <HAL_GPIO_Init+0x2b0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d046      	beq.n	8003e6e <HAL_GPIO_Init+0xfa>
 8003de0:	4a90      	ldr	r2, [pc, #576]	; (8004024 <HAL_GPIO_Init+0x2b0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d85d      	bhi.n	8003ea2 <HAL_GPIO_Init+0x12e>
 8003de6:	2b12      	cmp	r3, #18
 8003de8:	d82a      	bhi.n	8003e40 <HAL_GPIO_Init+0xcc>
 8003dea:	2b12      	cmp	r3, #18
 8003dec:	d859      	bhi.n	8003ea2 <HAL_GPIO_Init+0x12e>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_GPIO_Init+0x80>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e6f 	.word	0x08003e6f
 8003df8:	08003e49 	.word	0x08003e49
 8003dfc:	08003e5b 	.word	0x08003e5b
 8003e00:	08003e9d 	.word	0x08003e9d
 8003e04:	08003ea3 	.word	0x08003ea3
 8003e08:	08003ea3 	.word	0x08003ea3
 8003e0c:	08003ea3 	.word	0x08003ea3
 8003e10:	08003ea3 	.word	0x08003ea3
 8003e14:	08003ea3 	.word	0x08003ea3
 8003e18:	08003ea3 	.word	0x08003ea3
 8003e1c:	08003ea3 	.word	0x08003ea3
 8003e20:	08003ea3 	.word	0x08003ea3
 8003e24:	08003ea3 	.word	0x08003ea3
 8003e28:	08003ea3 	.word	0x08003ea3
 8003e2c:	08003ea3 	.word	0x08003ea3
 8003e30:	08003ea3 	.word	0x08003ea3
 8003e34:	08003ea3 	.word	0x08003ea3
 8003e38:	08003e51 	.word	0x08003e51
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	4a79      	ldr	r2, [pc, #484]	; (8004028 <HAL_GPIO_Init+0x2b4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e46:	e02c      	b.n	8003ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	623b      	str	r3, [r7, #32]
          break;
 8003e4e:	e029      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	623b      	str	r3, [r7, #32]
          break;
 8003e58:	e024      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	623b      	str	r3, [r7, #32]
          break;
 8003e62:	e01f      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	623b      	str	r3, [r7, #32]
          break;
 8003e6c:	e01a      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e76:	2304      	movs	r3, #4
 8003e78:	623b      	str	r3, [r7, #32]
          break;
 8003e7a:	e013      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e84:	2308      	movs	r3, #8
 8003e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	611a      	str	r2, [r3, #16]
          break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e90:	2308      	movs	r3, #8
 8003e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	615a      	str	r2, [r3, #20]
          break;
 8003e9a:	e003      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
          break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_GPIO_Init+0x130>
          break;
 8003ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2bff      	cmp	r3, #255	; 0xff
 8003ea8:	d801      	bhi.n	8003eae <HAL_GPIO_Init+0x13a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	e001      	b.n	8003eb2 <HAL_GPIO_Init+0x13e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2bff      	cmp	r3, #255	; 0xff
 8003eb8:	d802      	bhi.n	8003ec0 <HAL_GPIO_Init+0x14c>
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	e002      	b.n	8003ec6 <HAL_GPIO_Init+0x152>
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	3b08      	subs	r3, #8
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	210f      	movs	r1, #15
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80b1 	beq.w	8004056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ef4:	4b4d      	ldr	r3, [pc, #308]	; (800402c <HAL_GPIO_Init+0x2b8>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4a4c      	ldr	r2, [pc, #304]	; (800402c <HAL_GPIO_Init+0x2b8>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6193      	str	r3, [r2, #24]
 8003f00:	4b4a      	ldr	r3, [pc, #296]	; (800402c <HAL_GPIO_Init+0x2b8>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f0c:	4a48      	ldr	r2, [pc, #288]	; (8004030 <HAL_GPIO_Init+0x2bc>)
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	3302      	adds	r3, #2
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a40      	ldr	r2, [pc, #256]	; (8004034 <HAL_GPIO_Init+0x2c0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <HAL_GPIO_Init+0x1ec>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_GPIO_Init+0x2c4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00d      	beq.n	8003f5c <HAL_GPIO_Init+0x1e8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3e      	ldr	r2, [pc, #248]	; (800403c <HAL_GPIO_Init+0x2c8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <HAL_GPIO_Init+0x1e4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	; (8004040 <HAL_GPIO_Init+0x2cc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_GPIO_Init+0x1e0>
 8003f50:	2303      	movs	r3, #3
 8003f52:	e006      	b.n	8003f62 <HAL_GPIO_Init+0x1ee>
 8003f54:	2304      	movs	r3, #4
 8003f56:	e004      	b.n	8003f62 <HAL_GPIO_Init+0x1ee>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e002      	b.n	8003f62 <HAL_GPIO_Init+0x1ee>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_GPIO_Init+0x1ee>
 8003f60:	2300      	movs	r3, #0
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	f002 0203 	and.w	r2, r2, #3
 8003f68:	0092      	lsls	r2, r2, #2
 8003f6a:	4093      	lsls	r3, r2
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f72:	492f      	ldr	r1, [pc, #188]	; (8004030 <HAL_GPIO_Init+0x2bc>)
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	3302      	adds	r3, #2
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d006      	beq.n	8003f9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	492c      	ldr	r1, [pc, #176]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	e006      	b.n	8003fa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	4928      	ldr	r1, [pc, #160]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	4922      	ldr	r1, [pc, #136]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e006      	b.n	8003fd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	491e      	ldr	r1, [pc, #120]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4918      	ldr	r1, [pc, #96]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
 8003fe8:	e006      	b.n	8003ff8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fea:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	4914      	ldr	r1, [pc, #80]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	490e      	ldr	r1, [pc, #56]	; (8004044 <HAL_GPIO_Init+0x2d0>)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	60cb      	str	r3, [r1, #12]
 8004010:	e021      	b.n	8004056 <HAL_GPIO_Init+0x2e2>
 8004012:	bf00      	nop
 8004014:	10320000 	.word	0x10320000
 8004018:	10310000 	.word	0x10310000
 800401c:	10220000 	.word	0x10220000
 8004020:	10210000 	.word	0x10210000
 8004024:	10120000 	.word	0x10120000
 8004028:	10110000 	.word	0x10110000
 800402c:	40021000 	.word	0x40021000
 8004030:	40010000 	.word	0x40010000
 8004034:	40010800 	.word	0x40010800
 8004038:	40010c00 	.word	0x40010c00
 800403c:	40011000 	.word	0x40011000
 8004040:	40011400 	.word	0x40011400
 8004044:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_GPIO_Init+0x304>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	43db      	mvns	r3, r3
 8004050:	4909      	ldr	r1, [pc, #36]	; (8004078 <HAL_GPIO_Init+0x304>)
 8004052:	4013      	ands	r3, r2
 8004054:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	3301      	adds	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	f47f ae8e 	bne.w	8003d88 <HAL_GPIO_Init+0x14>
  }
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	372c      	adds	r7, #44	; 0x2c
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e001      	b.n	800409e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	807b      	strh	r3, [r7, #2]
 80040b6:	4613      	mov	r3, r2
 80040b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040ba:	787b      	ldrb	r3, [r7, #1]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040c0:	887a      	ldrh	r2, [r7, #2]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040c6:	e003      	b.n	80040d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	041a      	lsls	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	611a      	str	r2, [r3, #16]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ec:	887a      	ldrh	r2, [r7, #2]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4013      	ands	r3, r2
 80040f2:	041a      	lsls	r2, r3, #16
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	43d9      	mvns	r1, r3
 80040f8:	887b      	ldrh	r3, [r7, #2]
 80040fa:	400b      	ands	r3, r1
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e12b      	b.n	8004376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe fbba 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800415e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800416e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004170:	f000 ffea 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 8004174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a81      	ldr	r2, [pc, #516]	; (8004380 <HAL_I2C_Init+0x274>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d807      	bhi.n	8004190 <HAL_I2C_Init+0x84>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a80      	ldr	r2, [pc, #512]	; (8004384 <HAL_I2C_Init+0x278>)
 8004184:	4293      	cmp	r3, r2
 8004186:	bf94      	ite	ls
 8004188:	2301      	movls	r3, #1
 800418a:	2300      	movhi	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e006      	b.n	800419e <HAL_I2C_Init+0x92>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a7d      	ldr	r2, [pc, #500]	; (8004388 <HAL_I2C_Init+0x27c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	bf94      	ite	ls
 8004198:	2301      	movls	r3, #1
 800419a:	2300      	movhi	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0e7      	b.n	8004376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a78      	ldr	r2, [pc, #480]	; (800438c <HAL_I2C_Init+0x280>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0c9b      	lsrs	r3, r3, #18
 80041b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a6a      	ldr	r2, [pc, #424]	; (8004380 <HAL_I2C_Init+0x274>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d802      	bhi.n	80041e0 <HAL_I2C_Init+0xd4>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	3301      	adds	r3, #1
 80041de:	e009      	b.n	80041f4 <HAL_I2C_Init+0xe8>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	4a69      	ldr	r2, [pc, #420]	; (8004390 <HAL_I2C_Init+0x284>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	3301      	adds	r3, #1
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	495c      	ldr	r1, [pc, #368]	; (8004380 <HAL_I2C_Init+0x274>)
 8004210:	428b      	cmp	r3, r1
 8004212:	d819      	bhi.n	8004248 <HAL_I2C_Init+0x13c>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1e59      	subs	r1, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004228:	400b      	ands	r3, r1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_I2C_Init+0x138>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1e59      	subs	r1, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fbb1 f3f3 	udiv	r3, r1, r3
 800423c:	3301      	adds	r3, #1
 800423e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004242:	e051      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 8004244:	2304      	movs	r3, #4
 8004246:	e04f      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <HAL_I2C_Init+0x168>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	440b      	add	r3, r1
 800425e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e012      	b.n	800429a <HAL_I2C_Init+0x18e>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1e58      	subs	r0, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	0099      	lsls	r1, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	fbb0 f3f3 	udiv	r3, r0, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Init+0x196>
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10e      	bne.n	80042c8 <HAL_I2C_Init+0x1bc>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e58      	subs	r0, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	440b      	add	r3, r1
 80042b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	e00f      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1e58      	subs	r0, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	0099      	lsls	r1, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	fbb0 f3f3 	udiv	r3, r0, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	6809      	ldr	r1, [r1, #0]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6911      	ldr	r1, [r2, #16]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68d2      	ldr	r2, [r2, #12]
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	000186a0 	.word	0x000186a0
 8004384:	001e847f 	.word	0x001e847f
 8004388:	003d08ff 	.word	0x003d08ff
 800438c:	431bde83 	.word	0x431bde83
 8004390:	10624dd3 	.word	0x10624dd3

08004394 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	460b      	mov	r3, r1
 80043a2:	817b      	strh	r3, [r7, #10]
 80043a4:	4613      	mov	r3, r2
 80043a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a8:	f7fe fe9e 	bl	80030e8 <HAL_GetTick>
 80043ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	f040 80e0 	bne.w	800457c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2319      	movs	r3, #25
 80043c2:	2201      	movs	r2, #1
 80043c4:	4970      	ldr	r1, [pc, #448]	; (8004588 <HAL_I2C_Master_Transmit+0x1f4>)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f964 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0d3      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_I2C_Master_Transmit+0x50>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e0cc      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d007      	beq.n	800440a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2221      	movs	r2, #33	; 0x21
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2210      	movs	r2, #16
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	893a      	ldrh	r2, [r7, #8]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a50      	ldr	r2, [pc, #320]	; (800458c <HAL_I2C_Master_Transmit+0x1f8>)
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f89c 	bl	8004590 <I2C_MasterRequestWrite>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e08d      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004478:	e066      	b.n	8004548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f9de 	bl	8004840 <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06b      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d11b      	bne.n	800451c <HAL_I2C_Master_Transmit+0x188>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d017      	beq.n	800451c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	6a39      	ldr	r1, [r7, #32]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f9ce 	bl	80048c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b04      	cmp	r3, #4
 8004532:	d107      	bne.n	8004544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e01a      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d194      	bne.n	800447a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	00100002 	.word	0x00100002
 800458c:	ffff0000 	.word	0xffff0000

08004590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	460b      	mov	r3, r1
 800459e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d006      	beq.n	80045ba <I2C_MasterRequestWrite+0x2a>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d003      	beq.n	80045ba <I2C_MasterRequestWrite+0x2a>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b8:	d108      	bne.n	80045cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e00b      	b.n	80045e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b12      	cmp	r3, #18
 80045d2:	d107      	bne.n	80045e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f84f 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d103      	bne.n	8004614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e035      	b.n	8004684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004620:	d108      	bne.n	8004634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e01b      	b.n	800466c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004634:	897b      	ldrh	r3, [r7, #10]
 8004636:	11db      	asrs	r3, r3, #7
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0306 	and.w	r3, r3, #6
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f063 030f 	orn	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	490e      	ldr	r1, [pc, #56]	; (800468c <I2C_MasterRequestWrite+0xfc>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f875 	bl	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e010      	b.n	8004684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4907      	ldr	r1, [pc, #28]	; (8004690 <I2C_MasterRequestWrite+0x100>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f865 	bl	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	00010008 	.word	0x00010008
 8004690:	00010002 	.word	0x00010002

08004694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a4:	e025      	b.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d021      	beq.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe fd1b 	bl	80030e8 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e023      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10d      	bne.n	8004718 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4013      	ands	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	e00c      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d0b6      	beq.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004750:	e051      	b.n	80047f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004760:	d123      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004770:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800477a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f043 0204 	orr.w	r2, r3, #4
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e046      	b.n	8004838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d021      	beq.n	80047f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fe fc99 	bl	80030e8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d116      	bne.n	80047f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e020      	b.n	8004838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10c      	bne.n	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	43da      	mvns	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e00b      	b.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	43da      	mvns	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4013      	ands	r3, r2
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d18d      	bne.n	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800484c:	e02d      	b.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f878 	bl	8004944 <I2C_IsAcknowledgeFailed>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e02d      	b.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d021      	beq.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fe fc3f 	bl	80030e8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d116      	bne.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e007      	b.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d1ca      	bne.n	800484e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ce:	e02d      	b.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f837 	bl	8004944 <I2C_IsAcknowledgeFailed>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e02d      	b.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d021      	beq.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7fe fbfe 	bl	80030e8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d116      	bne.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e007      	b.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d1ca      	bne.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d11b      	bne.n	8004994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f043 0204 	orr.w	r2, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e272      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8087 	beq.w	8004ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049c0:	4b92      	ldr	r3, [pc, #584]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d00c      	beq.n	80049e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049cc:	4b8f      	ldr	r3, [pc, #572]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d112      	bne.n	80049fe <HAL_RCC_OscConfig+0x5e>
 80049d8:	4b8c      	ldr	r3, [pc, #560]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d10b      	bne.n	80049fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e6:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d06c      	beq.n	8004acc <HAL_RCC_OscConfig+0x12c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d168      	bne.n	8004acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e24c      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x76>
 8004a08:	4b80      	ldr	r3, [pc, #512]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7f      	ldr	r2, [pc, #508]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e02e      	b.n	8004a74 <HAL_RCC_OscConfig+0xd4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x98>
 8004a1e:	4b7b      	ldr	r3, [pc, #492]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7a      	ldr	r2, [pc, #488]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b78      	ldr	r3, [pc, #480]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a77      	ldr	r2, [pc, #476]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e01d      	b.n	8004a74 <HAL_RCC_OscConfig+0xd4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0xbc>
 8004a42:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a71      	ldr	r2, [pc, #452]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b6f      	ldr	r3, [pc, #444]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6e      	ldr	r2, [pc, #440]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0xd4>
 8004a5c:	4b6b      	ldr	r3, [pc, #428]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6a      	ldr	r2, [pc, #424]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a67      	ldr	r2, [pc, #412]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fb34 	bl	80030e8 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe fb30 	bl	80030e8 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e200      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b5d      	ldr	r3, [pc, #372]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0xe4>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fb20 	bl	80030e8 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fe fb1c 	bl	80030e8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1ec      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004abe:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x10c>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d063      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d11c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x18c>
 8004af2:	4b46      	ldr	r3, [pc, #280]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_OscConfig+0x176>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e1c0      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4939      	ldr	r1, [pc, #228]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2a:	e03a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fe fad5 	bl	80030e8 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b42:	f7fe fad1 	bl	80030e8 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e1a1      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4927      	ldr	r1, [pc, #156]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fab4 	bl	80030e8 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b84:	f7fe fab0 	bl	80030e8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e180      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d03a      	beq.n	8004c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d019      	beq.n	8004bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbc:	f7fe fa94 	bl	80030e8 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc4:	f7fe fa90 	bl	80030e8 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e160      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004be2:	2001      	movs	r0, #1
 8004be4:	f000 fad8 	bl	8005198 <RCC_Delay>
 8004be8:	e01c      	b.n	8004c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf0:	f7fe fa7a 	bl	80030e8 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf6:	e00f      	b.n	8004c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fe fa76 	bl	80030e8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d908      	bls.n	8004c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e146      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	42420000 	.word	0x42420000
 8004c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	4b92      	ldr	r3, [pc, #584]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e9      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80a6 	beq.w	8004d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b8b      	ldr	r3, [pc, #556]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	4a87      	ldr	r2, [pc, #540]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	61d3      	str	r3, [r2, #28]
 8004c4e:	4b85      	ldr	r3, [pc, #532]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5e:	4b82      	ldr	r3, [pc, #520]	; (8004e68 <HAL_RCC_OscConfig+0x4c8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d118      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6a:	4b7f      	ldr	r3, [pc, #508]	; (8004e68 <HAL_RCC_OscConfig+0x4c8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7e      	ldr	r2, [pc, #504]	; (8004e68 <HAL_RCC_OscConfig+0x4c8>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fe fa37 	bl	80030e8 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fe fa33 	bl	80030e8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b64      	cmp	r3, #100	; 0x64
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e103      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b75      	ldr	r3, [pc, #468]	; (8004e68 <HAL_RCC_OscConfig+0x4c8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x312>
 8004ca4:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4a6e      	ldr	r2, [pc, #440]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	e02d      	b.n	8004d0e <HAL_RCC_OscConfig+0x36e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x334>
 8004cba:	4b6a      	ldr	r3, [pc, #424]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4a69      	ldr	r2, [pc, #420]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	6213      	str	r3, [r2, #32]
 8004cc6:	4b67      	ldr	r3, [pc, #412]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	4a66      	ldr	r2, [pc, #408]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	6213      	str	r3, [r2, #32]
 8004cd2:	e01c      	b.n	8004d0e <HAL_RCC_OscConfig+0x36e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x356>
 8004cdc:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	4a60      	ldr	r2, [pc, #384]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	6213      	str	r3, [r2, #32]
 8004ce8:	4b5e      	ldr	r3, [pc, #376]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4a5d      	ldr	r2, [pc, #372]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	6213      	str	r3, [r2, #32]
 8004cf4:	e00b      	b.n	8004d0e <HAL_RCC_OscConfig+0x36e>
 8004cf6:	4b5b      	ldr	r3, [pc, #364]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	4a5a      	ldr	r2, [pc, #360]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6213      	str	r3, [r2, #32]
 8004d02:	4b58      	ldr	r3, [pc, #352]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	4a57      	ldr	r2, [pc, #348]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d015      	beq.n	8004d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d16:	f7fe f9e7 	bl	80030e8 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7fe f9e3 	bl	80030e8 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0b1      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d34:	4b4b      	ldr	r3, [pc, #300]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ee      	beq.n	8004d1e <HAL_RCC_OscConfig+0x37e>
 8004d40:	e014      	b.n	8004d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d42:	f7fe f9d1 	bl	80030e8 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d48:	e00a      	b.n	8004d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fe f9cd 	bl	80030e8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e09b      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d60:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1ee      	bne.n	8004d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d105      	bne.n	8004d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d72:	4b3c      	ldr	r3, [pc, #240]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	4a3b      	ldr	r2, [pc, #236]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8087 	beq.w	8004e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d061      	beq.n	8004e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d146      	bne.n	8004e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9c:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_RCC_OscConfig+0x4cc>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da2:	f7fe f9a1 	bl	80030e8 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004daa:	f7fe f99d 	bl	80030e8 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e06d      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dbc:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f0      	bne.n	8004daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dd2:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4921      	ldr	r1, [pc, #132]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de4:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a19      	ldr	r1, [r3, #32]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	430b      	orrs	r3, r1
 8004df6:	491b      	ldr	r1, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x4cc>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e02:	f7fe f971 	bl	80030e8 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fe f96d 	bl	80030e8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e03d      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x46a>
 8004e28:	e035      	b.n	8004e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_RCC_OscConfig+0x4cc>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fe f95a 	bl	80030e8 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fe f956 	bl	80030e8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e026      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x498>
 8004e56:	e01e      	b.n	8004e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e019      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_OscConfig+0x500>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0d0      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d910      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b67      	ldr	r3, [pc, #412]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 0207 	bic.w	r2, r3, #7
 8004ece:	4965      	ldr	r1, [pc, #404]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b63      	ldr	r3, [pc, #396]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0b8      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d020      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4a58      	ldr	r2, [pc, #352]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f18:	4b53      	ldr	r3, [pc, #332]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a52      	ldr	r2, [pc, #328]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f24:	4b50      	ldr	r3, [pc, #320]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	494d      	ldr	r1, [pc, #308]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d040      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	4b47      	ldr	r3, [pc, #284]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d115      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e07f      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e073      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3d      	ldr	r3, [pc, #244]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4936      	ldr	r1, [pc, #216]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fe f8a8 	bl	80030e8 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fe f8a4 	bl	80030e8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e053      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d210      	bcs.n	8004ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 0207 	bic.w	r2, r3, #7
 8004fda:	4922      	ldr	r1, [pc, #136]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e032      	b.n	800505a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4916      	ldr	r1, [pc, #88]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 800500e:	4313      	orrs	r3, r2
 8005010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	490e      	ldr	r1, [pc, #56]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005032:	f000 f821 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8005036:	4602      	mov	r2, r0
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	490a      	ldr	r1, [pc, #40]	; (800506c <HAL_RCC_ClockConfig+0x1c8>)
 8005044:	5ccb      	ldrb	r3, [r1, r3]
 8005046:	fa22 f303 	lsr.w	r3, r2, r3
 800504a:	4a09      	ldr	r2, [pc, #36]	; (8005070 <HAL_RCC_ClockConfig+0x1cc>)
 800504c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800504e:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1d0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe f806 	bl	8003064 <HAL_InitTick>

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40022000 	.word	0x40022000
 8005068:	40021000 	.word	0x40021000
 800506c:	08009af8 	.word	0x08009af8
 8005070:	20000008 	.word	0x20000008
 8005074:	20000010 	.word	0x20000010

08005078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	b490      	push	{r4, r7}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <HAL_RCC_GetSysClockFreq+0xac>)
 8005080:	1d3c      	adds	r4, r7, #4
 8005082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005088:	f240 2301 	movw	r3, #513	; 0x201
 800508c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x40>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x46>
 80050b6:	e02b      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050b8:	4b1c      	ldr	r3, [pc, #112]	; (800512c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050ba:	623b      	str	r3, [r7, #32]
      break;
 80050bc:	e02b      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	0c9b      	lsrs	r3, r3, #18
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	3328      	adds	r3, #40	; 0x28
 80050c8:	443b      	add	r3, r7
 80050ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d012      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	0c5b      	lsrs	r3, r3, #17
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	3328      	adds	r3, #40	; 0x28
 80050e6:	443b      	add	r3, r7
 80050e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050f2:	fb03 f202 	mul.w	r2, r3, r2
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	e004      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	623b      	str	r3, [r7, #32]
      break;
 800510e:	e002      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005112:	623b      	str	r3, [r7, #32]
      break;
 8005114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005116:	6a3b      	ldr	r3, [r7, #32]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	; 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bc90      	pop	{r4, r7}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	08009ae8 	.word	0x08009ae8
 8005128:	40021000 	.word	0x40021000
 800512c:	007a1200 	.word	0x007a1200
 8005130:	003d0900 	.word	0x003d0900

08005134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005138:	4b02      	ldr	r3, [pc, #8]	; (8005144 <HAL_RCC_GetHCLKFreq+0x10>)
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr
 8005144:	20000008 	.word	0x20000008

08005148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800514c:	f7ff fff2 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005150:	4602      	mov	r2, r0
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	4903      	ldr	r1, [pc, #12]	; (800516c <HAL_RCC_GetPCLK1Freq+0x24>)
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	08009b08 	.word	0x08009b08

08005170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005174:	f7ff ffde 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	0adb      	lsrs	r3, r3, #11
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4903      	ldr	r1, [pc, #12]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	08009b08 	.word	0x08009b08

08005198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <RCC_Delay+0x34>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <RCC_Delay+0x38>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0a5b      	lsrs	r3, r3, #9
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051b4:	bf00      	nop
  }
  while (Delay --);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1e5a      	subs	r2, r3, #1
 80051ba:	60fa      	str	r2, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f9      	bne.n	80051b4 <RCC_Delay+0x1c>
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	20000008 	.word	0x20000008
 80051d0:	10624dd3 	.word	0x10624dd3

080051d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d07d      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051f0:	2300      	movs	r3, #0
 80051f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f4:	4b4f      	ldr	r3, [pc, #316]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10d      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005200:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	4a4b      	ldr	r2, [pc, #300]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520a:	61d3      	str	r3, [r2, #28]
 800520c:	4b49      	ldr	r3, [pc, #292]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d118      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005228:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a42      	ldr	r2, [pc, #264]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005234:	f7fd ff58 	bl	80030e8 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523a:	e008      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523c:	f7fd ff54 	bl	80030e8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e06d      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524e:	4b3a      	ldr	r3, [pc, #232]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f0      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02e      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	429a      	cmp	r2, r3
 8005276:	d027      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005278:	4b2e      	ldr	r3, [pc, #184]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005282:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800528e:	4a29      	ldr	r2, [pc, #164]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d014      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd ff23 	bl	80030e8 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a4:	e00a      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fd ff1f 	bl	80030e8 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e036      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ee      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c8:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4917      	ldr	r1, [pc, #92]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052f8:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	490b      	ldr	r1, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4904      	ldr	r1, [pc, #16]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	40007000 	.word	0x40007000
 800533c:	42420440 	.word	0x42420440

08005340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e041      	b.n	80053d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fd fade 	bl	8002928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 fa70 	bl	8005864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d001      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e03a      	b.n	800546e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_TIM_Base_Start_IT+0x98>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x58>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005422:	d009      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x58>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a14      	ldr	r2, [pc, #80]	; (800547c <HAL_TIM_Base_Start_IT+0x9c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x58>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <HAL_TIM_Base_Start_IT+0xa0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d111      	bne.n	800545c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d010      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	e007      	b.n	800546c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800

08005484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b02      	cmp	r3, #2
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0202 	mvn.w	r2, #2
 80054b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f9b1 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f9a4 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f9b3 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0204 	mvn.w	r2, #4
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f987 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f97a 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f989 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b08      	cmp	r3, #8
 8005540:	d122      	bne.n	8005588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b08      	cmp	r3, #8
 800554e:	d11b      	bne.n	8005588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0208 	mvn.w	r2, #8
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f95d 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f950 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f95f 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b10      	cmp	r3, #16
 8005594:	d122      	bne.n	80055dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d11b      	bne.n	80055dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0210 	mvn.w	r2, #16
 80055ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2208      	movs	r2, #8
 80055b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f933 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f926 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f935 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10e      	bne.n	8005608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d107      	bne.n	8005608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0201 	mvn.w	r2, #1
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd fb80 	bl	8002d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d10e      	bne.n	8005634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005620:	2b80      	cmp	r3, #128	; 0x80
 8005622:	d107      	bne.n	8005634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa77 	bl	8005b22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d10e      	bne.n	8005660 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d107      	bne.n	8005660 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8f9 	bl	8005852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b20      	cmp	r3, #32
 800566c:	d10e      	bne.n	800568c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b20      	cmp	r3, #32
 800567a:	d107      	bne.n	800568c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0220 	mvn.w	r2, #32
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa42 	bl	8005b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0b3      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x180>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e4:	d03e      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0xd0>
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ea:	f200 8087 	bhi.w	80057fc <HAL_TIM_ConfigClockSource+0x168>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	f000 8085 	beq.w	8005800 <HAL_TIM_ConfigClockSource+0x16c>
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fa:	d87f      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 80056fc:	2b70      	cmp	r3, #112	; 0x70
 80056fe:	d01a      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0xa2>
 8005700:	2b70      	cmp	r3, #112	; 0x70
 8005702:	d87b      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 8005704:	2b60      	cmp	r3, #96	; 0x60
 8005706:	d050      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x116>
 8005708:	2b60      	cmp	r3, #96	; 0x60
 800570a:	d877      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 800570c:	2b50      	cmp	r3, #80	; 0x50
 800570e:	d03c      	beq.n	800578a <HAL_TIM_ConfigClockSource+0xf6>
 8005710:	2b50      	cmp	r3, #80	; 0x50
 8005712:	d873      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d058      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x136>
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d86f      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 800571c:	2b30      	cmp	r3, #48	; 0x30
 800571e:	d064      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x156>
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d86b      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 8005724:	2b20      	cmp	r3, #32
 8005726:	d060      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x156>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d867      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d05c      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x156>
 8005730:	2b10      	cmp	r3, #16
 8005732:	d05a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005734:	e062      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6899      	ldr	r1, [r3, #8]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f000 f966 	bl	8005a16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005758:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	609a      	str	r2, [r3, #8]
      break;
 8005762:	e04e      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6899      	ldr	r1, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f000 f94f 	bl	8005a16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005786:	609a      	str	r2, [r3, #8]
      break;
 8005788:	e03b      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f000 f8c6 	bl	8005928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2150      	movs	r1, #80	; 0x50
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f91d 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80057a8:	e02b      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 f8e4 	bl	8005984 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2160      	movs	r1, #96	; 0x60
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f90d 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80057c8:	e01b      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 f8a6 	bl	8005928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2140      	movs	r1, #64	; 0x40
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f8fd 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e00b      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f000 f8f4 	bl	80059e2 <TIM_ITRx_SetConfig>
        break;
 80057fa:	e002      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005800:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <TIM_Base_SetConfig+0xb8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0x30>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0x30>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a26      	ldr	r2, [pc, #152]	; (8005920 <TIM_Base_SetConfig+0xbc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0x30>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a25      	ldr	r2, [pc, #148]	; (8005924 <TIM_Base_SetConfig+0xc0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <TIM_Base_SetConfig+0xb8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0x62>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <TIM_Base_SetConfig+0xbc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0x62>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <TIM_Base_SetConfig+0xc0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d108      	bne.n	80058d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a07      	ldr	r2, [pc, #28]	; (800591c <TIM_Base_SetConfig+0xb8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d103      	bne.n	800590c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	615a      	str	r2, [r3, #20]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800

08005928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 030a 	bic.w	r3, r3, #10
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	031b      	lsls	r3, r3, #12
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	021a      	lsls	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	609a      	str	r2, [r3, #8]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e046      	b.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d009      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a10      	ldr	r2, [pc, #64]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10c      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800

08005b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e03f      	b.n	8005bc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc ff08 	bl	8002970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc85 	bl	8006488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b08a      	sub	sp, #40	; 0x28
 8005bd2:	af02      	add	r7, sp, #8
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d17c      	bne.n	8005ce8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_UART_Transmit+0x2c>
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e075      	b.n	8005cea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Transmit+0x3e>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e06e      	b.n	8005cea <HAL_UART_Transmit+0x11c>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2221      	movs	r2, #33	; 0x21
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c22:	f7fd fa61 	bl	80030e8 <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	d108      	bne.n	8005c50 <HAL_UART_Transmit+0x82>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	e003      	b.n	8005c58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c60:	e02a      	b.n	8005cb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa38 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e036      	b.n	8005cea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	3302      	adds	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e007      	b.n	8005caa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cf      	bne.n	8005c62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2140      	movs	r1, #64	; 0x40
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fa08 	bl	80060e2 <UART_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e006      	b.n	8005cea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d11d      	bne.n	8005d48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_UART_Receive_IT+0x26>
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e016      	b.n	8005d4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Receive_IT+0x38>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e00f      	b.n	8005d4a <HAL_UART_Receive_IT+0x58>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fa19 	bl	8006176 <UART_Start_Receive_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_UART_IRQHandler+0x52>
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fac9 	bl	8006336 <UART_Receive_IT>
      return;
 8005da4:	e17b      	b.n	800609e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80b1 	beq.w	8005f10 <HAL_UART_IRQHandler+0x1bc>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x70>
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80a6 	beq.w	8005f10 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_UART_IRQHandler+0x90>
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f043 0201 	orr.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_UART_IRQHandler+0xb0>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	f043 0202 	orr.w	r2, r3, #2
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_UART_IRQHandler+0xd0>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f043 0204 	orr.w	r2, r3, #4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00f      	beq.n	8005e4e <HAL_UART_IRQHandler+0xfa>
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <HAL_UART_IRQHandler+0xee>
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0208 	orr.w	r2, r3, #8
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 811e 	beq.w	8006094 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <HAL_UART_IRQHandler+0x11e>
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fa62 	bl	8006336 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <HAL_UART_IRQHandler+0x146>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d031      	beq.n	8005efe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9a4 	bl	80061e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d023      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d013      	beq.n	8005eee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	4a76      	ldr	r2, [pc, #472]	; (80060a4 <HAL_UART_IRQHandler+0x350>)
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fed8 	bl	8003c88 <HAL_DMA_Abort_IT>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	e00e      	b.n	8005f0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8e3 	bl	80060ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e00a      	b.n	8005f0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8df 	bl	80060ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	e006      	b.n	8005f0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8db 	bl	80060ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f0a:	e0c3      	b.n	8006094 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	bf00      	nop
    return;
 8005f0e:	e0c1      	b.n	8006094 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f040 80a1 	bne.w	800605c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 809b 	beq.w	800605c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8095 	beq.w	800605c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d04e      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005f60:	8a3b      	ldrh	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8098 	beq.w	8006098 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f6c:	8a3a      	ldrh	r2, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	f080 8092 	bcs.w	8006098 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8a3a      	ldrh	r2, [r7, #16]
 8005f78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d02b      	beq.n	8005fdc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f92:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0201 	bic.w	r2, r2, #1
 8005fa2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695a      	ldr	r2, [r3, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0210 	bic.w	r2, r2, #16
 8005fd0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fd fe1b 	bl	8003c12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f86d 	bl	80060cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ff2:	e051      	b.n	8006098 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d047      	beq.n	800609c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800600c:	8a7b      	ldrh	r3, [r7, #18]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d044      	beq.n	800609c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006020:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0210 	bic.w	r2, r2, #16
 800604e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006050:	8a7b      	ldrh	r3, [r7, #18]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f839 	bl	80060cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800605a:	e01f      	b.n	800609c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x324>
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8f9 	bl	8006268 <UART_Transmit_IT>
    return;
 8006076:	e012      	b.n	800609e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00d      	beq.n	800609e <HAL_UART_IRQHandler+0x34a>
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f93a 	bl	8006306 <UART_EndTransmit_IT>
    return;
 8006092:	e004      	b.n	800609e <HAL_UART_IRQHandler+0x34a>
    return;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_UART_IRQHandler+0x34a>
      return;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_UART_IRQHandler+0x34a>
      return;
 800609c:	bf00      	nop
  }
}
 800609e:	3728      	adds	r7, #40	; 0x28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	08006241 	.word	0x08006241

080060a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr

080060e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	e02c      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d028      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <UART_WaitOnFlagUntilTimeout+0x30>
 8006102:	f7fc fff1 	bl	80030e8 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	429a      	cmp	r2, r3
 8006110:	d21d      	bcs.n	800614e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006120:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d0c3      	beq.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2222      	movs	r2, #34	; 0x22
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0220 	orr.w	r2, r2, #32
 80061da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	2b01      	cmp	r3, #1
 8006216:	d107      	bne.n	8006228 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0210 	bic.w	r2, r2, #16
 8006226:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff ff2d 	bl	80060ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b21      	cmp	r3, #33	; 0x21
 800627a:	d13e      	bne.n	80062fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d114      	bne.n	80062b0 <UART_Transmit_IT+0x48>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d110      	bne.n	80062b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]
 80062ae:	e008      	b.n	80062c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	1c59      	adds	r1, r3, #1
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6211      	str	r1, [r2, #32]
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	4619      	mov	r1, r3
 80062d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
  }
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff febe 	bl	80060a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b22      	cmp	r3, #34	; 0x22
 8006348:	f040 8099 	bne.w	800647e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006354:	d117      	bne.n	8006386 <UART_Receive_IT+0x50>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d113      	bne.n	8006386 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006374:	b29a      	uxth	r2, r3
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
 8006384:	e026      	b.n	80063d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006398:	d007      	beq.n	80063aa <UART_Receive_IT+0x74>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <UART_Receive_IT+0x82>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e008      	b.n	80063ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29b      	uxth	r3, r3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4619      	mov	r1, r3
 80063e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d148      	bne.n	800647a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0220 	bic.w	r2, r2, #32
 80063f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	d123      	bne.n	8006470 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0210 	bic.w	r2, r2, #16
 800643c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d10a      	bne.n	8006462 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fe2f 	bl	80060cc <HAL_UARTEx_RxEventCallback>
 800646e:	e002      	b.n	8006476 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fc fcb1 	bl	8002dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e002      	b.n	8006480 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064c2:	f023 030c 	bic.w	r3, r3, #12
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2c      	ldr	r2, [pc, #176]	; (800659c <UART_SetConfig+0x114>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d103      	bne.n	80064f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fe fe3e 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	e002      	b.n	80064fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064f8:	f7fe fe26 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 80064fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009a      	lsls	r2, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <UART_SetConfig+0x118>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	0119      	lsls	r1, r3, #4
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009a      	lsls	r2, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	fbb2 f2f3 	udiv	r2, r2, r3
 8006534:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <UART_SetConfig+0x118>)
 8006536:	fba3 0302 	umull	r0, r3, r3, r2
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	2064      	movs	r0, #100	; 0x64
 800653e:	fb00 f303 	mul.w	r3, r0, r3
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	3332      	adds	r3, #50	; 0x32
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <UART_SetConfig+0x118>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006554:	4419      	add	r1, r3
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009a      	lsls	r2, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	fbb2 f2f3 	udiv	r2, r2, r3
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <UART_SetConfig+0x118>)
 800656e:	fba3 0302 	umull	r0, r3, r3, r2
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	2064      	movs	r0, #100	; 0x64
 8006576:	fb00 f303 	mul.w	r3, r0, r3
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	3332      	adds	r3, #50	; 0x32
 8006580:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <UART_SetConfig+0x118>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	440a      	add	r2, r1
 8006592:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40013800 	.word	0x40013800
 80065a0:	51eb851f 	.word	0x51eb851f

080065a4 <atoff>:
 80065a4:	2100      	movs	r1, #0
 80065a6:	f000 bf5f 	b.w	8007468 <strtof>

080065aa <atoi>:
 80065aa:	220a      	movs	r2, #10
 80065ac:	2100      	movs	r1, #0
 80065ae:	f001 b885 	b.w	80076bc <strtol>
	...

080065b4 <__errno>:
 80065b4:	4b01      	ldr	r3, [pc, #4]	; (80065bc <__errno+0x8>)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000018 	.word	0x20000018

080065c0 <__libc_init_array>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	2600      	movs	r6, #0
 80065c4:	4d0c      	ldr	r5, [pc, #48]	; (80065f8 <__libc_init_array+0x38>)
 80065c6:	4c0d      	ldr	r4, [pc, #52]	; (80065fc <__libc_init_array+0x3c>)
 80065c8:	1b64      	subs	r4, r4, r5
 80065ca:	10a4      	asrs	r4, r4, #2
 80065cc:	42a6      	cmp	r6, r4
 80065ce:	d109      	bne.n	80065e4 <__libc_init_array+0x24>
 80065d0:	f003 f9b6 	bl	8009940 <_init>
 80065d4:	2600      	movs	r6, #0
 80065d6:	4d0a      	ldr	r5, [pc, #40]	; (8006600 <__libc_init_array+0x40>)
 80065d8:	4c0a      	ldr	r4, [pc, #40]	; (8006604 <__libc_init_array+0x44>)
 80065da:	1b64      	subs	r4, r4, r5
 80065dc:	10a4      	asrs	r4, r4, #2
 80065de:	42a6      	cmp	r6, r4
 80065e0:	d105      	bne.n	80065ee <__libc_init_array+0x2e>
 80065e2:	bd70      	pop	{r4, r5, r6, pc}
 80065e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e8:	4798      	blx	r3
 80065ea:	3601      	adds	r6, #1
 80065ec:	e7ee      	b.n	80065cc <__libc_init_array+0xc>
 80065ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f2:	4798      	blx	r3
 80065f4:	3601      	adds	r6, #1
 80065f6:	e7f2      	b.n	80065de <__libc_init_array+0x1e>
 80065f8:	08009f98 	.word	0x08009f98
 80065fc:	08009f98 	.word	0x08009f98
 8006600:	08009f98 	.word	0x08009f98
 8006604:	08009f9c 	.word	0x08009f9c

08006608 <malloc>:
 8006608:	4b02      	ldr	r3, [pc, #8]	; (8006614 <malloc+0xc>)
 800660a:	4601      	mov	r1, r0
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f000 b87b 	b.w	8006708 <_malloc_r>
 8006612:	bf00      	nop
 8006614:	20000018 	.word	0x20000018

08006618 <free>:
 8006618:	4b02      	ldr	r3, [pc, #8]	; (8006624 <free+0xc>)
 800661a:	4601      	mov	r1, r0
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f000 b80b 	b.w	8006638 <_free_r>
 8006622:	bf00      	nop
 8006624:	20000018 	.word	0x20000018

08006628 <memset>:
 8006628:	4603      	mov	r3, r0
 800662a:	4402      	add	r2, r0
 800662c:	4293      	cmp	r3, r2
 800662e:	d100      	bne.n	8006632 <memset+0xa>
 8006630:	4770      	bx	lr
 8006632:	f803 1b01 	strb.w	r1, [r3], #1
 8006636:	e7f9      	b.n	800662c <memset+0x4>

08006638 <_free_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4605      	mov	r5, r0
 800663c:	2900      	cmp	r1, #0
 800663e:	d040      	beq.n	80066c2 <_free_r+0x8a>
 8006640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006644:	1f0c      	subs	r4, r1, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	bfb8      	it	lt
 800664a:	18e4      	addlt	r4, r4, r3
 800664c:	f001 fbf6 	bl	8007e3c <__malloc_lock>
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <_free_r+0x8c>)
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	b933      	cbnz	r3, 8006664 <_free_r+0x2c>
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	6014      	str	r4, [r2, #0]
 800665a:	4628      	mov	r0, r5
 800665c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006660:	f001 bbf2 	b.w	8007e48 <__malloc_unlock>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d908      	bls.n	800667a <_free_r+0x42>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	1821      	adds	r1, r4, r0
 800666c:	428b      	cmp	r3, r1
 800666e:	bf01      	itttt	eq
 8006670:	6819      	ldreq	r1, [r3, #0]
 8006672:	685b      	ldreq	r3, [r3, #4]
 8006674:	1809      	addeq	r1, r1, r0
 8006676:	6021      	streq	r1, [r4, #0]
 8006678:	e7ed      	b.n	8006656 <_free_r+0x1e>
 800667a:	461a      	mov	r2, r3
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	b10b      	cbz	r3, 8006684 <_free_r+0x4c>
 8006680:	42a3      	cmp	r3, r4
 8006682:	d9fa      	bls.n	800667a <_free_r+0x42>
 8006684:	6811      	ldr	r1, [r2, #0]
 8006686:	1850      	adds	r0, r2, r1
 8006688:	42a0      	cmp	r0, r4
 800668a:	d10b      	bne.n	80066a4 <_free_r+0x6c>
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	4401      	add	r1, r0
 8006690:	1850      	adds	r0, r2, r1
 8006692:	4283      	cmp	r3, r0
 8006694:	6011      	str	r1, [r2, #0]
 8006696:	d1e0      	bne.n	800665a <_free_r+0x22>
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4401      	add	r1, r0
 800669e:	6011      	str	r1, [r2, #0]
 80066a0:	6053      	str	r3, [r2, #4]
 80066a2:	e7da      	b.n	800665a <_free_r+0x22>
 80066a4:	d902      	bls.n	80066ac <_free_r+0x74>
 80066a6:	230c      	movs	r3, #12
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	e7d6      	b.n	800665a <_free_r+0x22>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	1821      	adds	r1, r4, r0
 80066b0:	428b      	cmp	r3, r1
 80066b2:	bf01      	itttt	eq
 80066b4:	6819      	ldreq	r1, [r3, #0]
 80066b6:	685b      	ldreq	r3, [r3, #4]
 80066b8:	1809      	addeq	r1, r1, r0
 80066ba:	6021      	streq	r1, [r4, #0]
 80066bc:	6063      	str	r3, [r4, #4]
 80066be:	6054      	str	r4, [r2, #4]
 80066c0:	e7cb      	b.n	800665a <_free_r+0x22>
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20000524 	.word	0x20000524

080066c8 <sbrk_aligned>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	4e0e      	ldr	r6, [pc, #56]	; (8006704 <sbrk_aligned+0x3c>)
 80066cc:	460c      	mov	r4, r1
 80066ce:	6831      	ldr	r1, [r6, #0]
 80066d0:	4605      	mov	r5, r0
 80066d2:	b911      	cbnz	r1, 80066da <sbrk_aligned+0x12>
 80066d4:	f000 f88c 	bl	80067f0 <_sbrk_r>
 80066d8:	6030      	str	r0, [r6, #0]
 80066da:	4621      	mov	r1, r4
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 f887 	bl	80067f0 <_sbrk_r>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d00a      	beq.n	80066fc <sbrk_aligned+0x34>
 80066e6:	1cc4      	adds	r4, r0, #3
 80066e8:	f024 0403 	bic.w	r4, r4, #3
 80066ec:	42a0      	cmp	r0, r4
 80066ee:	d007      	beq.n	8006700 <sbrk_aligned+0x38>
 80066f0:	1a21      	subs	r1, r4, r0
 80066f2:	4628      	mov	r0, r5
 80066f4:	f000 f87c 	bl	80067f0 <_sbrk_r>
 80066f8:	3001      	adds	r0, #1
 80066fa:	d101      	bne.n	8006700 <sbrk_aligned+0x38>
 80066fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006700:	4620      	mov	r0, r4
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	20000528 	.word	0x20000528

08006708 <_malloc_r>:
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	1ccd      	adds	r5, r1, #3
 800670e:	f025 0503 	bic.w	r5, r5, #3
 8006712:	3508      	adds	r5, #8
 8006714:	2d0c      	cmp	r5, #12
 8006716:	bf38      	it	cc
 8006718:	250c      	movcc	r5, #12
 800671a:	2d00      	cmp	r5, #0
 800671c:	4607      	mov	r7, r0
 800671e:	db01      	blt.n	8006724 <_malloc_r+0x1c>
 8006720:	42a9      	cmp	r1, r5
 8006722:	d905      	bls.n	8006730 <_malloc_r+0x28>
 8006724:	230c      	movs	r3, #12
 8006726:	2600      	movs	r6, #0
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	4630      	mov	r0, r6
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	4e2e      	ldr	r6, [pc, #184]	; (80067ec <_malloc_r+0xe4>)
 8006732:	f001 fb83 	bl	8007e3c <__malloc_lock>
 8006736:	6833      	ldr	r3, [r6, #0]
 8006738:	461c      	mov	r4, r3
 800673a:	bb34      	cbnz	r4, 800678a <_malloc_r+0x82>
 800673c:	4629      	mov	r1, r5
 800673e:	4638      	mov	r0, r7
 8006740:	f7ff ffc2 	bl	80066c8 <sbrk_aligned>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	4604      	mov	r4, r0
 8006748:	d14d      	bne.n	80067e6 <_malloc_r+0xde>
 800674a:	6834      	ldr	r4, [r6, #0]
 800674c:	4626      	mov	r6, r4
 800674e:	2e00      	cmp	r6, #0
 8006750:	d140      	bne.n	80067d4 <_malloc_r+0xcc>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	4631      	mov	r1, r6
 8006756:	4638      	mov	r0, r7
 8006758:	eb04 0803 	add.w	r8, r4, r3
 800675c:	f000 f848 	bl	80067f0 <_sbrk_r>
 8006760:	4580      	cmp	r8, r0
 8006762:	d13a      	bne.n	80067da <_malloc_r+0xd2>
 8006764:	6821      	ldr	r1, [r4, #0]
 8006766:	3503      	adds	r5, #3
 8006768:	1a6d      	subs	r5, r5, r1
 800676a:	f025 0503 	bic.w	r5, r5, #3
 800676e:	3508      	adds	r5, #8
 8006770:	2d0c      	cmp	r5, #12
 8006772:	bf38      	it	cc
 8006774:	250c      	movcc	r5, #12
 8006776:	4638      	mov	r0, r7
 8006778:	4629      	mov	r1, r5
 800677a:	f7ff ffa5 	bl	80066c8 <sbrk_aligned>
 800677e:	3001      	adds	r0, #1
 8006780:	d02b      	beq.n	80067da <_malloc_r+0xd2>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	442b      	add	r3, r5
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	e00e      	b.n	80067a8 <_malloc_r+0xa0>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	1b52      	subs	r2, r2, r5
 800678e:	d41e      	bmi.n	80067ce <_malloc_r+0xc6>
 8006790:	2a0b      	cmp	r2, #11
 8006792:	d916      	bls.n	80067c2 <_malloc_r+0xba>
 8006794:	1961      	adds	r1, r4, r5
 8006796:	42a3      	cmp	r3, r4
 8006798:	6025      	str	r5, [r4, #0]
 800679a:	bf18      	it	ne
 800679c:	6059      	strne	r1, [r3, #4]
 800679e:	6863      	ldr	r3, [r4, #4]
 80067a0:	bf08      	it	eq
 80067a2:	6031      	streq	r1, [r6, #0]
 80067a4:	5162      	str	r2, [r4, r5]
 80067a6:	604b      	str	r3, [r1, #4]
 80067a8:	4638      	mov	r0, r7
 80067aa:	f104 060b 	add.w	r6, r4, #11
 80067ae:	f001 fb4b 	bl	8007e48 <__malloc_unlock>
 80067b2:	f026 0607 	bic.w	r6, r6, #7
 80067b6:	1d23      	adds	r3, r4, #4
 80067b8:	1af2      	subs	r2, r6, r3
 80067ba:	d0b6      	beq.n	800672a <_malloc_r+0x22>
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	50a3      	str	r3, [r4, r2]
 80067c0:	e7b3      	b.n	800672a <_malloc_r+0x22>
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	bf0c      	ite	eq
 80067c8:	6032      	streq	r2, [r6, #0]
 80067ca:	605a      	strne	r2, [r3, #4]
 80067cc:	e7ec      	b.n	80067a8 <_malloc_r+0xa0>
 80067ce:	4623      	mov	r3, r4
 80067d0:	6864      	ldr	r4, [r4, #4]
 80067d2:	e7b2      	b.n	800673a <_malloc_r+0x32>
 80067d4:	4634      	mov	r4, r6
 80067d6:	6876      	ldr	r6, [r6, #4]
 80067d8:	e7b9      	b.n	800674e <_malloc_r+0x46>
 80067da:	230c      	movs	r3, #12
 80067dc:	4638      	mov	r0, r7
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	f001 fb32 	bl	8007e48 <__malloc_unlock>
 80067e4:	e7a1      	b.n	800672a <_malloc_r+0x22>
 80067e6:	6025      	str	r5, [r4, #0]
 80067e8:	e7de      	b.n	80067a8 <_malloc_r+0xa0>
 80067ea:	bf00      	nop
 80067ec:	20000524 	.word	0x20000524

080067f0 <_sbrk_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	2300      	movs	r3, #0
 80067f4:	4d05      	ldr	r5, [pc, #20]	; (800680c <_sbrk_r+0x1c>)
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fc fa26 	bl	8002c4c <_sbrk>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_sbrk_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_sbrk_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	2000052c 	.word	0x2000052c

08006810 <siprintf>:
 8006810:	b40e      	push	{r1, r2, r3}
 8006812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006816:	b500      	push	{lr}
 8006818:	b09c      	sub	sp, #112	; 0x70
 800681a:	ab1d      	add	r3, sp, #116	; 0x74
 800681c:	9002      	str	r0, [sp, #8]
 800681e:	9006      	str	r0, [sp, #24]
 8006820:	9107      	str	r1, [sp, #28]
 8006822:	9104      	str	r1, [sp, #16]
 8006824:	4808      	ldr	r0, [pc, #32]	; (8006848 <siprintf+0x38>)
 8006826:	4909      	ldr	r1, [pc, #36]	; (800684c <siprintf+0x3c>)
 8006828:	f853 2b04 	ldr.w	r2, [r3], #4
 800682c:	9105      	str	r1, [sp, #20]
 800682e:	6800      	ldr	r0, [r0, #0]
 8006830:	a902      	add	r1, sp, #8
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	f002 f836 	bl	80088a4 <_svfiprintf_r>
 8006838:	2200      	movs	r2, #0
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	b01c      	add	sp, #112	; 0x70
 8006840:	f85d eb04 	ldr.w	lr, [sp], #4
 8006844:	b003      	add	sp, #12
 8006846:	4770      	bx	lr
 8006848:	20000018 	.word	0x20000018
 800684c:	ffff0208 	.word	0xffff0208

08006850 <sulp>:
 8006850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	460f      	mov	r7, r1
 8006856:	4690      	mov	r8, r2
 8006858:	f001 fe6c 	bl	8008534 <__ulp>
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	f1b8 0f00 	cmp.w	r8, #0
 8006864:	d011      	beq.n	800688a <sulp+0x3a>
 8006866:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800686a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd0b      	ble.n	800688a <sulp+0x3a>
 8006872:	2400      	movs	r4, #0
 8006874:	051b      	lsls	r3, r3, #20
 8006876:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800687a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	f7f9 fee7 	bl	8000654 <__aeabi_dmul>
 8006886:	4604      	mov	r4, r0
 8006888:	460d      	mov	r5, r1
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006892:	0000      	movs	r0, r0
 8006894:	0000      	movs	r0, r0
	...

08006898 <_strtod_l>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	469b      	mov	fp, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	b09f      	sub	sp, #124	; 0x7c
 80068a2:	931a      	str	r3, [sp, #104]	; 0x68
 80068a4:	4b9e      	ldr	r3, [pc, #632]	; (8006b20 <_strtod_l+0x288>)
 80068a6:	4682      	mov	sl, r0
 80068a8:	681f      	ldr	r7, [r3, #0]
 80068aa:	460e      	mov	r6, r1
 80068ac:	4638      	mov	r0, r7
 80068ae:	9215      	str	r2, [sp, #84]	; 0x54
 80068b0:	f7f9 fc58 	bl	8000164 <strlen>
 80068b4:	f04f 0800 	mov.w	r8, #0
 80068b8:	4604      	mov	r4, r0
 80068ba:	f04f 0900 	mov.w	r9, #0
 80068be:	9619      	str	r6, [sp, #100]	; 0x64
 80068c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	2a2b      	cmp	r2, #43	; 0x2b
 80068c6:	d04c      	beq.n	8006962 <_strtod_l+0xca>
 80068c8:	d83a      	bhi.n	8006940 <_strtod_l+0xa8>
 80068ca:	2a0d      	cmp	r2, #13
 80068cc:	d833      	bhi.n	8006936 <_strtod_l+0x9e>
 80068ce:	2a08      	cmp	r2, #8
 80068d0:	d833      	bhi.n	800693a <_strtod_l+0xa2>
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d03d      	beq.n	8006952 <_strtod_l+0xba>
 80068d6:	2300      	movs	r3, #0
 80068d8:	930a      	str	r3, [sp, #40]	; 0x28
 80068da:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80068dc:	782b      	ldrb	r3, [r5, #0]
 80068de:	2b30      	cmp	r3, #48	; 0x30
 80068e0:	f040 80aa 	bne.w	8006a38 <_strtod_l+0x1a0>
 80068e4:	786b      	ldrb	r3, [r5, #1]
 80068e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068ea:	2b58      	cmp	r3, #88	; 0x58
 80068ec:	d166      	bne.n	80069bc <_strtod_l+0x124>
 80068ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f0:	4650      	mov	r0, sl
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	ab1a      	add	r3, sp, #104	; 0x68
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	4a8a      	ldr	r2, [pc, #552]	; (8006b24 <_strtod_l+0x28c>)
 80068fa:	f8cd b008 	str.w	fp, [sp, #8]
 80068fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8006900:	a919      	add	r1, sp, #100	; 0x64
 8006902:	f000 ff7d 	bl	8007800 <__gethex>
 8006906:	f010 0607 	ands.w	r6, r0, #7
 800690a:	4604      	mov	r4, r0
 800690c:	d005      	beq.n	800691a <_strtod_l+0x82>
 800690e:	2e06      	cmp	r6, #6
 8006910:	d129      	bne.n	8006966 <_strtod_l+0xce>
 8006912:	2300      	movs	r3, #0
 8006914:	3501      	adds	r5, #1
 8006916:	9519      	str	r5, [sp, #100]	; 0x64
 8006918:	930a      	str	r3, [sp, #40]	; 0x28
 800691a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 858a 	bne.w	8007436 <_strtod_l+0xb9e>
 8006922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006924:	b1d3      	cbz	r3, 800695c <_strtod_l+0xc4>
 8006926:	4642      	mov	r2, r8
 8006928:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800692c:	4610      	mov	r0, r2
 800692e:	4619      	mov	r1, r3
 8006930:	b01f      	add	sp, #124	; 0x7c
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	2a20      	cmp	r2, #32
 8006938:	d1cd      	bne.n	80068d6 <_strtod_l+0x3e>
 800693a:	3301      	adds	r3, #1
 800693c:	9319      	str	r3, [sp, #100]	; 0x64
 800693e:	e7bf      	b.n	80068c0 <_strtod_l+0x28>
 8006940:	2a2d      	cmp	r2, #45	; 0x2d
 8006942:	d1c8      	bne.n	80068d6 <_strtod_l+0x3e>
 8006944:	2201      	movs	r2, #1
 8006946:	920a      	str	r2, [sp, #40]	; 0x28
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	9219      	str	r2, [sp, #100]	; 0x64
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1c3      	bne.n	80068da <_strtod_l+0x42>
 8006952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006954:	9619      	str	r6, [sp, #100]	; 0x64
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 856b 	bne.w	8007432 <_strtod_l+0xb9a>
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	e7e4      	b.n	800692c <_strtod_l+0x94>
 8006962:	2200      	movs	r2, #0
 8006964:	e7ef      	b.n	8006946 <_strtod_l+0xae>
 8006966:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006968:	b13a      	cbz	r2, 800697a <_strtod_l+0xe2>
 800696a:	2135      	movs	r1, #53	; 0x35
 800696c:	a81c      	add	r0, sp, #112	; 0x70
 800696e:	f001 fee5 	bl	800873c <__copybits>
 8006972:	4650      	mov	r0, sl
 8006974:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006976:	f001 faad 	bl	8007ed4 <_Bfree>
 800697a:	3e01      	subs	r6, #1
 800697c:	2e04      	cmp	r6, #4
 800697e:	d806      	bhi.n	800698e <_strtod_l+0xf6>
 8006980:	e8df f006 	tbb	[pc, r6]
 8006984:	1714030a 	.word	0x1714030a
 8006988:	0a          	.byte	0x0a
 8006989:	00          	.byte	0x00
 800698a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800698e:	0721      	lsls	r1, r4, #28
 8006990:	d5c3      	bpl.n	800691a <_strtod_l+0x82>
 8006992:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006996:	e7c0      	b.n	800691a <_strtod_l+0x82>
 8006998:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800699a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800699e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80069aa:	e7f0      	b.n	800698e <_strtod_l+0xf6>
 80069ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b28 <_strtod_l+0x290>
 80069b0:	e7ed      	b.n	800698e <_strtod_l+0xf6>
 80069b2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80069b6:	f04f 38ff 	mov.w	r8, #4294967295
 80069ba:	e7e8      	b.n	800698e <_strtod_l+0xf6>
 80069bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	9219      	str	r2, [sp, #100]	; 0x64
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d0f9      	beq.n	80069bc <_strtod_l+0x124>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0a6      	beq.n	800691a <_strtod_l+0x82>
 80069cc:	2301      	movs	r3, #1
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069d2:	220a      	movs	r2, #10
 80069d4:	9308      	str	r3, [sp, #32]
 80069d6:	2300      	movs	r3, #0
 80069d8:	469b      	mov	fp, r3
 80069da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80069de:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069e0:	7805      	ldrb	r5, [r0, #0]
 80069e2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80069e6:	b2d9      	uxtb	r1, r3
 80069e8:	2909      	cmp	r1, #9
 80069ea:	d927      	bls.n	8006a3c <_strtod_l+0x1a4>
 80069ec:	4622      	mov	r2, r4
 80069ee:	4639      	mov	r1, r7
 80069f0:	f002 fb50 	bl	8009094 <strncmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d033      	beq.n	8006a60 <_strtod_l+0x1c8>
 80069f8:	2000      	movs	r0, #0
 80069fa:	462a      	mov	r2, r5
 80069fc:	465c      	mov	r4, fp
 80069fe:	4603      	mov	r3, r0
 8006a00:	9004      	str	r0, [sp, #16]
 8006a02:	2a65      	cmp	r2, #101	; 0x65
 8006a04:	d001      	beq.n	8006a0a <_strtod_l+0x172>
 8006a06:	2a45      	cmp	r2, #69	; 0x45
 8006a08:	d114      	bne.n	8006a34 <_strtod_l+0x19c>
 8006a0a:	b91c      	cbnz	r4, 8006a14 <_strtod_l+0x17c>
 8006a0c:	9a07      	ldr	r2, [sp, #28]
 8006a0e:	4302      	orrs	r2, r0
 8006a10:	d09f      	beq.n	8006952 <_strtod_l+0xba>
 8006a12:	2400      	movs	r4, #0
 8006a14:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006a16:	1c72      	adds	r2, r6, #1
 8006a18:	9219      	str	r2, [sp, #100]	; 0x64
 8006a1a:	7872      	ldrb	r2, [r6, #1]
 8006a1c:	2a2b      	cmp	r2, #43	; 0x2b
 8006a1e:	d079      	beq.n	8006b14 <_strtod_l+0x27c>
 8006a20:	2a2d      	cmp	r2, #45	; 0x2d
 8006a22:	f000 8083 	beq.w	8006b2c <_strtod_l+0x294>
 8006a26:	2700      	movs	r7, #0
 8006a28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a2c:	2909      	cmp	r1, #9
 8006a2e:	f240 8083 	bls.w	8006b38 <_strtod_l+0x2a0>
 8006a32:	9619      	str	r6, [sp, #100]	; 0x64
 8006a34:	2500      	movs	r5, #0
 8006a36:	e09f      	b.n	8006b78 <_strtod_l+0x2e0>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e7c8      	b.n	80069ce <_strtod_l+0x136>
 8006a3c:	f1bb 0f08 	cmp.w	fp, #8
 8006a40:	bfd5      	itete	le
 8006a42:	9906      	ldrle	r1, [sp, #24]
 8006a44:	9905      	ldrgt	r1, [sp, #20]
 8006a46:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a4a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a4e:	f100 0001 	add.w	r0, r0, #1
 8006a52:	bfd4      	ite	le
 8006a54:	9306      	strle	r3, [sp, #24]
 8006a56:	9305      	strgt	r3, [sp, #20]
 8006a58:	f10b 0b01 	add.w	fp, fp, #1
 8006a5c:	9019      	str	r0, [sp, #100]	; 0x64
 8006a5e:	e7be      	b.n	80069de <_strtod_l+0x146>
 8006a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a62:	191a      	adds	r2, r3, r4
 8006a64:	9219      	str	r2, [sp, #100]	; 0x64
 8006a66:	5d1a      	ldrb	r2, [r3, r4]
 8006a68:	f1bb 0f00 	cmp.w	fp, #0
 8006a6c:	d036      	beq.n	8006adc <_strtod_l+0x244>
 8006a6e:	465c      	mov	r4, fp
 8006a70:	9004      	str	r0, [sp, #16]
 8006a72:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a76:	2b09      	cmp	r3, #9
 8006a78:	d912      	bls.n	8006aa0 <_strtod_l+0x208>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e7c1      	b.n	8006a02 <_strtod_l+0x16a>
 8006a7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a80:	3001      	adds	r0, #1
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	9219      	str	r2, [sp, #100]	; 0x64
 8006a86:	785a      	ldrb	r2, [r3, #1]
 8006a88:	2a30      	cmp	r2, #48	; 0x30
 8006a8a:	d0f8      	beq.n	8006a7e <_strtod_l+0x1e6>
 8006a8c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	f200 84d5 	bhi.w	8007440 <_strtod_l+0xba8>
 8006a96:	9004      	str	r0, [sp, #16]
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a9e:	9308      	str	r3, [sp, #32]
 8006aa0:	3a30      	subs	r2, #48	; 0x30
 8006aa2:	f100 0301 	add.w	r3, r0, #1
 8006aa6:	d013      	beq.n	8006ad0 <_strtod_l+0x238>
 8006aa8:	9904      	ldr	r1, [sp, #16]
 8006aaa:	1905      	adds	r5, r0, r4
 8006aac:	4419      	add	r1, r3
 8006aae:	9104      	str	r1, [sp, #16]
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	210a      	movs	r1, #10
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	d113      	bne.n	8006ae0 <_strtod_l+0x248>
 8006ab8:	1823      	adds	r3, r4, r0
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	f104 0401 	add.w	r4, r4, #1
 8006ac0:	4404      	add	r4, r0
 8006ac2:	dc1b      	bgt.n	8006afc <_strtod_l+0x264>
 8006ac4:	230a      	movs	r3, #10
 8006ac6:	9906      	ldr	r1, [sp, #24]
 8006ac8:	fb03 2301 	mla	r3, r3, r1, r2
 8006acc:	9306      	str	r3, [sp, #24]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	1c51      	adds	r1, r2, #1
 8006ad6:	9119      	str	r1, [sp, #100]	; 0x64
 8006ad8:	7852      	ldrb	r2, [r2, #1]
 8006ada:	e7ca      	b.n	8006a72 <_strtod_l+0x1da>
 8006adc:	4658      	mov	r0, fp
 8006ade:	e7d3      	b.n	8006a88 <_strtod_l+0x1f0>
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	dc04      	bgt.n	8006aee <_strtod_l+0x256>
 8006ae4:	9f06      	ldr	r7, [sp, #24]
 8006ae6:	434f      	muls	r7, r1
 8006ae8:	9706      	str	r7, [sp, #24]
 8006aea:	3301      	adds	r3, #1
 8006aec:	e7e2      	b.n	8006ab4 <_strtod_l+0x21c>
 8006aee:	1c5f      	adds	r7, r3, #1
 8006af0:	2f10      	cmp	r7, #16
 8006af2:	bfde      	ittt	le
 8006af4:	9f05      	ldrle	r7, [sp, #20]
 8006af6:	434f      	mulle	r7, r1
 8006af8:	9705      	strle	r7, [sp, #20]
 8006afa:	e7f6      	b.n	8006aea <_strtod_l+0x252>
 8006afc:	2c10      	cmp	r4, #16
 8006afe:	bfdf      	itttt	le
 8006b00:	230a      	movle	r3, #10
 8006b02:	9905      	ldrle	r1, [sp, #20]
 8006b04:	fb03 2301 	mlale	r3, r3, r1, r2
 8006b08:	9305      	strle	r3, [sp, #20]
 8006b0a:	e7e0      	b.n	8006ace <_strtod_l+0x236>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	2301      	movs	r3, #1
 8006b12:	e77b      	b.n	8006a0c <_strtod_l+0x174>
 8006b14:	2700      	movs	r7, #0
 8006b16:	1cb2      	adds	r2, r6, #2
 8006b18:	9219      	str	r2, [sp, #100]	; 0x64
 8006b1a:	78b2      	ldrb	r2, [r6, #2]
 8006b1c:	e784      	b.n	8006a28 <_strtod_l+0x190>
 8006b1e:	bf00      	nop
 8006b20:	08009d98 	.word	0x08009d98
 8006b24:	08009b20 	.word	0x08009b20
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	2701      	movs	r7, #1
 8006b2e:	e7f2      	b.n	8006b16 <_strtod_l+0x27e>
 8006b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b32:	1c51      	adds	r1, r2, #1
 8006b34:	9119      	str	r1, [sp, #100]	; 0x64
 8006b36:	7852      	ldrb	r2, [r2, #1]
 8006b38:	2a30      	cmp	r2, #48	; 0x30
 8006b3a:	d0f9      	beq.n	8006b30 <_strtod_l+0x298>
 8006b3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b40:	2908      	cmp	r1, #8
 8006b42:	f63f af77 	bhi.w	8006a34 <_strtod_l+0x19c>
 8006b46:	f04f 0e0a 	mov.w	lr, #10
 8006b4a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006b4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b50:	9209      	str	r2, [sp, #36]	; 0x24
 8006b52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b54:	1c51      	adds	r1, r2, #1
 8006b56:	9119      	str	r1, [sp, #100]	; 0x64
 8006b58:	7852      	ldrb	r2, [r2, #1]
 8006b5a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006b5e:	2d09      	cmp	r5, #9
 8006b60:	d935      	bls.n	8006bce <_strtod_l+0x336>
 8006b62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b64:	1b49      	subs	r1, r1, r5
 8006b66:	2908      	cmp	r1, #8
 8006b68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006b6c:	dc02      	bgt.n	8006b74 <_strtod_l+0x2dc>
 8006b6e:	4565      	cmp	r5, ip
 8006b70:	bfa8      	it	ge
 8006b72:	4665      	movge	r5, ip
 8006b74:	b107      	cbz	r7, 8006b78 <_strtod_l+0x2e0>
 8006b76:	426d      	negs	r5, r5
 8006b78:	2c00      	cmp	r4, #0
 8006b7a:	d14c      	bne.n	8006c16 <_strtod_l+0x37e>
 8006b7c:	9907      	ldr	r1, [sp, #28]
 8006b7e:	4301      	orrs	r1, r0
 8006b80:	f47f aecb 	bne.w	800691a <_strtod_l+0x82>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f47f aee4 	bne.w	8006952 <_strtod_l+0xba>
 8006b8a:	2a69      	cmp	r2, #105	; 0x69
 8006b8c:	d026      	beq.n	8006bdc <_strtod_l+0x344>
 8006b8e:	dc23      	bgt.n	8006bd8 <_strtod_l+0x340>
 8006b90:	2a49      	cmp	r2, #73	; 0x49
 8006b92:	d023      	beq.n	8006bdc <_strtod_l+0x344>
 8006b94:	2a4e      	cmp	r2, #78	; 0x4e
 8006b96:	f47f aedc 	bne.w	8006952 <_strtod_l+0xba>
 8006b9a:	499d      	ldr	r1, [pc, #628]	; (8006e10 <_strtod_l+0x578>)
 8006b9c:	a819      	add	r0, sp, #100	; 0x64
 8006b9e:	f001 f87d 	bl	8007c9c <__match>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	f43f aed5 	beq.w	8006952 <_strtod_l+0xba>
 8006ba8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b28      	cmp	r3, #40	; 0x28
 8006bae:	d12c      	bne.n	8006c0a <_strtod_l+0x372>
 8006bb0:	4998      	ldr	r1, [pc, #608]	; (8006e14 <_strtod_l+0x57c>)
 8006bb2:	aa1c      	add	r2, sp, #112	; 0x70
 8006bb4:	a819      	add	r0, sp, #100	; 0x64
 8006bb6:	f001 f885 	bl	8007cc4 <__hexnan>
 8006bba:	2805      	cmp	r0, #5
 8006bbc:	d125      	bne.n	8006c0a <_strtod_l+0x372>
 8006bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bc0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006bc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006bc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006bcc:	e6a5      	b.n	800691a <_strtod_l+0x82>
 8006bce:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006bd2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006bd6:	e7bc      	b.n	8006b52 <_strtod_l+0x2ba>
 8006bd8:	2a6e      	cmp	r2, #110	; 0x6e
 8006bda:	e7dc      	b.n	8006b96 <_strtod_l+0x2fe>
 8006bdc:	498e      	ldr	r1, [pc, #568]	; (8006e18 <_strtod_l+0x580>)
 8006bde:	a819      	add	r0, sp, #100	; 0x64
 8006be0:	f001 f85c 	bl	8007c9c <__match>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f43f aeb4 	beq.w	8006952 <_strtod_l+0xba>
 8006bea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bec:	498b      	ldr	r1, [pc, #556]	; (8006e1c <_strtod_l+0x584>)
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	a819      	add	r0, sp, #100	; 0x64
 8006bf2:	9319      	str	r3, [sp, #100]	; 0x64
 8006bf4:	f001 f852 	bl	8007c9c <__match>
 8006bf8:	b910      	cbnz	r0, 8006c00 <_strtod_l+0x368>
 8006bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	9319      	str	r3, [sp, #100]	; 0x64
 8006c00:	f04f 0800 	mov.w	r8, #0
 8006c04:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006e20 <_strtod_l+0x588>
 8006c08:	e687      	b.n	800691a <_strtod_l+0x82>
 8006c0a:	4886      	ldr	r0, [pc, #536]	; (8006e24 <_strtod_l+0x58c>)
 8006c0c:	f002 fa38 	bl	8009080 <nan>
 8006c10:	4680      	mov	r8, r0
 8006c12:	4689      	mov	r9, r1
 8006c14:	e681      	b.n	800691a <_strtod_l+0x82>
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	f1bb 0f00 	cmp.w	fp, #0
 8006c1c:	bf08      	it	eq
 8006c1e:	46a3      	moveq	fp, r4
 8006c20:	1aeb      	subs	r3, r5, r3
 8006c22:	2c10      	cmp	r4, #16
 8006c24:	9806      	ldr	r0, [sp, #24]
 8006c26:	4626      	mov	r6, r4
 8006c28:	9307      	str	r3, [sp, #28]
 8006c2a:	bfa8      	it	ge
 8006c2c:	2610      	movge	r6, #16
 8006c2e:	f7f9 fc97 	bl	8000560 <__aeabi_ui2d>
 8006c32:	2c09      	cmp	r4, #9
 8006c34:	4680      	mov	r8, r0
 8006c36:	4689      	mov	r9, r1
 8006c38:	dd13      	ble.n	8006c62 <_strtod_l+0x3ca>
 8006c3a:	4b7b      	ldr	r3, [pc, #492]	; (8006e28 <_strtod_l+0x590>)
 8006c3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c44:	f7f9 fd06 	bl	8000654 <__aeabi_dmul>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	9805      	ldr	r0, [sp, #20]
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	f7f9 fc87 	bl	8000560 <__aeabi_ui2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7f9 fb45 	bl	80002e8 <__adddf3>
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	2c0f      	cmp	r4, #15
 8006c64:	dc36      	bgt.n	8006cd4 <_strtod_l+0x43c>
 8006c66:	9b07      	ldr	r3, [sp, #28]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f43f ae56 	beq.w	800691a <_strtod_l+0x82>
 8006c6e:	dd22      	ble.n	8006cb6 <_strtod_l+0x41e>
 8006c70:	2b16      	cmp	r3, #22
 8006c72:	dc09      	bgt.n	8006c88 <_strtod_l+0x3f0>
 8006c74:	496c      	ldr	r1, [pc, #432]	; (8006e28 <_strtod_l+0x590>)
 8006c76:	4642      	mov	r2, r8
 8006c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c82:	f7f9 fce7 	bl	8000654 <__aeabi_dmul>
 8006c86:	e7c3      	b.n	8006c10 <_strtod_l+0x378>
 8006c88:	9a07      	ldr	r2, [sp, #28]
 8006c8a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	db20      	blt.n	8006cd4 <_strtod_l+0x43c>
 8006c92:	4d65      	ldr	r5, [pc, #404]	; (8006e28 <_strtod_l+0x590>)
 8006c94:	f1c4 040f 	rsb	r4, r4, #15
 8006c98:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	f7f9 fcd6 	bl	8000654 <__aeabi_dmul>
 8006ca8:	9b07      	ldr	r3, [sp, #28]
 8006caa:	1b1c      	subs	r4, r3, r4
 8006cac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cb4:	e7e5      	b.n	8006c82 <_strtod_l+0x3ea>
 8006cb6:	9b07      	ldr	r3, [sp, #28]
 8006cb8:	3316      	adds	r3, #22
 8006cba:	db0b      	blt.n	8006cd4 <_strtod_l+0x43c>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	1b5d      	subs	r5, r3, r5
 8006cc2:	4b59      	ldr	r3, [pc, #356]	; (8006e28 <_strtod_l+0x590>)
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006cca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cce:	f7f9 fdeb 	bl	80008a8 <__aeabi_ddiv>
 8006cd2:	e79d      	b.n	8006c10 <_strtod_l+0x378>
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	1ba6      	subs	r6, r4, r6
 8006cd8:	441e      	add	r6, r3
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	dd74      	ble.n	8006dc8 <_strtod_l+0x530>
 8006cde:	f016 030f 	ands.w	r3, r6, #15
 8006ce2:	d00a      	beq.n	8006cfa <_strtod_l+0x462>
 8006ce4:	4950      	ldr	r1, [pc, #320]	; (8006e28 <_strtod_l+0x590>)
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	f7f9 fcaf 	bl	8000654 <__aeabi_dmul>
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	4689      	mov	r9, r1
 8006cfa:	f036 060f 	bics.w	r6, r6, #15
 8006cfe:	d052      	beq.n	8006da6 <_strtod_l+0x50e>
 8006d00:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006d04:	dd27      	ble.n	8006d56 <_strtod_l+0x4be>
 8006d06:	f04f 0b00 	mov.w	fp, #0
 8006d0a:	f8cd b010 	str.w	fp, [sp, #16]
 8006d0e:	f8cd b020 	str.w	fp, [sp, #32]
 8006d12:	f8cd b018 	str.w	fp, [sp, #24]
 8006d16:	2322      	movs	r3, #34	; 0x22
 8006d18:	f04f 0800 	mov.w	r8, #0
 8006d1c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006e20 <_strtod_l+0x588>
 8006d20:	f8ca 3000 	str.w	r3, [sl]
 8006d24:	9b08      	ldr	r3, [sp, #32]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f43f adf7 	beq.w	800691a <_strtod_l+0x82>
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d30:	f001 f8d0 	bl	8007ed4 <_Bfree>
 8006d34:	4650      	mov	r0, sl
 8006d36:	9906      	ldr	r1, [sp, #24]
 8006d38:	f001 f8cc 	bl	8007ed4 <_Bfree>
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	9904      	ldr	r1, [sp, #16]
 8006d40:	f001 f8c8 	bl	8007ed4 <_Bfree>
 8006d44:	4650      	mov	r0, sl
 8006d46:	9908      	ldr	r1, [sp, #32]
 8006d48:	f001 f8c4 	bl	8007ed4 <_Bfree>
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	4650      	mov	r0, sl
 8006d50:	f001 f8c0 	bl	8007ed4 <_Bfree>
 8006d54:	e5e1      	b.n	800691a <_strtod_l+0x82>
 8006d56:	4b35      	ldr	r3, [pc, #212]	; (8006e2c <_strtod_l+0x594>)
 8006d58:	4640      	mov	r0, r8
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4649      	mov	r1, r9
 8006d60:	461f      	mov	r7, r3
 8006d62:	1136      	asrs	r6, r6, #4
 8006d64:	2e01      	cmp	r6, #1
 8006d66:	dc21      	bgt.n	8006dac <_strtod_l+0x514>
 8006d68:	b10b      	cbz	r3, 8006d6e <_strtod_l+0x4d6>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	4b2f      	ldr	r3, [pc, #188]	; (8006e2c <_strtod_l+0x594>)
 8006d70:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006d78:	4642      	mov	r2, r8
 8006d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d7e:	464b      	mov	r3, r9
 8006d80:	f7f9 fc68 	bl	8000654 <__aeabi_dmul>
 8006d84:	4b26      	ldr	r3, [pc, #152]	; (8006e20 <_strtod_l+0x588>)
 8006d86:	460a      	mov	r2, r1
 8006d88:	400b      	ands	r3, r1
 8006d8a:	4929      	ldr	r1, [pc, #164]	; (8006e30 <_strtod_l+0x598>)
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	428b      	cmp	r3, r1
 8006d90:	d8b9      	bhi.n	8006d06 <_strtod_l+0x46e>
 8006d92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d96:	428b      	cmp	r3, r1
 8006d98:	bf86      	itte	hi
 8006d9a:	f04f 38ff 	movhi.w	r8, #4294967295
 8006d9e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006e34 <_strtod_l+0x59c>
 8006da2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006da6:	2300      	movs	r3, #0
 8006da8:	9305      	str	r3, [sp, #20]
 8006daa:	e07f      	b.n	8006eac <_strtod_l+0x614>
 8006dac:	07f2      	lsls	r2, r6, #31
 8006dae:	d505      	bpl.n	8006dbc <_strtod_l+0x524>
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 fc4d 	bl	8000654 <__aeabi_dmul>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	9a05      	ldr	r2, [sp, #20]
 8006dbe:	3701      	adds	r7, #1
 8006dc0:	3208      	adds	r2, #8
 8006dc2:	1076      	asrs	r6, r6, #1
 8006dc4:	9205      	str	r2, [sp, #20]
 8006dc6:	e7cd      	b.n	8006d64 <_strtod_l+0x4cc>
 8006dc8:	d0ed      	beq.n	8006da6 <_strtod_l+0x50e>
 8006dca:	4276      	negs	r6, r6
 8006dcc:	f016 020f 	ands.w	r2, r6, #15
 8006dd0:	d00a      	beq.n	8006de8 <_strtod_l+0x550>
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <_strtod_l+0x590>)
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dda:	4649      	mov	r1, r9
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fd62 	bl	80008a8 <__aeabi_ddiv>
 8006de4:	4680      	mov	r8, r0
 8006de6:	4689      	mov	r9, r1
 8006de8:	1136      	asrs	r6, r6, #4
 8006dea:	d0dc      	beq.n	8006da6 <_strtod_l+0x50e>
 8006dec:	2e1f      	cmp	r6, #31
 8006dee:	dd23      	ble.n	8006e38 <_strtod_l+0x5a0>
 8006df0:	f04f 0b00 	mov.w	fp, #0
 8006df4:	f8cd b010 	str.w	fp, [sp, #16]
 8006df8:	f8cd b020 	str.w	fp, [sp, #32]
 8006dfc:	f8cd b018 	str.w	fp, [sp, #24]
 8006e00:	2322      	movs	r3, #34	; 0x22
 8006e02:	f04f 0800 	mov.w	r8, #0
 8006e06:	f04f 0900 	mov.w	r9, #0
 8006e0a:	f8ca 3000 	str.w	r3, [sl]
 8006e0e:	e789      	b.n	8006d24 <_strtod_l+0x48c>
 8006e10:	08009b1d 	.word	0x08009b1d
 8006e14:	08009b34 	.word	0x08009b34
 8006e18:	08009b14 	.word	0x08009b14
 8006e1c:	08009b17 	.word	0x08009b17
 8006e20:	7ff00000 	.word	0x7ff00000
 8006e24:	08009c1f 	.word	0x08009c1f
 8006e28:	08009e30 	.word	0x08009e30
 8006e2c:	08009e08 	.word	0x08009e08
 8006e30:	7ca00000 	.word	0x7ca00000
 8006e34:	7fefffff 	.word	0x7fefffff
 8006e38:	f016 0310 	ands.w	r3, r6, #16
 8006e3c:	bf18      	it	ne
 8006e3e:	236a      	movne	r3, #106	; 0x6a
 8006e40:	4640      	mov	r0, r8
 8006e42:	9305      	str	r3, [sp, #20]
 8006e44:	4649      	mov	r1, r9
 8006e46:	2300      	movs	r3, #0
 8006e48:	4fb0      	ldr	r7, [pc, #704]	; (800710c <_strtod_l+0x874>)
 8006e4a:	07f2      	lsls	r2, r6, #31
 8006e4c:	d504      	bpl.n	8006e58 <_strtod_l+0x5c0>
 8006e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e52:	f7f9 fbff 	bl	8000654 <__aeabi_dmul>
 8006e56:	2301      	movs	r3, #1
 8006e58:	1076      	asrs	r6, r6, #1
 8006e5a:	f107 0708 	add.w	r7, r7, #8
 8006e5e:	d1f4      	bne.n	8006e4a <_strtod_l+0x5b2>
 8006e60:	b10b      	cbz	r3, 8006e66 <_strtod_l+0x5ce>
 8006e62:	4680      	mov	r8, r0
 8006e64:	4689      	mov	r9, r1
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	b1c3      	cbz	r3, 8006e9c <_strtod_l+0x604>
 8006e6a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006e6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	4649      	mov	r1, r9
 8006e76:	dd11      	ble.n	8006e9c <_strtod_l+0x604>
 8006e78:	2b1f      	cmp	r3, #31
 8006e7a:	f340 8127 	ble.w	80070cc <_strtod_l+0x834>
 8006e7e:	2b34      	cmp	r3, #52	; 0x34
 8006e80:	bfd8      	it	le
 8006e82:	f04f 33ff 	movle.w	r3, #4294967295
 8006e86:	f04f 0800 	mov.w	r8, #0
 8006e8a:	bfcf      	iteee	gt
 8006e8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006e90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006e94:	fa03 f202 	lslle.w	r2, r3, r2
 8006e98:	ea02 0901 	andle.w	r9, r2, r1
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	f7f9 fe3e 	bl	8000b24 <__aeabi_dcmpeq>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1a1      	bne.n	8006df0 <_strtod_l+0x558>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	465a      	mov	r2, fp
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	4650      	mov	r0, sl
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	9908      	ldr	r1, [sp, #32]
 8006eb8:	f001 f874 	bl	8007fa4 <__s2b>
 8006ebc:	9008      	str	r0, [sp, #32]
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f43f af21 	beq.w	8006d06 <_strtod_l+0x46e>
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	f04f 0b00 	mov.w	fp, #0
 8006eca:	1b5d      	subs	r5, r3, r5
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	f8cd b010 	str.w	fp, [sp, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bfb4      	ite	lt
 8006ed6:	462b      	movlt	r3, r5
 8006ed8:	2300      	movge	r3, #0
 8006eda:	930e      	str	r3, [sp, #56]	; 0x38
 8006edc:	9b07      	ldr	r3, [sp, #28]
 8006ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ee2:	9314      	str	r3, [sp, #80]	; 0x50
 8006ee4:	9b08      	ldr	r3, [sp, #32]
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	6859      	ldr	r1, [r3, #4]
 8006eea:	f000 ffb3 	bl	8007e54 <_Balloc>
 8006eee:	9006      	str	r0, [sp, #24]
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f43f af10 	beq.w	8006d16 <_strtod_l+0x47e>
 8006ef6:	9b08      	ldr	r3, [sp, #32]
 8006ef8:	300c      	adds	r0, #12
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	f103 010c 	add.w	r1, r3, #12
 8006f00:	3202      	adds	r2, #2
 8006f02:	0092      	lsls	r2, r2, #2
 8006f04:	f000 ff8c 	bl	8007e20 <memcpy>
 8006f08:	ab1c      	add	r3, sp, #112	; 0x70
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	4650      	mov	r0, sl
 8006f16:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006f1a:	f001 fb85 	bl	8008628 <__d2b>
 8006f1e:	901a      	str	r0, [sp, #104]	; 0x68
 8006f20:	2800      	cmp	r0, #0
 8006f22:	f43f aef8 	beq.w	8006d16 <_strtod_l+0x47e>
 8006f26:	2101      	movs	r1, #1
 8006f28:	4650      	mov	r0, sl
 8006f2a:	f001 f8d3 	bl	80080d4 <__i2b>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	9004      	str	r0, [sp, #16]
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f43f aeef 	beq.w	8006d16 <_strtod_l+0x47e>
 8006f38:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	bfab      	itete	ge
 8006f40:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006f42:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006f44:	18ee      	addge	r6, r5, r3
 8006f46:	1b5c      	sublt	r4, r3, r5
 8006f48:	9b05      	ldr	r3, [sp, #20]
 8006f4a:	bfa8      	it	ge
 8006f4c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006f4e:	eba5 0503 	sub.w	r5, r5, r3
 8006f52:	4415      	add	r5, r2
 8006f54:	4b6e      	ldr	r3, [pc, #440]	; (8007110 <_strtod_l+0x878>)
 8006f56:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f5a:	bfb8      	it	lt
 8006f5c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f64:	f280 80c4 	bge.w	80070f0 <_strtod_l+0x858>
 8006f68:	1b5b      	subs	r3, r3, r5
 8006f6a:	2b1f      	cmp	r3, #31
 8006f6c:	f04f 0701 	mov.w	r7, #1
 8006f70:	eba2 0203 	sub.w	r2, r2, r3
 8006f74:	f300 80b1 	bgt.w	80070da <_strtod_l+0x842>
 8006f78:	2500      	movs	r5, #0
 8006f7a:	fa07 f303 	lsl.w	r3, r7, r3
 8006f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f80:	18b7      	adds	r7, r6, r2
 8006f82:	9b05      	ldr	r3, [sp, #20]
 8006f84:	42be      	cmp	r6, r7
 8006f86:	4414      	add	r4, r2
 8006f88:	441c      	add	r4, r3
 8006f8a:	4633      	mov	r3, r6
 8006f8c:	bfa8      	it	ge
 8006f8e:	463b      	movge	r3, r7
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	bfa8      	it	ge
 8006f94:	4623      	movge	r3, r4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfc2      	ittt	gt
 8006f9a:	1aff      	subgt	r7, r7, r3
 8006f9c:	1ae4      	subgt	r4, r4, r3
 8006f9e:	1af6      	subgt	r6, r6, r3
 8006fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	dd17      	ble.n	8006fd6 <_strtod_l+0x73e>
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4650      	mov	r0, sl
 8006faa:	9904      	ldr	r1, [sp, #16]
 8006fac:	f001 f950 	bl	8008250 <__pow5mult>
 8006fb0:	9004      	str	r0, [sp, #16]
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f43f aeaf 	beq.w	8006d16 <_strtod_l+0x47e>
 8006fb8:	4601      	mov	r1, r0
 8006fba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	f001 f89f 	bl	8008100 <__multiply>
 8006fc2:	9009      	str	r0, [sp, #36]	; 0x24
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f43f aea6 	beq.w	8006d16 <_strtod_l+0x47e>
 8006fca:	4650      	mov	r0, sl
 8006fcc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fce:	f000 ff81 	bl	8007ed4 <_Bfree>
 8006fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fd6:	2f00      	cmp	r7, #0
 8006fd8:	f300 808e 	bgt.w	80070f8 <_strtod_l+0x860>
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dd08      	ble.n	8006ff4 <_strtod_l+0x75c>
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fe6:	9906      	ldr	r1, [sp, #24]
 8006fe8:	f001 f932 	bl	8008250 <__pow5mult>
 8006fec:	9006      	str	r0, [sp, #24]
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f ae91 	beq.w	8006d16 <_strtod_l+0x47e>
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	dd08      	ble.n	800700a <_strtod_l+0x772>
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	9906      	ldr	r1, [sp, #24]
 8006ffe:	f001 f981 	bl	8008304 <__lshift>
 8007002:	9006      	str	r0, [sp, #24]
 8007004:	2800      	cmp	r0, #0
 8007006:	f43f ae86 	beq.w	8006d16 <_strtod_l+0x47e>
 800700a:	2e00      	cmp	r6, #0
 800700c:	dd08      	ble.n	8007020 <_strtod_l+0x788>
 800700e:	4632      	mov	r2, r6
 8007010:	4650      	mov	r0, sl
 8007012:	9904      	ldr	r1, [sp, #16]
 8007014:	f001 f976 	bl	8008304 <__lshift>
 8007018:	9004      	str	r0, [sp, #16]
 800701a:	2800      	cmp	r0, #0
 800701c:	f43f ae7b 	beq.w	8006d16 <_strtod_l+0x47e>
 8007020:	4650      	mov	r0, sl
 8007022:	9a06      	ldr	r2, [sp, #24]
 8007024:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007026:	f001 f9f9 	bl	800841c <__mdiff>
 800702a:	4683      	mov	fp, r0
 800702c:	2800      	cmp	r0, #0
 800702e:	f43f ae72 	beq.w	8006d16 <_strtod_l+0x47e>
 8007032:	2400      	movs	r4, #0
 8007034:	68c3      	ldr	r3, [r0, #12]
 8007036:	9904      	ldr	r1, [sp, #16]
 8007038:	60c4      	str	r4, [r0, #12]
 800703a:	930b      	str	r3, [sp, #44]	; 0x2c
 800703c:	f001 f9d2 	bl	80083e4 <__mcmp>
 8007040:	42a0      	cmp	r0, r4
 8007042:	da6b      	bge.n	800711c <_strtod_l+0x884>
 8007044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007046:	ea53 0308 	orrs.w	r3, r3, r8
 800704a:	f040 8091 	bne.w	8007170 <_strtod_l+0x8d8>
 800704e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 808c 	bne.w	8007170 <_strtod_l+0x8d8>
 8007058:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800705c:	0d1b      	lsrs	r3, r3, #20
 800705e:	051b      	lsls	r3, r3, #20
 8007060:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007064:	f240 8084 	bls.w	8007170 <_strtod_l+0x8d8>
 8007068:	f8db 3014 	ldr.w	r3, [fp, #20]
 800706c:	b91b      	cbnz	r3, 8007076 <_strtod_l+0x7de>
 800706e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007072:	2b01      	cmp	r3, #1
 8007074:	dd7c      	ble.n	8007170 <_strtod_l+0x8d8>
 8007076:	4659      	mov	r1, fp
 8007078:	2201      	movs	r2, #1
 800707a:	4650      	mov	r0, sl
 800707c:	f001 f942 	bl	8008304 <__lshift>
 8007080:	9904      	ldr	r1, [sp, #16]
 8007082:	4683      	mov	fp, r0
 8007084:	f001 f9ae 	bl	80083e4 <__mcmp>
 8007088:	2800      	cmp	r0, #0
 800708a:	dd71      	ble.n	8007170 <_strtod_l+0x8d8>
 800708c:	9905      	ldr	r1, [sp, #20]
 800708e:	464b      	mov	r3, r9
 8007090:	4a20      	ldr	r2, [pc, #128]	; (8007114 <_strtod_l+0x87c>)
 8007092:	2900      	cmp	r1, #0
 8007094:	f000 808c 	beq.w	80071b0 <_strtod_l+0x918>
 8007098:	ea02 0109 	and.w	r1, r2, r9
 800709c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070a0:	f300 8086 	bgt.w	80071b0 <_strtod_l+0x918>
 80070a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070a8:	f77f aeaa 	ble.w	8006e00 <_strtod_l+0x568>
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	4b19      	ldr	r3, [pc, #100]	; (8007118 <_strtod_l+0x880>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	f7f9 face 	bl	8000654 <__aeabi_dmul>
 80070b8:	460b      	mov	r3, r1
 80070ba:	4303      	orrs	r3, r0
 80070bc:	bf08      	it	eq
 80070be:	2322      	moveq	r3, #34	; 0x22
 80070c0:	4680      	mov	r8, r0
 80070c2:	4689      	mov	r9, r1
 80070c4:	bf08      	it	eq
 80070c6:	f8ca 3000 	streq.w	r3, [sl]
 80070ca:	e62f      	b.n	8006d2c <_strtod_l+0x494>
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	ea03 0808 	and.w	r8, r3, r8
 80070d8:	e6e0      	b.n	8006e9c <_strtod_l+0x604>
 80070da:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80070de:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80070e2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80070e6:	35e2      	adds	r5, #226	; 0xe2
 80070e8:	fa07 f505 	lsl.w	r5, r7, r5
 80070ec:	970f      	str	r7, [sp, #60]	; 0x3c
 80070ee:	e747      	b.n	8006f80 <_strtod_l+0x6e8>
 80070f0:	2301      	movs	r3, #1
 80070f2:	2500      	movs	r5, #0
 80070f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070f6:	e743      	b.n	8006f80 <_strtod_l+0x6e8>
 80070f8:	463a      	mov	r2, r7
 80070fa:	4650      	mov	r0, sl
 80070fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070fe:	f001 f901 	bl	8008304 <__lshift>
 8007102:	901a      	str	r0, [sp, #104]	; 0x68
 8007104:	2800      	cmp	r0, #0
 8007106:	f47f af69 	bne.w	8006fdc <_strtod_l+0x744>
 800710a:	e604      	b.n	8006d16 <_strtod_l+0x47e>
 800710c:	08009b48 	.word	0x08009b48
 8007110:	fffffc02 	.word	0xfffffc02
 8007114:	7ff00000 	.word	0x7ff00000
 8007118:	39500000 	.word	0x39500000
 800711c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007120:	d165      	bne.n	80071ee <_strtod_l+0x956>
 8007122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007124:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007128:	b35a      	cbz	r2, 8007182 <_strtod_l+0x8ea>
 800712a:	4a99      	ldr	r2, [pc, #612]	; (8007390 <_strtod_l+0xaf8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d12b      	bne.n	8007188 <_strtod_l+0x8f0>
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	4641      	mov	r1, r8
 8007134:	b303      	cbz	r3, 8007178 <_strtod_l+0x8e0>
 8007136:	464a      	mov	r2, r9
 8007138:	4b96      	ldr	r3, [pc, #600]	; (8007394 <_strtod_l+0xafc>)
 800713a:	4013      	ands	r3, r2
 800713c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007140:	f04f 32ff 	mov.w	r2, #4294967295
 8007144:	d81b      	bhi.n	800717e <_strtod_l+0x8e6>
 8007146:	0d1b      	lsrs	r3, r3, #20
 8007148:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	4299      	cmp	r1, r3
 8007152:	d119      	bne.n	8007188 <_strtod_l+0x8f0>
 8007154:	4b90      	ldr	r3, [pc, #576]	; (8007398 <_strtod_l+0xb00>)
 8007156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007158:	429a      	cmp	r2, r3
 800715a:	d102      	bne.n	8007162 <_strtod_l+0x8ca>
 800715c:	3101      	adds	r1, #1
 800715e:	f43f adda 	beq.w	8006d16 <_strtod_l+0x47e>
 8007162:	f04f 0800 	mov.w	r8, #0
 8007166:	4b8b      	ldr	r3, [pc, #556]	; (8007394 <_strtod_l+0xafc>)
 8007168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716a:	401a      	ands	r2, r3
 800716c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d19a      	bne.n	80070ac <_strtod_l+0x814>
 8007176:	e5d9      	b.n	8006d2c <_strtod_l+0x494>
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	e7e8      	b.n	8007150 <_strtod_l+0x8b8>
 800717e:	4613      	mov	r3, r2
 8007180:	e7e6      	b.n	8007150 <_strtod_l+0x8b8>
 8007182:	ea53 0308 	orrs.w	r3, r3, r8
 8007186:	d081      	beq.n	800708c <_strtod_l+0x7f4>
 8007188:	b1e5      	cbz	r5, 80071c4 <_strtod_l+0x92c>
 800718a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718c:	421d      	tst	r5, r3
 800718e:	d0ef      	beq.n	8007170 <_strtod_l+0x8d8>
 8007190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	9a05      	ldr	r2, [sp, #20]
 8007198:	b1c3      	cbz	r3, 80071cc <_strtod_l+0x934>
 800719a:	f7ff fb59 	bl	8006850 <sulp>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a6:	f7f9 f89f 	bl	80002e8 <__adddf3>
 80071aa:	4680      	mov	r8, r0
 80071ac:	4689      	mov	r9, r1
 80071ae:	e7df      	b.n	8007170 <_strtod_l+0x8d8>
 80071b0:	4013      	ands	r3, r2
 80071b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071b6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071ba:	f04f 38ff 	mov.w	r8, #4294967295
 80071be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071c2:	e7d5      	b.n	8007170 <_strtod_l+0x8d8>
 80071c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071c6:	ea13 0f08 	tst.w	r3, r8
 80071ca:	e7e0      	b.n	800718e <_strtod_l+0x8f6>
 80071cc:	f7ff fb40 	bl	8006850 <sulp>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071d8:	f7f9 f884 	bl	80002e4 <__aeabi_dsub>
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	f7f9 fc9e 	bl	8000b24 <__aeabi_dcmpeq>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d0c1      	beq.n	8007170 <_strtod_l+0x8d8>
 80071ec:	e608      	b.n	8006e00 <_strtod_l+0x568>
 80071ee:	4658      	mov	r0, fp
 80071f0:	9904      	ldr	r1, [sp, #16]
 80071f2:	f001 fa75 	bl	80086e0 <__ratio>
 80071f6:	2200      	movs	r2, #0
 80071f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	f7f9 fca4 	bl	8000b4c <__aeabi_dcmple>
 8007204:	2800      	cmp	r0, #0
 8007206:	d070      	beq.n	80072ea <_strtod_l+0xa52>
 8007208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d042      	beq.n	8007294 <_strtod_l+0x9fc>
 800720e:	2600      	movs	r6, #0
 8007210:	4f62      	ldr	r7, [pc, #392]	; (800739c <_strtod_l+0xb04>)
 8007212:	4d62      	ldr	r5, [pc, #392]	; (800739c <_strtod_l+0xb04>)
 8007214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800721a:	0d1b      	lsrs	r3, r3, #20
 800721c:	051b      	lsls	r3, r3, #20
 800721e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007222:	4b5f      	ldr	r3, [pc, #380]	; (80073a0 <_strtod_l+0xb08>)
 8007224:	429a      	cmp	r2, r3
 8007226:	f040 80c3 	bne.w	80073b0 <_strtod_l+0xb18>
 800722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722c:	4640      	mov	r0, r8
 800722e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007232:	4649      	mov	r1, r9
 8007234:	f001 f97e 	bl	8008534 <__ulp>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 fa08 	bl	8000654 <__aeabi_dmul>
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	f7f9 f84e 	bl	80002e8 <__adddf3>
 800724c:	460b      	mov	r3, r1
 800724e:	4951      	ldr	r1, [pc, #324]	; (8007394 <_strtod_l+0xafc>)
 8007250:	4a54      	ldr	r2, [pc, #336]	; (80073a4 <_strtod_l+0xb0c>)
 8007252:	4019      	ands	r1, r3
 8007254:	4291      	cmp	r1, r2
 8007256:	4680      	mov	r8, r0
 8007258:	d95d      	bls.n	8007316 <_strtod_l+0xa7e>
 800725a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800725c:	4b4e      	ldr	r3, [pc, #312]	; (8007398 <_strtod_l+0xb00>)
 800725e:	429a      	cmp	r2, r3
 8007260:	d103      	bne.n	800726a <_strtod_l+0x9d2>
 8007262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007264:	3301      	adds	r3, #1
 8007266:	f43f ad56 	beq.w	8006d16 <_strtod_l+0x47e>
 800726a:	f04f 38ff 	mov.w	r8, #4294967295
 800726e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007398 <_strtod_l+0xb00>
 8007272:	4650      	mov	r0, sl
 8007274:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007276:	f000 fe2d 	bl	8007ed4 <_Bfree>
 800727a:	4650      	mov	r0, sl
 800727c:	9906      	ldr	r1, [sp, #24]
 800727e:	f000 fe29 	bl	8007ed4 <_Bfree>
 8007282:	4650      	mov	r0, sl
 8007284:	9904      	ldr	r1, [sp, #16]
 8007286:	f000 fe25 	bl	8007ed4 <_Bfree>
 800728a:	4659      	mov	r1, fp
 800728c:	4650      	mov	r0, sl
 800728e:	f000 fe21 	bl	8007ed4 <_Bfree>
 8007292:	e627      	b.n	8006ee4 <_strtod_l+0x64c>
 8007294:	f1b8 0f00 	cmp.w	r8, #0
 8007298:	d119      	bne.n	80072ce <_strtod_l+0xa36>
 800729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a0:	b9e3      	cbnz	r3, 80072dc <_strtod_l+0xa44>
 80072a2:	2200      	movs	r2, #0
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	4b3c      	ldr	r3, [pc, #240]	; (800739c <_strtod_l+0xb04>)
 80072aa:	f7f9 fc45 	bl	8000b38 <__aeabi_dcmplt>
 80072ae:	b9c8      	cbnz	r0, 80072e4 <_strtod_l+0xa4c>
 80072b0:	2200      	movs	r2, #0
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	4b3c      	ldr	r3, [pc, #240]	; (80073a8 <_strtod_l+0xb10>)
 80072b8:	f7f9 f9cc 	bl	8000654 <__aeabi_dmul>
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80072c4:	9416      	str	r4, [sp, #88]	; 0x58
 80072c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80072c8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80072cc:	e7a2      	b.n	8007214 <_strtod_l+0x97c>
 80072ce:	f1b8 0f01 	cmp.w	r8, #1
 80072d2:	d103      	bne.n	80072dc <_strtod_l+0xa44>
 80072d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f43f ad92 	beq.w	8006e00 <_strtod_l+0x568>
 80072dc:	2600      	movs	r6, #0
 80072de:	2400      	movs	r4, #0
 80072e0:	4f32      	ldr	r7, [pc, #200]	; (80073ac <_strtod_l+0xb14>)
 80072e2:	e796      	b.n	8007212 <_strtod_l+0x97a>
 80072e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80072e6:	4d30      	ldr	r5, [pc, #192]	; (80073a8 <_strtod_l+0xb10>)
 80072e8:	e7ea      	b.n	80072c0 <_strtod_l+0xa28>
 80072ea:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <_strtod_l+0xb10>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	4630      	mov	r0, r6
 80072f0:	4639      	mov	r1, r7
 80072f2:	f7f9 f9af 	bl	8000654 <__aeabi_dmul>
 80072f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f8:	4604      	mov	r4, r0
 80072fa:	460d      	mov	r5, r1
 80072fc:	b933      	cbnz	r3, 800730c <_strtod_l+0xa74>
 80072fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007302:	9010      	str	r0, [sp, #64]	; 0x40
 8007304:	9311      	str	r3, [sp, #68]	; 0x44
 8007306:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800730a:	e783      	b.n	8007214 <_strtod_l+0x97c>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007314:	e7f7      	b.n	8007306 <_strtod_l+0xa6e>
 8007316:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800731a:	9b05      	ldr	r3, [sp, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1a8      	bne.n	8007272 <_strtod_l+0x9da>
 8007320:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007326:	0d1b      	lsrs	r3, r3, #20
 8007328:	051b      	lsls	r3, r3, #20
 800732a:	429a      	cmp	r2, r3
 800732c:	d1a1      	bne.n	8007272 <_strtod_l+0x9da>
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f9 fe69 	bl	8001008 <__aeabi_d2lz>
 8007336:	f7f9 f95f 	bl	80005f8 <__aeabi_l2d>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f8 ffcf 	bl	80002e4 <__aeabi_dsub>
 8007346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800734c:	ea43 0308 	orr.w	r3, r3, r8
 8007350:	4313      	orrs	r3, r2
 8007352:	4604      	mov	r4, r0
 8007354:	460d      	mov	r5, r1
 8007356:	d066      	beq.n	8007426 <_strtod_l+0xb8e>
 8007358:	a309      	add	r3, pc, #36	; (adr r3, 8007380 <_strtod_l+0xae8>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f7f9 fbeb 	bl	8000b38 <__aeabi_dcmplt>
 8007362:	2800      	cmp	r0, #0
 8007364:	f47f ace2 	bne.w	8006d2c <_strtod_l+0x494>
 8007368:	a307      	add	r3, pc, #28	; (adr r3, 8007388 <_strtod_l+0xaf0>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 fbff 	bl	8000b74 <__aeabi_dcmpgt>
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f af7b 	beq.w	8007272 <_strtod_l+0x9da>
 800737c:	e4d6      	b.n	8006d2c <_strtod_l+0x494>
 800737e:	bf00      	nop
 8007380:	94a03595 	.word	0x94a03595
 8007384:	3fdfffff 	.word	0x3fdfffff
 8007388:	35afe535 	.word	0x35afe535
 800738c:	3fe00000 	.word	0x3fe00000
 8007390:	000fffff 	.word	0x000fffff
 8007394:	7ff00000 	.word	0x7ff00000
 8007398:	7fefffff 	.word	0x7fefffff
 800739c:	3ff00000 	.word	0x3ff00000
 80073a0:	7fe00000 	.word	0x7fe00000
 80073a4:	7c9fffff 	.word	0x7c9fffff
 80073a8:	3fe00000 	.word	0x3fe00000
 80073ac:	bff00000 	.word	0xbff00000
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	b313      	cbz	r3, 80073fa <_strtod_l+0xb62>
 80073b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073ba:	d81e      	bhi.n	80073fa <_strtod_l+0xb62>
 80073bc:	a326      	add	r3, pc, #152	; (adr r3, 8007458 <_strtod_l+0xbc0>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 fbc1 	bl	8000b4c <__aeabi_dcmple>
 80073ca:	b190      	cbz	r0, 80073f2 <_strtod_l+0xb5a>
 80073cc:	4629      	mov	r1, r5
 80073ce:	4620      	mov	r0, r4
 80073d0:	f7f9 fbf0 	bl	8000bb4 <__aeabi_d2uiz>
 80073d4:	2801      	cmp	r0, #1
 80073d6:	bf38      	it	cc
 80073d8:	2001      	movcc	r0, #1
 80073da:	f7f9 f8c1 	bl	8000560 <__aeabi_ui2d>
 80073de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	b9d3      	cbnz	r3, 800741c <_strtod_l+0xb84>
 80073e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073ea:	9012      	str	r0, [sp, #72]	; 0x48
 80073ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80073ee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80073f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073f4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80073f8:	1a9f      	subs	r7, r3, r2
 80073fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073fe:	f001 f899 	bl	8008534 <__ulp>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 f923 	bl	8000654 <__aeabi_dmul>
 800740e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007412:	f7f8 ff69 	bl	80002e8 <__adddf3>
 8007416:	4680      	mov	r8, r0
 8007418:	4689      	mov	r9, r1
 800741a:	e77e      	b.n	800731a <_strtod_l+0xa82>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007424:	e7e3      	b.n	80073ee <_strtod_l+0xb56>
 8007426:	a30e      	add	r3, pc, #56	; (adr r3, 8007460 <_strtod_l+0xbc8>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f7f9 fb84 	bl	8000b38 <__aeabi_dcmplt>
 8007430:	e7a1      	b.n	8007376 <_strtod_l+0xade>
 8007432:	2300      	movs	r3, #0
 8007434:	930a      	str	r3, [sp, #40]	; 0x28
 8007436:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007438:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	f7ff ba71 	b.w	8006922 <_strtod_l+0x8a>
 8007440:	2a65      	cmp	r2, #101	; 0x65
 8007442:	f43f ab63 	beq.w	8006b0c <_strtod_l+0x274>
 8007446:	2a45      	cmp	r2, #69	; 0x45
 8007448:	f43f ab60 	beq.w	8006b0c <_strtod_l+0x274>
 800744c:	2301      	movs	r3, #1
 800744e:	f7ff bb95 	b.w	8006b7c <_strtod_l+0x2e4>
 8007452:	bf00      	nop
 8007454:	f3af 8000 	nop.w
 8007458:	ffc00000 	.word	0xffc00000
 800745c:	41dfffff 	.word	0x41dfffff
 8007460:	94a03595 	.word	0x94a03595
 8007464:	3fcfffff 	.word	0x3fcfffff

08007468 <strtof>:
 8007468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746c:	4f22      	ldr	r7, [pc, #136]	; (80074f8 <strtof+0x90>)
 800746e:	460a      	mov	r2, r1
 8007470:	4b22      	ldr	r3, [pc, #136]	; (80074fc <strtof+0x94>)
 8007472:	4601      	mov	r1, r0
 8007474:	6838      	ldr	r0, [r7, #0]
 8007476:	f7ff fa0f 	bl	8006898 <_strtod_l>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4606      	mov	r6, r0
 8007480:	460c      	mov	r4, r1
 8007482:	f7f9 fb81 	bl	8000b88 <__aeabi_dcmpun>
 8007486:	b168      	cbz	r0, 80074a4 <strtof+0x3c>
 8007488:	2c00      	cmp	r4, #0
 800748a:	481d      	ldr	r0, [pc, #116]	; (8007500 <strtof+0x98>)
 800748c:	da06      	bge.n	800749c <strtof+0x34>
 800748e:	f001 fdfd 	bl	800908c <nanf>
 8007492:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8007496:	4628      	mov	r0, r5
 8007498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800749c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074a0:	f001 bdf4 	b.w	800908c <nanf>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7f9 fba4 	bl	8000bf4 <__aeabi_d2f>
 80074ac:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80074b0:	4605      	mov	r5, r0
 80074b2:	4914      	ldr	r1, [pc, #80]	; (8007504 <strtof+0x9c>)
 80074b4:	4640      	mov	r0, r8
 80074b6:	f7f9 fd71 	bl	8000f9c <__aeabi_fcmpun>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d1eb      	bne.n	8007496 <strtof+0x2e>
 80074be:	4640      	mov	r0, r8
 80074c0:	4910      	ldr	r1, [pc, #64]	; (8007504 <strtof+0x9c>)
 80074c2:	f7f9 fd4d 	bl	8000f60 <__aeabi_fcmple>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d1e5      	bne.n	8007496 <strtof+0x2e>
 80074ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80074ce:	f04f 32ff 	mov.w	r2, #4294967295
 80074d2:	4630      	mov	r0, r6
 80074d4:	4621      	mov	r1, r4
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <strtof+0xa0>)
 80074d8:	f7f9 fb56 	bl	8000b88 <__aeabi_dcmpun>
 80074dc:	b940      	cbnz	r0, 80074f0 <strtof+0x88>
 80074de:	f04f 32ff 	mov.w	r2, #4294967295
 80074e2:	4630      	mov	r0, r6
 80074e4:	4621      	mov	r1, r4
 80074e6:	4b08      	ldr	r3, [pc, #32]	; (8007508 <strtof+0xa0>)
 80074e8:	f7f9 fb30 	bl	8000b4c <__aeabi_dcmple>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d0d2      	beq.n	8007496 <strtof+0x2e>
 80074f0:	2222      	movs	r2, #34	; 0x22
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e7ce      	b.n	8007496 <strtof+0x2e>
 80074f8:	20000018 	.word	0x20000018
 80074fc:	20000080 	.word	0x20000080
 8007500:	08009c1f 	.word	0x08009c1f
 8007504:	7f7fffff 	.word	0x7f7fffff
 8007508:	7fefffff 	.word	0x7fefffff

0800750c <strtok>:
 800750c:	4b16      	ldr	r3, [pc, #88]	; (8007568 <strtok+0x5c>)
 800750e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007512:	681f      	ldr	r7, [r3, #0]
 8007514:	4605      	mov	r5, r0
 8007516:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007518:	460e      	mov	r6, r1
 800751a:	b9ec      	cbnz	r4, 8007558 <strtok+0x4c>
 800751c:	2050      	movs	r0, #80	; 0x50
 800751e:	f7ff f873 	bl	8006608 <malloc>
 8007522:	4602      	mov	r2, r0
 8007524:	65b8      	str	r0, [r7, #88]	; 0x58
 8007526:	b920      	cbnz	r0, 8007532 <strtok+0x26>
 8007528:	2157      	movs	r1, #87	; 0x57
 800752a:	4b10      	ldr	r3, [pc, #64]	; (800756c <strtok+0x60>)
 800752c:	4810      	ldr	r0, [pc, #64]	; (8007570 <strtok+0x64>)
 800752e:	f000 f8cf 	bl	80076d0 <__assert_func>
 8007532:	e9c0 4400 	strd	r4, r4, [r0]
 8007536:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800753a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800753e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007542:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007546:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800754a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800754e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007552:	6184      	str	r4, [r0, #24]
 8007554:	7704      	strb	r4, [r0, #28]
 8007556:	6244      	str	r4, [r0, #36]	; 0x24
 8007558:	4631      	mov	r1, r6
 800755a:	4628      	mov	r0, r5
 800755c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800755e:	2301      	movs	r3, #1
 8007560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	f000 b806 	b.w	8007574 <__strtok_r>
 8007568:	20000018 	.word	0x20000018
 800756c:	08009b70 	.word	0x08009b70
 8007570:	08009b87 	.word	0x08009b87

08007574 <__strtok_r>:
 8007574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007576:	b908      	cbnz	r0, 800757c <__strtok_r+0x8>
 8007578:	6810      	ldr	r0, [r2, #0]
 800757a:	b188      	cbz	r0, 80075a0 <__strtok_r+0x2c>
 800757c:	4604      	mov	r4, r0
 800757e:	460f      	mov	r7, r1
 8007580:	4620      	mov	r0, r4
 8007582:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007586:	f817 6b01 	ldrb.w	r6, [r7], #1
 800758a:	b91e      	cbnz	r6, 8007594 <__strtok_r+0x20>
 800758c:	b965      	cbnz	r5, 80075a8 <__strtok_r+0x34>
 800758e:	4628      	mov	r0, r5
 8007590:	6015      	str	r5, [r2, #0]
 8007592:	e005      	b.n	80075a0 <__strtok_r+0x2c>
 8007594:	42b5      	cmp	r5, r6
 8007596:	d1f6      	bne.n	8007586 <__strtok_r+0x12>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f0      	bne.n	800757e <__strtok_r+0xa>
 800759c:	6014      	str	r4, [r2, #0]
 800759e:	7003      	strb	r3, [r0, #0]
 80075a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a2:	461c      	mov	r4, r3
 80075a4:	e00c      	b.n	80075c0 <__strtok_r+0x4c>
 80075a6:	b915      	cbnz	r5, 80075ae <__strtok_r+0x3a>
 80075a8:	460e      	mov	r6, r1
 80075aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80075b2:	42ab      	cmp	r3, r5
 80075b4:	d1f7      	bne.n	80075a6 <__strtok_r+0x32>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f3      	beq.n	80075a2 <__strtok_r+0x2e>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	e7ed      	b.n	80075a0 <__strtok_r+0x2c>

080075c4 <_strtol_l.constprop.0>:
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ca:	4680      	mov	r8, r0
 80075cc:	d001      	beq.n	80075d2 <_strtol_l.constprop.0+0xe>
 80075ce:	2b24      	cmp	r3, #36	; 0x24
 80075d0:	d906      	bls.n	80075e0 <_strtol_l.constprop.0+0x1c>
 80075d2:	f7fe ffef 	bl	80065b4 <__errno>
 80075d6:	2316      	movs	r3, #22
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	2000      	movs	r0, #0
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	460d      	mov	r5, r1
 80075e2:	4f35      	ldr	r7, [pc, #212]	; (80076b8 <_strtol_l.constprop.0+0xf4>)
 80075e4:	4628      	mov	r0, r5
 80075e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075ea:	5de6      	ldrb	r6, [r4, r7]
 80075ec:	f016 0608 	ands.w	r6, r6, #8
 80075f0:	d1f8      	bne.n	80075e4 <_strtol_l.constprop.0+0x20>
 80075f2:	2c2d      	cmp	r4, #45	; 0x2d
 80075f4:	d12f      	bne.n	8007656 <_strtol_l.constprop.0+0x92>
 80075f6:	2601      	movs	r6, #1
 80075f8:	782c      	ldrb	r4, [r5, #0]
 80075fa:	1c85      	adds	r5, r0, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d057      	beq.n	80076b0 <_strtol_l.constprop.0+0xec>
 8007600:	2b10      	cmp	r3, #16
 8007602:	d109      	bne.n	8007618 <_strtol_l.constprop.0+0x54>
 8007604:	2c30      	cmp	r4, #48	; 0x30
 8007606:	d107      	bne.n	8007618 <_strtol_l.constprop.0+0x54>
 8007608:	7828      	ldrb	r0, [r5, #0]
 800760a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800760e:	2858      	cmp	r0, #88	; 0x58
 8007610:	d149      	bne.n	80076a6 <_strtol_l.constprop.0+0xe2>
 8007612:	2310      	movs	r3, #16
 8007614:	786c      	ldrb	r4, [r5, #1]
 8007616:	3502      	adds	r5, #2
 8007618:	2700      	movs	r7, #0
 800761a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800761e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007622:	fbbe f9f3 	udiv	r9, lr, r3
 8007626:	4638      	mov	r0, r7
 8007628:	fb03 ea19 	mls	sl, r3, r9, lr
 800762c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007630:	f1bc 0f09 	cmp.w	ip, #9
 8007634:	d814      	bhi.n	8007660 <_strtol_l.constprop.0+0x9c>
 8007636:	4664      	mov	r4, ip
 8007638:	42a3      	cmp	r3, r4
 800763a:	dd22      	ble.n	8007682 <_strtol_l.constprop.0+0xbe>
 800763c:	2f00      	cmp	r7, #0
 800763e:	db1d      	blt.n	800767c <_strtol_l.constprop.0+0xb8>
 8007640:	4581      	cmp	r9, r0
 8007642:	d31b      	bcc.n	800767c <_strtol_l.constprop.0+0xb8>
 8007644:	d101      	bne.n	800764a <_strtol_l.constprop.0+0x86>
 8007646:	45a2      	cmp	sl, r4
 8007648:	db18      	blt.n	800767c <_strtol_l.constprop.0+0xb8>
 800764a:	2701      	movs	r7, #1
 800764c:	fb00 4003 	mla	r0, r0, r3, r4
 8007650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007654:	e7ea      	b.n	800762c <_strtol_l.constprop.0+0x68>
 8007656:	2c2b      	cmp	r4, #43	; 0x2b
 8007658:	bf04      	itt	eq
 800765a:	782c      	ldrbeq	r4, [r5, #0]
 800765c:	1c85      	addeq	r5, r0, #2
 800765e:	e7cd      	b.n	80075fc <_strtol_l.constprop.0+0x38>
 8007660:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007664:	f1bc 0f19 	cmp.w	ip, #25
 8007668:	d801      	bhi.n	800766e <_strtol_l.constprop.0+0xaa>
 800766a:	3c37      	subs	r4, #55	; 0x37
 800766c:	e7e4      	b.n	8007638 <_strtol_l.constprop.0+0x74>
 800766e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007672:	f1bc 0f19 	cmp.w	ip, #25
 8007676:	d804      	bhi.n	8007682 <_strtol_l.constprop.0+0xbe>
 8007678:	3c57      	subs	r4, #87	; 0x57
 800767a:	e7dd      	b.n	8007638 <_strtol_l.constprop.0+0x74>
 800767c:	f04f 37ff 	mov.w	r7, #4294967295
 8007680:	e7e6      	b.n	8007650 <_strtol_l.constprop.0+0x8c>
 8007682:	2f00      	cmp	r7, #0
 8007684:	da07      	bge.n	8007696 <_strtol_l.constprop.0+0xd2>
 8007686:	2322      	movs	r3, #34	; 0x22
 8007688:	4670      	mov	r0, lr
 800768a:	f8c8 3000 	str.w	r3, [r8]
 800768e:	2a00      	cmp	r2, #0
 8007690:	d0a4      	beq.n	80075dc <_strtol_l.constprop.0+0x18>
 8007692:	1e69      	subs	r1, r5, #1
 8007694:	e005      	b.n	80076a2 <_strtol_l.constprop.0+0xde>
 8007696:	b106      	cbz	r6, 800769a <_strtol_l.constprop.0+0xd6>
 8007698:	4240      	negs	r0, r0
 800769a:	2a00      	cmp	r2, #0
 800769c:	d09e      	beq.n	80075dc <_strtol_l.constprop.0+0x18>
 800769e:	2f00      	cmp	r7, #0
 80076a0:	d1f7      	bne.n	8007692 <_strtol_l.constprop.0+0xce>
 80076a2:	6011      	str	r1, [r2, #0]
 80076a4:	e79a      	b.n	80075dc <_strtol_l.constprop.0+0x18>
 80076a6:	2430      	movs	r4, #48	; 0x30
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1b5      	bne.n	8007618 <_strtol_l.constprop.0+0x54>
 80076ac:	2308      	movs	r3, #8
 80076ae:	e7b3      	b.n	8007618 <_strtol_l.constprop.0+0x54>
 80076b0:	2c30      	cmp	r4, #48	; 0x30
 80076b2:	d0a9      	beq.n	8007608 <_strtol_l.constprop.0+0x44>
 80076b4:	230a      	movs	r3, #10
 80076b6:	e7af      	b.n	8007618 <_strtol_l.constprop.0+0x54>
 80076b8:	08009c21 	.word	0x08009c21

080076bc <strtol>:
 80076bc:	4613      	mov	r3, r2
 80076be:	460a      	mov	r2, r1
 80076c0:	4601      	mov	r1, r0
 80076c2:	4802      	ldr	r0, [pc, #8]	; (80076cc <strtol+0x10>)
 80076c4:	6800      	ldr	r0, [r0, #0]
 80076c6:	f7ff bf7d 	b.w	80075c4 <_strtol_l.constprop.0>
 80076ca:	bf00      	nop
 80076cc:	20000018 	.word	0x20000018

080076d0 <__assert_func>:
 80076d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076d2:	4614      	mov	r4, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <__assert_func+0x2c>)
 80076d8:	4605      	mov	r5, r0
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68d8      	ldr	r0, [r3, #12]
 80076de:	b14c      	cbz	r4, 80076f4 <__assert_func+0x24>
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <__assert_func+0x30>)
 80076e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076e6:	9100      	str	r1, [sp, #0]
 80076e8:	462b      	mov	r3, r5
 80076ea:	4906      	ldr	r1, [pc, #24]	; (8007704 <__assert_func+0x34>)
 80076ec:	f000 f80e 	bl	800770c <fiprintf>
 80076f0:	f001 fdb2 	bl	8009258 <abort>
 80076f4:	4b04      	ldr	r3, [pc, #16]	; (8007708 <__assert_func+0x38>)
 80076f6:	461c      	mov	r4, r3
 80076f8:	e7f3      	b.n	80076e2 <__assert_func+0x12>
 80076fa:	bf00      	nop
 80076fc:	20000018 	.word	0x20000018
 8007700:	08009be4 	.word	0x08009be4
 8007704:	08009bf1 	.word	0x08009bf1
 8007708:	08009c1f 	.word	0x08009c1f

0800770c <fiprintf>:
 800770c:	b40e      	push	{r1, r2, r3}
 800770e:	b503      	push	{r0, r1, lr}
 8007710:	4601      	mov	r1, r0
 8007712:	ab03      	add	r3, sp, #12
 8007714:	4805      	ldr	r0, [pc, #20]	; (800772c <fiprintf+0x20>)
 8007716:	f853 2b04 	ldr.w	r2, [r3], #4
 800771a:	6800      	ldr	r0, [r0, #0]
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	f001 f9e9 	bl	8008af4 <_vfiprintf_r>
 8007722:	b002      	add	sp, #8
 8007724:	f85d eb04 	ldr.w	lr, [sp], #4
 8007728:	b003      	add	sp, #12
 800772a:	4770      	bx	lr
 800772c:	20000018 	.word	0x20000018

08007730 <rshift>:
 8007730:	6903      	ldr	r3, [r0, #16]
 8007732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007736:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800773a:	f100 0414 	add.w	r4, r0, #20
 800773e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007742:	dd46      	ble.n	80077d2 <rshift+0xa2>
 8007744:	f011 011f 	ands.w	r1, r1, #31
 8007748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800774c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007750:	d10c      	bne.n	800776c <rshift+0x3c>
 8007752:	4629      	mov	r1, r5
 8007754:	f100 0710 	add.w	r7, r0, #16
 8007758:	42b1      	cmp	r1, r6
 800775a:	d335      	bcc.n	80077c8 <rshift+0x98>
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	1eea      	subs	r2, r5, #3
 8007762:	4296      	cmp	r6, r2
 8007764:	bf38      	it	cc
 8007766:	2300      	movcc	r3, #0
 8007768:	4423      	add	r3, r4
 800776a:	e015      	b.n	8007798 <rshift+0x68>
 800776c:	46a1      	mov	r9, r4
 800776e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007772:	f1c1 0820 	rsb	r8, r1, #32
 8007776:	40cf      	lsrs	r7, r1
 8007778:	f105 0e04 	add.w	lr, r5, #4
 800777c:	4576      	cmp	r6, lr
 800777e:	46f4      	mov	ip, lr
 8007780:	d816      	bhi.n	80077b0 <rshift+0x80>
 8007782:	1a9a      	subs	r2, r3, r2
 8007784:	0092      	lsls	r2, r2, #2
 8007786:	3a04      	subs	r2, #4
 8007788:	3501      	adds	r5, #1
 800778a:	42ae      	cmp	r6, r5
 800778c:	bf38      	it	cc
 800778e:	2200      	movcc	r2, #0
 8007790:	18a3      	adds	r3, r4, r2
 8007792:	50a7      	str	r7, [r4, r2]
 8007794:	b107      	cbz	r7, 8007798 <rshift+0x68>
 8007796:	3304      	adds	r3, #4
 8007798:	42a3      	cmp	r3, r4
 800779a:	eba3 0204 	sub.w	r2, r3, r4
 800779e:	bf08      	it	eq
 80077a0:	2300      	moveq	r3, #0
 80077a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077a6:	6102      	str	r2, [r0, #16]
 80077a8:	bf08      	it	eq
 80077aa:	6143      	streq	r3, [r0, #20]
 80077ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077b0:	f8dc c000 	ldr.w	ip, [ip]
 80077b4:	fa0c fc08 	lsl.w	ip, ip, r8
 80077b8:	ea4c 0707 	orr.w	r7, ip, r7
 80077bc:	f849 7b04 	str.w	r7, [r9], #4
 80077c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077c4:	40cf      	lsrs	r7, r1
 80077c6:	e7d9      	b.n	800777c <rshift+0x4c>
 80077c8:	f851 cb04 	ldr.w	ip, [r1], #4
 80077cc:	f847 cf04 	str.w	ip, [r7, #4]!
 80077d0:	e7c2      	b.n	8007758 <rshift+0x28>
 80077d2:	4623      	mov	r3, r4
 80077d4:	e7e0      	b.n	8007798 <rshift+0x68>

080077d6 <__hexdig_fun>:
 80077d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d802      	bhi.n	80077e4 <__hexdig_fun+0xe>
 80077de:	3820      	subs	r0, #32
 80077e0:	b2c0      	uxtb	r0, r0
 80077e2:	4770      	bx	lr
 80077e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d801      	bhi.n	80077f0 <__hexdig_fun+0x1a>
 80077ec:	3847      	subs	r0, #71	; 0x47
 80077ee:	e7f7      	b.n	80077e0 <__hexdig_fun+0xa>
 80077f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d801      	bhi.n	80077fc <__hexdig_fun+0x26>
 80077f8:	3827      	subs	r0, #39	; 0x27
 80077fa:	e7f1      	b.n	80077e0 <__hexdig_fun+0xa>
 80077fc:	2000      	movs	r0, #0
 80077fe:	4770      	bx	lr

08007800 <__gethex>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	b08b      	sub	sp, #44	; 0x2c
 8007806:	9305      	str	r3, [sp, #20]
 8007808:	4bb2      	ldr	r3, [pc, #712]	; (8007ad4 <__gethex+0x2d4>)
 800780a:	9002      	str	r0, [sp, #8]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	468b      	mov	fp, r1
 8007810:	4618      	mov	r0, r3
 8007812:	4690      	mov	r8, r2
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	f7f8 fca5 	bl	8000164 <strlen>
 800781a:	4682      	mov	sl, r0
 800781c:	9b03      	ldr	r3, [sp, #12]
 800781e:	f8db 2000 	ldr.w	r2, [fp]
 8007822:	4403      	add	r3, r0
 8007824:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007828:	9306      	str	r3, [sp, #24]
 800782a:	1c93      	adds	r3, r2, #2
 800782c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007830:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007834:	32fe      	adds	r2, #254	; 0xfe
 8007836:	18d1      	adds	r1, r2, r3
 8007838:	461f      	mov	r7, r3
 800783a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800783e:	9101      	str	r1, [sp, #4]
 8007840:	2830      	cmp	r0, #48	; 0x30
 8007842:	d0f8      	beq.n	8007836 <__gethex+0x36>
 8007844:	f7ff ffc7 	bl	80077d6 <__hexdig_fun>
 8007848:	4604      	mov	r4, r0
 800784a:	2800      	cmp	r0, #0
 800784c:	d13a      	bne.n	80078c4 <__gethex+0xc4>
 800784e:	4652      	mov	r2, sl
 8007850:	4638      	mov	r0, r7
 8007852:	9903      	ldr	r1, [sp, #12]
 8007854:	f001 fc1e 	bl	8009094 <strncmp>
 8007858:	4605      	mov	r5, r0
 800785a:	2800      	cmp	r0, #0
 800785c:	d166      	bne.n	800792c <__gethex+0x12c>
 800785e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007862:	eb07 060a 	add.w	r6, r7, sl
 8007866:	f7ff ffb6 	bl	80077d6 <__hexdig_fun>
 800786a:	2800      	cmp	r0, #0
 800786c:	d060      	beq.n	8007930 <__gethex+0x130>
 800786e:	4633      	mov	r3, r6
 8007870:	7818      	ldrb	r0, [r3, #0]
 8007872:	461f      	mov	r7, r3
 8007874:	2830      	cmp	r0, #48	; 0x30
 8007876:	f103 0301 	add.w	r3, r3, #1
 800787a:	d0f9      	beq.n	8007870 <__gethex+0x70>
 800787c:	f7ff ffab 	bl	80077d6 <__hexdig_fun>
 8007880:	2301      	movs	r3, #1
 8007882:	fab0 f480 	clz	r4, r0
 8007886:	4635      	mov	r5, r6
 8007888:	0964      	lsrs	r4, r4, #5
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	463a      	mov	r2, r7
 800788e:	4616      	mov	r6, r2
 8007890:	7830      	ldrb	r0, [r6, #0]
 8007892:	3201      	adds	r2, #1
 8007894:	f7ff ff9f 	bl	80077d6 <__hexdig_fun>
 8007898:	2800      	cmp	r0, #0
 800789a:	d1f8      	bne.n	800788e <__gethex+0x8e>
 800789c:	4652      	mov	r2, sl
 800789e:	4630      	mov	r0, r6
 80078a0:	9903      	ldr	r1, [sp, #12]
 80078a2:	f001 fbf7 	bl	8009094 <strncmp>
 80078a6:	b980      	cbnz	r0, 80078ca <__gethex+0xca>
 80078a8:	b94d      	cbnz	r5, 80078be <__gethex+0xbe>
 80078aa:	eb06 050a 	add.w	r5, r6, sl
 80078ae:	462a      	mov	r2, r5
 80078b0:	4616      	mov	r6, r2
 80078b2:	7830      	ldrb	r0, [r6, #0]
 80078b4:	3201      	adds	r2, #1
 80078b6:	f7ff ff8e 	bl	80077d6 <__hexdig_fun>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1f8      	bne.n	80078b0 <__gethex+0xb0>
 80078be:	1bad      	subs	r5, r5, r6
 80078c0:	00ad      	lsls	r5, r5, #2
 80078c2:	e004      	b.n	80078ce <__gethex+0xce>
 80078c4:	2400      	movs	r4, #0
 80078c6:	4625      	mov	r5, r4
 80078c8:	e7e0      	b.n	800788c <__gethex+0x8c>
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	d1f7      	bne.n	80078be <__gethex+0xbe>
 80078ce:	7833      	ldrb	r3, [r6, #0]
 80078d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078d4:	2b50      	cmp	r3, #80	; 0x50
 80078d6:	d139      	bne.n	800794c <__gethex+0x14c>
 80078d8:	7873      	ldrb	r3, [r6, #1]
 80078da:	2b2b      	cmp	r3, #43	; 0x2b
 80078dc:	d02a      	beq.n	8007934 <__gethex+0x134>
 80078de:	2b2d      	cmp	r3, #45	; 0x2d
 80078e0:	d02c      	beq.n	800793c <__gethex+0x13c>
 80078e2:	f04f 0900 	mov.w	r9, #0
 80078e6:	1c71      	adds	r1, r6, #1
 80078e8:	7808      	ldrb	r0, [r1, #0]
 80078ea:	f7ff ff74 	bl	80077d6 <__hexdig_fun>
 80078ee:	1e43      	subs	r3, r0, #1
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b18      	cmp	r3, #24
 80078f4:	d82a      	bhi.n	800794c <__gethex+0x14c>
 80078f6:	f1a0 0210 	sub.w	r2, r0, #16
 80078fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078fe:	f7ff ff6a 	bl	80077d6 <__hexdig_fun>
 8007902:	1e43      	subs	r3, r0, #1
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b18      	cmp	r3, #24
 8007908:	d91b      	bls.n	8007942 <__gethex+0x142>
 800790a:	f1b9 0f00 	cmp.w	r9, #0
 800790e:	d000      	beq.n	8007912 <__gethex+0x112>
 8007910:	4252      	negs	r2, r2
 8007912:	4415      	add	r5, r2
 8007914:	f8cb 1000 	str.w	r1, [fp]
 8007918:	b1d4      	cbz	r4, 8007950 <__gethex+0x150>
 800791a:	9b01      	ldr	r3, [sp, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	bf14      	ite	ne
 8007920:	2700      	movne	r7, #0
 8007922:	2706      	moveq	r7, #6
 8007924:	4638      	mov	r0, r7
 8007926:	b00b      	add	sp, #44	; 0x2c
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792c:	463e      	mov	r6, r7
 800792e:	4625      	mov	r5, r4
 8007930:	2401      	movs	r4, #1
 8007932:	e7cc      	b.n	80078ce <__gethex+0xce>
 8007934:	f04f 0900 	mov.w	r9, #0
 8007938:	1cb1      	adds	r1, r6, #2
 800793a:	e7d5      	b.n	80078e8 <__gethex+0xe8>
 800793c:	f04f 0901 	mov.w	r9, #1
 8007940:	e7fa      	b.n	8007938 <__gethex+0x138>
 8007942:	230a      	movs	r3, #10
 8007944:	fb03 0202 	mla	r2, r3, r2, r0
 8007948:	3a10      	subs	r2, #16
 800794a:	e7d6      	b.n	80078fa <__gethex+0xfa>
 800794c:	4631      	mov	r1, r6
 800794e:	e7e1      	b.n	8007914 <__gethex+0x114>
 8007950:	4621      	mov	r1, r4
 8007952:	1bf3      	subs	r3, r6, r7
 8007954:	3b01      	subs	r3, #1
 8007956:	2b07      	cmp	r3, #7
 8007958:	dc0a      	bgt.n	8007970 <__gethex+0x170>
 800795a:	9802      	ldr	r0, [sp, #8]
 800795c:	f000 fa7a 	bl	8007e54 <_Balloc>
 8007960:	4604      	mov	r4, r0
 8007962:	b940      	cbnz	r0, 8007976 <__gethex+0x176>
 8007964:	4602      	mov	r2, r0
 8007966:	21de      	movs	r1, #222	; 0xde
 8007968:	4b5b      	ldr	r3, [pc, #364]	; (8007ad8 <__gethex+0x2d8>)
 800796a:	485c      	ldr	r0, [pc, #368]	; (8007adc <__gethex+0x2dc>)
 800796c:	f7ff feb0 	bl	80076d0 <__assert_func>
 8007970:	3101      	adds	r1, #1
 8007972:	105b      	asrs	r3, r3, #1
 8007974:	e7ef      	b.n	8007956 <__gethex+0x156>
 8007976:	f04f 0b00 	mov.w	fp, #0
 800797a:	f100 0914 	add.w	r9, r0, #20
 800797e:	f1ca 0301 	rsb	r3, sl, #1
 8007982:	f8cd 9010 	str.w	r9, [sp, #16]
 8007986:	f8cd b004 	str.w	fp, [sp, #4]
 800798a:	9308      	str	r3, [sp, #32]
 800798c:	42b7      	cmp	r7, r6
 800798e:	d33f      	bcc.n	8007a10 <__gethex+0x210>
 8007990:	9f04      	ldr	r7, [sp, #16]
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	f847 3b04 	str.w	r3, [r7], #4
 8007998:	eba7 0709 	sub.w	r7, r7, r9
 800799c:	10bf      	asrs	r7, r7, #2
 800799e:	6127      	str	r7, [r4, #16]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fb49 	bl	8008038 <__hi0bits>
 80079a6:	017f      	lsls	r7, r7, #5
 80079a8:	f8d8 6000 	ldr.w	r6, [r8]
 80079ac:	1a3f      	subs	r7, r7, r0
 80079ae:	42b7      	cmp	r7, r6
 80079b0:	dd62      	ble.n	8007a78 <__gethex+0x278>
 80079b2:	1bbf      	subs	r7, r7, r6
 80079b4:	4639      	mov	r1, r7
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fee3 	bl	8008782 <__any_on>
 80079bc:	4682      	mov	sl, r0
 80079be:	b1a8      	cbz	r0, 80079ec <__gethex+0x1ec>
 80079c0:	f04f 0a01 	mov.w	sl, #1
 80079c4:	1e7b      	subs	r3, r7, #1
 80079c6:	1159      	asrs	r1, r3, #5
 80079c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80079cc:	f003 021f 	and.w	r2, r3, #31
 80079d0:	fa0a f202 	lsl.w	r2, sl, r2
 80079d4:	420a      	tst	r2, r1
 80079d6:	d009      	beq.n	80079ec <__gethex+0x1ec>
 80079d8:	4553      	cmp	r3, sl
 80079da:	dd05      	ble.n	80079e8 <__gethex+0x1e8>
 80079dc:	4620      	mov	r0, r4
 80079de:	1eb9      	subs	r1, r7, #2
 80079e0:	f000 fecf 	bl	8008782 <__any_on>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d144      	bne.n	8007a72 <__gethex+0x272>
 80079e8:	f04f 0a02 	mov.w	sl, #2
 80079ec:	4639      	mov	r1, r7
 80079ee:	4620      	mov	r0, r4
 80079f0:	f7ff fe9e 	bl	8007730 <rshift>
 80079f4:	443d      	add	r5, r7
 80079f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079fa:	42ab      	cmp	r3, r5
 80079fc:	da4a      	bge.n	8007a94 <__gethex+0x294>
 80079fe:	4621      	mov	r1, r4
 8007a00:	9802      	ldr	r0, [sp, #8]
 8007a02:	f000 fa67 	bl	8007ed4 <_Bfree>
 8007a06:	2300      	movs	r3, #0
 8007a08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a0a:	27a3      	movs	r7, #163	; 0xa3
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e789      	b.n	8007924 <__gethex+0x124>
 8007a10:	1e73      	subs	r3, r6, #1
 8007a12:	9a06      	ldr	r2, [sp, #24]
 8007a14:	9307      	str	r3, [sp, #28]
 8007a16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d019      	beq.n	8007a52 <__gethex+0x252>
 8007a1e:	f1bb 0f20 	cmp.w	fp, #32
 8007a22:	d107      	bne.n	8007a34 <__gethex+0x234>
 8007a24:	9b04      	ldr	r3, [sp, #16]
 8007a26:	9a01      	ldr	r2, [sp, #4]
 8007a28:	f843 2b04 	str.w	r2, [r3], #4
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	469b      	mov	fp, r3
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a38:	f7ff fecd 	bl	80077d6 <__hexdig_fun>
 8007a3c:	9b01      	ldr	r3, [sp, #4]
 8007a3e:	f000 000f 	and.w	r0, r0, #15
 8007a42:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a46:	4303      	orrs	r3, r0
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	f10b 0b04 	add.w	fp, fp, #4
 8007a4e:	9b07      	ldr	r3, [sp, #28]
 8007a50:	e00d      	b.n	8007a6e <__gethex+0x26e>
 8007a52:	9a08      	ldr	r2, [sp, #32]
 8007a54:	1e73      	subs	r3, r6, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	42bb      	cmp	r3, r7
 8007a5a:	d3e0      	bcc.n	8007a1e <__gethex+0x21e>
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	4652      	mov	r2, sl
 8007a60:	9903      	ldr	r1, [sp, #12]
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	f001 fb16 	bl	8009094 <strncmp>
 8007a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d1d7      	bne.n	8007a1e <__gethex+0x21e>
 8007a6e:	461e      	mov	r6, r3
 8007a70:	e78c      	b.n	800798c <__gethex+0x18c>
 8007a72:	f04f 0a03 	mov.w	sl, #3
 8007a76:	e7b9      	b.n	80079ec <__gethex+0x1ec>
 8007a78:	da09      	bge.n	8007a8e <__gethex+0x28e>
 8007a7a:	1bf7      	subs	r7, r6, r7
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	463a      	mov	r2, r7
 8007a80:	9802      	ldr	r0, [sp, #8]
 8007a82:	f000 fc3f 	bl	8008304 <__lshift>
 8007a86:	4604      	mov	r4, r0
 8007a88:	1bed      	subs	r5, r5, r7
 8007a8a:	f100 0914 	add.w	r9, r0, #20
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	e7b0      	b.n	80079f6 <__gethex+0x1f6>
 8007a94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a98:	42a8      	cmp	r0, r5
 8007a9a:	dd72      	ble.n	8007b82 <__gethex+0x382>
 8007a9c:	1b45      	subs	r5, r0, r5
 8007a9e:	42ae      	cmp	r6, r5
 8007aa0:	dc35      	bgt.n	8007b0e <__gethex+0x30e>
 8007aa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d029      	beq.n	8007afe <__gethex+0x2fe>
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d02b      	beq.n	8007b06 <__gethex+0x306>
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d11c      	bne.n	8007aec <__gethex+0x2ec>
 8007ab2:	42ae      	cmp	r6, r5
 8007ab4:	d11a      	bne.n	8007aec <__gethex+0x2ec>
 8007ab6:	2e01      	cmp	r6, #1
 8007ab8:	d112      	bne.n	8007ae0 <__gethex+0x2e0>
 8007aba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007abe:	9a05      	ldr	r2, [sp, #20]
 8007ac0:	2762      	movs	r7, #98	; 0x62
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	f8c9 3000 	str.w	r3, [r9]
 8007acc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ace:	601c      	str	r4, [r3, #0]
 8007ad0:	e728      	b.n	8007924 <__gethex+0x124>
 8007ad2:	bf00      	nop
 8007ad4:	08009d98 	.word	0x08009d98
 8007ad8:	08009d21 	.word	0x08009d21
 8007adc:	08009d32 	.word	0x08009d32
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	1e71      	subs	r1, r6, #1
 8007ae4:	f000 fe4d 	bl	8008782 <__any_on>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d1e6      	bne.n	8007aba <__gethex+0x2ba>
 8007aec:	4621      	mov	r1, r4
 8007aee:	9802      	ldr	r0, [sp, #8]
 8007af0:	f000 f9f0 	bl	8007ed4 <_Bfree>
 8007af4:	2300      	movs	r3, #0
 8007af6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007af8:	2750      	movs	r7, #80	; 0x50
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e712      	b.n	8007924 <__gethex+0x124>
 8007afe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f3      	bne.n	8007aec <__gethex+0x2ec>
 8007b04:	e7d9      	b.n	8007aba <__gethex+0x2ba>
 8007b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1d6      	bne.n	8007aba <__gethex+0x2ba>
 8007b0c:	e7ee      	b.n	8007aec <__gethex+0x2ec>
 8007b0e:	1e6f      	subs	r7, r5, #1
 8007b10:	f1ba 0f00 	cmp.w	sl, #0
 8007b14:	d132      	bne.n	8007b7c <__gethex+0x37c>
 8007b16:	b127      	cbz	r7, 8007b22 <__gethex+0x322>
 8007b18:	4639      	mov	r1, r7
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 fe31 	bl	8008782 <__any_on>
 8007b20:	4682      	mov	sl, r0
 8007b22:	2101      	movs	r1, #1
 8007b24:	117b      	asrs	r3, r7, #5
 8007b26:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b2a:	f007 071f 	and.w	r7, r7, #31
 8007b2e:	fa01 f707 	lsl.w	r7, r1, r7
 8007b32:	421f      	tst	r7, r3
 8007b34:	f04f 0702 	mov.w	r7, #2
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	bf18      	it	ne
 8007b3e:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b42:	1b76      	subs	r6, r6, r5
 8007b44:	f7ff fdf4 	bl	8007730 <rshift>
 8007b48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b4c:	f1ba 0f00 	cmp.w	sl, #0
 8007b50:	d048      	beq.n	8007be4 <__gethex+0x3e4>
 8007b52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d015      	beq.n	8007b86 <__gethex+0x386>
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d017      	beq.n	8007b8e <__gethex+0x38e>
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d109      	bne.n	8007b76 <__gethex+0x376>
 8007b62:	f01a 0f02 	tst.w	sl, #2
 8007b66:	d006      	beq.n	8007b76 <__gethex+0x376>
 8007b68:	f8d9 0000 	ldr.w	r0, [r9]
 8007b6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b70:	f01a 0f01 	tst.w	sl, #1
 8007b74:	d10e      	bne.n	8007b94 <__gethex+0x394>
 8007b76:	f047 0710 	orr.w	r7, r7, #16
 8007b7a:	e033      	b.n	8007be4 <__gethex+0x3e4>
 8007b7c:	f04f 0a01 	mov.w	sl, #1
 8007b80:	e7cf      	b.n	8007b22 <__gethex+0x322>
 8007b82:	2701      	movs	r7, #1
 8007b84:	e7e2      	b.n	8007b4c <__gethex+0x34c>
 8007b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b88:	f1c3 0301 	rsb	r3, r3, #1
 8007b8c:	9315      	str	r3, [sp, #84]	; 0x54
 8007b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0f0      	beq.n	8007b76 <__gethex+0x376>
 8007b94:	f04f 0c00 	mov.w	ip, #0
 8007b98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b9c:	f104 0314 	add.w	r3, r4, #20
 8007ba0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ba4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bae:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007bb2:	d01c      	beq.n	8007bee <__gethex+0x3ee>
 8007bb4:	3201      	adds	r2, #1
 8007bb6:	6002      	str	r2, [r0, #0]
 8007bb8:	2f02      	cmp	r7, #2
 8007bba:	f104 0314 	add.w	r3, r4, #20
 8007bbe:	d13d      	bne.n	8007c3c <__gethex+0x43c>
 8007bc0:	f8d8 2000 	ldr.w	r2, [r8]
 8007bc4:	3a01      	subs	r2, #1
 8007bc6:	42b2      	cmp	r2, r6
 8007bc8:	d10a      	bne.n	8007be0 <__gethex+0x3e0>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	1171      	asrs	r1, r6, #5
 8007bce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bd2:	f006 061f 	and.w	r6, r6, #31
 8007bd6:	fa02 f606 	lsl.w	r6, r2, r6
 8007bda:	421e      	tst	r6, r3
 8007bdc:	bf18      	it	ne
 8007bde:	4617      	movne	r7, r2
 8007be0:	f047 0720 	orr.w	r7, r7, #32
 8007be4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007be6:	601c      	str	r4, [r3, #0]
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	601d      	str	r5, [r3, #0]
 8007bec:	e69a      	b.n	8007924 <__gethex+0x124>
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bf4:	d8d8      	bhi.n	8007ba8 <__gethex+0x3a8>
 8007bf6:	68a3      	ldr	r3, [r4, #8]
 8007bf8:	459b      	cmp	fp, r3
 8007bfa:	db17      	blt.n	8007c2c <__gethex+0x42c>
 8007bfc:	6861      	ldr	r1, [r4, #4]
 8007bfe:	9802      	ldr	r0, [sp, #8]
 8007c00:	3101      	adds	r1, #1
 8007c02:	f000 f927 	bl	8007e54 <_Balloc>
 8007c06:	4681      	mov	r9, r0
 8007c08:	b918      	cbnz	r0, 8007c12 <__gethex+0x412>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	2184      	movs	r1, #132	; 0x84
 8007c0e:	4b19      	ldr	r3, [pc, #100]	; (8007c74 <__gethex+0x474>)
 8007c10:	e6ab      	b.n	800796a <__gethex+0x16a>
 8007c12:	6922      	ldr	r2, [r4, #16]
 8007c14:	f104 010c 	add.w	r1, r4, #12
 8007c18:	3202      	adds	r2, #2
 8007c1a:	0092      	lsls	r2, r2, #2
 8007c1c:	300c      	adds	r0, #12
 8007c1e:	f000 f8ff 	bl	8007e20 <memcpy>
 8007c22:	4621      	mov	r1, r4
 8007c24:	9802      	ldr	r0, [sp, #8]
 8007c26:	f000 f955 	bl	8007ed4 <_Bfree>
 8007c2a:	464c      	mov	r4, r9
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	6122      	str	r2, [r4, #16]
 8007c32:	2201      	movs	r2, #1
 8007c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c38:	615a      	str	r2, [r3, #20]
 8007c3a:	e7bd      	b.n	8007bb8 <__gethex+0x3b8>
 8007c3c:	6922      	ldr	r2, [r4, #16]
 8007c3e:	455a      	cmp	r2, fp
 8007c40:	dd0b      	ble.n	8007c5a <__gethex+0x45a>
 8007c42:	2101      	movs	r1, #1
 8007c44:	4620      	mov	r0, r4
 8007c46:	f7ff fd73 	bl	8007730 <rshift>
 8007c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c4e:	3501      	adds	r5, #1
 8007c50:	42ab      	cmp	r3, r5
 8007c52:	f6ff aed4 	blt.w	80079fe <__gethex+0x1fe>
 8007c56:	2701      	movs	r7, #1
 8007c58:	e7c2      	b.n	8007be0 <__gethex+0x3e0>
 8007c5a:	f016 061f 	ands.w	r6, r6, #31
 8007c5e:	d0fa      	beq.n	8007c56 <__gethex+0x456>
 8007c60:	4453      	add	r3, sl
 8007c62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c66:	f000 f9e7 	bl	8008038 <__hi0bits>
 8007c6a:	f1c6 0620 	rsb	r6, r6, #32
 8007c6e:	42b0      	cmp	r0, r6
 8007c70:	dbe7      	blt.n	8007c42 <__gethex+0x442>
 8007c72:	e7f0      	b.n	8007c56 <__gethex+0x456>
 8007c74:	08009d21 	.word	0x08009d21

08007c78 <L_shift>:
 8007c78:	f1c2 0208 	rsb	r2, r2, #8
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	b570      	push	{r4, r5, r6, lr}
 8007c80:	f1c2 0620 	rsb	r6, r2, #32
 8007c84:	6843      	ldr	r3, [r0, #4]
 8007c86:	6804      	ldr	r4, [r0, #0]
 8007c88:	fa03 f506 	lsl.w	r5, r3, r6
 8007c8c:	432c      	orrs	r4, r5
 8007c8e:	40d3      	lsrs	r3, r2
 8007c90:	6004      	str	r4, [r0, #0]
 8007c92:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c96:	4288      	cmp	r0, r1
 8007c98:	d3f4      	bcc.n	8007c84 <L_shift+0xc>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}

08007c9c <__match>:
 8007c9c:	b530      	push	{r4, r5, lr}
 8007c9e:	6803      	ldr	r3, [r0, #0]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca6:	b914      	cbnz	r4, 8007cae <__match+0x12>
 8007ca8:	6003      	str	r3, [r0, #0]
 8007caa:	2001      	movs	r0, #1
 8007cac:	bd30      	pop	{r4, r5, pc}
 8007cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007cb6:	2d19      	cmp	r5, #25
 8007cb8:	bf98      	it	ls
 8007cba:	3220      	addls	r2, #32
 8007cbc:	42a2      	cmp	r2, r4
 8007cbe:	d0f0      	beq.n	8007ca2 <__match+0x6>
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e7f3      	b.n	8007cac <__match+0x10>

08007cc4 <__hexnan>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	2500      	movs	r5, #0
 8007cca:	680b      	ldr	r3, [r1, #0]
 8007ccc:	4682      	mov	sl, r0
 8007cce:	115e      	asrs	r6, r3, #5
 8007cd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cd4:	f013 031f 	ands.w	r3, r3, #31
 8007cd8:	bf18      	it	ne
 8007cda:	3604      	addne	r6, #4
 8007cdc:	1f37      	subs	r7, r6, #4
 8007cde:	46b9      	mov	r9, r7
 8007ce0:	463c      	mov	r4, r7
 8007ce2:	46ab      	mov	fp, r5
 8007ce4:	b087      	sub	sp, #28
 8007ce6:	4690      	mov	r8, r2
 8007ce8:	6802      	ldr	r2, [r0, #0]
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cf0:	9502      	str	r5, [sp, #8]
 8007cf2:	7851      	ldrb	r1, [r2, #1]
 8007cf4:	1c53      	adds	r3, r2, #1
 8007cf6:	9303      	str	r3, [sp, #12]
 8007cf8:	b341      	cbz	r1, 8007d4c <__hexnan+0x88>
 8007cfa:	4608      	mov	r0, r1
 8007cfc:	9205      	str	r2, [sp, #20]
 8007cfe:	9104      	str	r1, [sp, #16]
 8007d00:	f7ff fd69 	bl	80077d6 <__hexdig_fun>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d14f      	bne.n	8007da8 <__hexnan+0xe4>
 8007d08:	9904      	ldr	r1, [sp, #16]
 8007d0a:	9a05      	ldr	r2, [sp, #20]
 8007d0c:	2920      	cmp	r1, #32
 8007d0e:	d818      	bhi.n	8007d42 <__hexnan+0x7e>
 8007d10:	9b02      	ldr	r3, [sp, #8]
 8007d12:	459b      	cmp	fp, r3
 8007d14:	dd13      	ble.n	8007d3e <__hexnan+0x7a>
 8007d16:	454c      	cmp	r4, r9
 8007d18:	d206      	bcs.n	8007d28 <__hexnan+0x64>
 8007d1a:	2d07      	cmp	r5, #7
 8007d1c:	dc04      	bgt.n	8007d28 <__hexnan+0x64>
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4649      	mov	r1, r9
 8007d22:	4620      	mov	r0, r4
 8007d24:	f7ff ffa8 	bl	8007c78 <L_shift>
 8007d28:	4544      	cmp	r4, r8
 8007d2a:	d950      	bls.n	8007dce <__hexnan+0x10a>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f1a4 0904 	sub.w	r9, r4, #4
 8007d32:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d36:	461d      	mov	r5, r3
 8007d38:	464c      	mov	r4, r9
 8007d3a:	f8cd b008 	str.w	fp, [sp, #8]
 8007d3e:	9a03      	ldr	r2, [sp, #12]
 8007d40:	e7d7      	b.n	8007cf2 <__hexnan+0x2e>
 8007d42:	2929      	cmp	r1, #41	; 0x29
 8007d44:	d156      	bne.n	8007df4 <__hexnan+0x130>
 8007d46:	3202      	adds	r2, #2
 8007d48:	f8ca 2000 	str.w	r2, [sl]
 8007d4c:	f1bb 0f00 	cmp.w	fp, #0
 8007d50:	d050      	beq.n	8007df4 <__hexnan+0x130>
 8007d52:	454c      	cmp	r4, r9
 8007d54:	d206      	bcs.n	8007d64 <__hexnan+0xa0>
 8007d56:	2d07      	cmp	r5, #7
 8007d58:	dc04      	bgt.n	8007d64 <__hexnan+0xa0>
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff ff8a 	bl	8007c78 <L_shift>
 8007d64:	4544      	cmp	r4, r8
 8007d66:	d934      	bls.n	8007dd2 <__hexnan+0x10e>
 8007d68:	4623      	mov	r3, r4
 8007d6a:	f1a8 0204 	sub.w	r2, r8, #4
 8007d6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d72:	429f      	cmp	r7, r3
 8007d74:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d78:	d2f9      	bcs.n	8007d6e <__hexnan+0xaa>
 8007d7a:	1b3b      	subs	r3, r7, r4
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	3304      	adds	r3, #4
 8007d82:	3401      	adds	r4, #1
 8007d84:	3e03      	subs	r6, #3
 8007d86:	42b4      	cmp	r4, r6
 8007d88:	bf88      	it	hi
 8007d8a:	2304      	movhi	r3, #4
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4443      	add	r3, r8
 8007d90:	f843 2b04 	str.w	r2, [r3], #4
 8007d94:	429f      	cmp	r7, r3
 8007d96:	d2fb      	bcs.n	8007d90 <__hexnan+0xcc>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	b91b      	cbnz	r3, 8007da4 <__hexnan+0xe0>
 8007d9c:	4547      	cmp	r7, r8
 8007d9e:	d127      	bne.n	8007df0 <__hexnan+0x12c>
 8007da0:	2301      	movs	r3, #1
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	2005      	movs	r0, #5
 8007da6:	e026      	b.n	8007df6 <__hexnan+0x132>
 8007da8:	3501      	adds	r5, #1
 8007daa:	2d08      	cmp	r5, #8
 8007dac:	f10b 0b01 	add.w	fp, fp, #1
 8007db0:	dd06      	ble.n	8007dc0 <__hexnan+0xfc>
 8007db2:	4544      	cmp	r4, r8
 8007db4:	d9c3      	bls.n	8007d3e <__hexnan+0x7a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	2501      	movs	r5, #1
 8007dba:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dbe:	3c04      	subs	r4, #4
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	f000 000f 	and.w	r0, r0, #15
 8007dc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007dca:	6022      	str	r2, [r4, #0]
 8007dcc:	e7b7      	b.n	8007d3e <__hexnan+0x7a>
 8007dce:	2508      	movs	r5, #8
 8007dd0:	e7b5      	b.n	8007d3e <__hexnan+0x7a>
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0df      	beq.n	8007d98 <__hexnan+0xd4>
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	f1c3 0320 	rsb	r3, r3, #32
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
 8007de4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007de8:	401a      	ands	r2, r3
 8007dea:	f846 2c04 	str.w	r2, [r6, #-4]
 8007dee:	e7d3      	b.n	8007d98 <__hexnan+0xd4>
 8007df0:	3f04      	subs	r7, #4
 8007df2:	e7d1      	b.n	8007d98 <__hexnan+0xd4>
 8007df4:	2004      	movs	r0, #4
 8007df6:	b007      	add	sp, #28
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dfc <__ascii_mbtowc>:
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	b901      	cbnz	r1, 8007e02 <__ascii_mbtowc+0x6>
 8007e00:	a901      	add	r1, sp, #4
 8007e02:	b142      	cbz	r2, 8007e16 <__ascii_mbtowc+0x1a>
 8007e04:	b14b      	cbz	r3, 8007e1a <__ascii_mbtowc+0x1e>
 8007e06:	7813      	ldrb	r3, [r2, #0]
 8007e08:	600b      	str	r3, [r1, #0]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	1e10      	subs	r0, r2, #0
 8007e0e:	bf18      	it	ne
 8007e10:	2001      	movne	r0, #1
 8007e12:	b002      	add	sp, #8
 8007e14:	4770      	bx	lr
 8007e16:	4610      	mov	r0, r2
 8007e18:	e7fb      	b.n	8007e12 <__ascii_mbtowc+0x16>
 8007e1a:	f06f 0001 	mvn.w	r0, #1
 8007e1e:	e7f8      	b.n	8007e12 <__ascii_mbtowc+0x16>

08007e20 <memcpy>:
 8007e20:	440a      	add	r2, r1
 8007e22:	4291      	cmp	r1, r2
 8007e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e28:	d100      	bne.n	8007e2c <memcpy+0xc>
 8007e2a:	4770      	bx	lr
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e32:	4291      	cmp	r1, r2
 8007e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e38:	d1f9      	bne.n	8007e2e <memcpy+0xe>
 8007e3a:	bd10      	pop	{r4, pc}

08007e3c <__malloc_lock>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__malloc_lock+0x8>)
 8007e3e:	f001 bbc7 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 8007e42:	bf00      	nop
 8007e44:	20000530 	.word	0x20000530

08007e48 <__malloc_unlock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__malloc_unlock+0x8>)
 8007e4a:	f001 bbc2 	b.w	80095d2 <__retarget_lock_release_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20000530 	.word	0x20000530

08007e54 <_Balloc>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	b976      	cbnz	r6, 8007e7c <_Balloc+0x28>
 8007e5e:	2010      	movs	r0, #16
 8007e60:	f7fe fbd2 	bl	8006608 <malloc>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6260      	str	r0, [r4, #36]	; 0x24
 8007e68:	b920      	cbnz	r0, 8007e74 <_Balloc+0x20>
 8007e6a:	2166      	movs	r1, #102	; 0x66
 8007e6c:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <_Balloc+0x78>)
 8007e6e:	4818      	ldr	r0, [pc, #96]	; (8007ed0 <_Balloc+0x7c>)
 8007e70:	f7ff fc2e 	bl	80076d0 <__assert_func>
 8007e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e78:	6006      	str	r6, [r0, #0]
 8007e7a:	60c6      	str	r6, [r0, #12]
 8007e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e7e:	68f3      	ldr	r3, [r6, #12]
 8007e80:	b183      	cbz	r3, 8007ea4 <_Balloc+0x50>
 8007e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e8a:	b9b8      	cbnz	r0, 8007ebc <_Balloc+0x68>
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e92:	1d72      	adds	r2, r6, #5
 8007e94:	4620      	mov	r0, r4
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	f000 fc94 	bl	80087c4 <_calloc_r>
 8007e9c:	b160      	cbz	r0, 8007eb8 <_Balloc+0x64>
 8007e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ea2:	e00e      	b.n	8007ec2 <_Balloc+0x6e>
 8007ea4:	2221      	movs	r2, #33	; 0x21
 8007ea6:	2104      	movs	r1, #4
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fc8b 	bl	80087c4 <_calloc_r>
 8007eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eb0:	60f0      	str	r0, [r6, #12]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <_Balloc+0x2e>
 8007eb8:	2000      	movs	r0, #0
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	6802      	ldr	r2, [r0, #0]
 8007ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ec8:	e7f7      	b.n	8007eba <_Balloc+0x66>
 8007eca:	bf00      	nop
 8007ecc:	08009b70 	.word	0x08009b70
 8007ed0:	08009dac 	.word	0x08009dac

08007ed4 <_Bfree>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ed8:	4605      	mov	r5, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b976      	cbnz	r6, 8007efc <_Bfree+0x28>
 8007ede:	2010      	movs	r0, #16
 8007ee0:	f7fe fb92 	bl	8006608 <malloc>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ee8:	b920      	cbnz	r0, 8007ef4 <_Bfree+0x20>
 8007eea:	218a      	movs	r1, #138	; 0x8a
 8007eec:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <_Bfree+0x3c>)
 8007eee:	4809      	ldr	r0, [pc, #36]	; (8007f14 <_Bfree+0x40>)
 8007ef0:	f7ff fbee 	bl	80076d0 <__assert_func>
 8007ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef8:	6006      	str	r6, [r0, #0]
 8007efa:	60c6      	str	r6, [r0, #12]
 8007efc:	b13c      	cbz	r4, 8007f0e <_Bfree+0x3a>
 8007efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f00:	6862      	ldr	r2, [r4, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f08:	6021      	str	r1, [r4, #0]
 8007f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	08009b70 	.word	0x08009b70
 8007f14:	08009dac 	.word	0x08009dac

08007f18 <__multadd>:
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	461e      	mov	r6, r3
 8007f22:	2000      	movs	r0, #0
 8007f24:	690d      	ldr	r5, [r1, #16]
 8007f26:	f101 0c14 	add.w	ip, r1, #20
 8007f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f2e:	3001      	adds	r0, #1
 8007f30:	b299      	uxth	r1, r3
 8007f32:	fb02 6101 	mla	r1, r2, r1, r6
 8007f36:	0c1e      	lsrs	r6, r3, #16
 8007f38:	0c0b      	lsrs	r3, r1, #16
 8007f3a:	fb02 3306 	mla	r3, r2, r6, r3
 8007f3e:	b289      	uxth	r1, r1
 8007f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f44:	4285      	cmp	r5, r0
 8007f46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f4e:	dcec      	bgt.n	8007f2a <__multadd+0x12>
 8007f50:	b30e      	cbz	r6, 8007f96 <__multadd+0x7e>
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dc19      	bgt.n	8007f8c <__multadd+0x74>
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	3101      	adds	r1, #1
 8007f5e:	f7ff ff79 	bl	8007e54 <_Balloc>
 8007f62:	4680      	mov	r8, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <__multadd+0x5a>
 8007f66:	4602      	mov	r2, r0
 8007f68:	21b5      	movs	r1, #181	; 0xb5
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <__multadd+0x84>)
 8007f6c:	480c      	ldr	r0, [pc, #48]	; (8007fa0 <__multadd+0x88>)
 8007f6e:	f7ff fbaf 	bl	80076d0 <__assert_func>
 8007f72:	6922      	ldr	r2, [r4, #16]
 8007f74:	f104 010c 	add.w	r1, r4, #12
 8007f78:	3202      	adds	r2, #2
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	300c      	adds	r0, #12
 8007f7e:	f7ff ff4f 	bl	8007e20 <memcpy>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7ff ffa5 	bl	8007ed4 <_Bfree>
 8007f8a:	4644      	mov	r4, r8
 8007f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f90:	3501      	adds	r5, #1
 8007f92:	615e      	str	r6, [r3, #20]
 8007f94:	6125      	str	r5, [r4, #16]
 8007f96:	4620      	mov	r0, r4
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9c:	08009d21 	.word	0x08009d21
 8007fa0:	08009dac 	.word	0x08009dac

08007fa4 <__s2b>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4615      	mov	r5, r2
 8007faa:	2209      	movs	r2, #9
 8007fac:	461f      	mov	r7, r3
 8007fae:	3308      	adds	r3, #8
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	2201      	movs	r2, #1
 8007fba:	2100      	movs	r1, #0
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	db09      	blt.n	8007fd4 <__s2b+0x30>
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff ff47 	bl	8007e54 <_Balloc>
 8007fc6:	b940      	cbnz	r0, 8007fda <__s2b+0x36>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	21ce      	movs	r1, #206	; 0xce
 8007fcc:	4b18      	ldr	r3, [pc, #96]	; (8008030 <__s2b+0x8c>)
 8007fce:	4819      	ldr	r0, [pc, #100]	; (8008034 <__s2b+0x90>)
 8007fd0:	f7ff fb7e 	bl	80076d0 <__assert_func>
 8007fd4:	0052      	lsls	r2, r2, #1
 8007fd6:	3101      	adds	r1, #1
 8007fd8:	e7f0      	b.n	8007fbc <__s2b+0x18>
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	2d09      	cmp	r5, #9
 8007fde:	6143      	str	r3, [r0, #20]
 8007fe0:	f04f 0301 	mov.w	r3, #1
 8007fe4:	6103      	str	r3, [r0, #16]
 8007fe6:	dd16      	ble.n	8008016 <__s2b+0x72>
 8007fe8:	f104 0909 	add.w	r9, r4, #9
 8007fec:	46c8      	mov	r8, r9
 8007fee:	442c      	add	r4, r5
 8007ff0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ff4:	4601      	mov	r1, r0
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	3b30      	subs	r3, #48	; 0x30
 8007ffc:	f7ff ff8c 	bl	8007f18 <__multadd>
 8008000:	45a0      	cmp	r8, r4
 8008002:	d1f5      	bne.n	8007ff0 <__s2b+0x4c>
 8008004:	f1a5 0408 	sub.w	r4, r5, #8
 8008008:	444c      	add	r4, r9
 800800a:	1b2d      	subs	r5, r5, r4
 800800c:	1963      	adds	r3, r4, r5
 800800e:	42bb      	cmp	r3, r7
 8008010:	db04      	blt.n	800801c <__s2b+0x78>
 8008012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008016:	2509      	movs	r5, #9
 8008018:	340a      	adds	r4, #10
 800801a:	e7f6      	b.n	800800a <__s2b+0x66>
 800801c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008020:	4601      	mov	r1, r0
 8008022:	220a      	movs	r2, #10
 8008024:	4630      	mov	r0, r6
 8008026:	3b30      	subs	r3, #48	; 0x30
 8008028:	f7ff ff76 	bl	8007f18 <__multadd>
 800802c:	e7ee      	b.n	800800c <__s2b+0x68>
 800802e:	bf00      	nop
 8008030:	08009d21 	.word	0x08009d21
 8008034:	08009dac 	.word	0x08009dac

08008038 <__hi0bits>:
 8008038:	0c02      	lsrs	r2, r0, #16
 800803a:	0412      	lsls	r2, r2, #16
 800803c:	4603      	mov	r3, r0
 800803e:	b9ca      	cbnz	r2, 8008074 <__hi0bits+0x3c>
 8008040:	0403      	lsls	r3, r0, #16
 8008042:	2010      	movs	r0, #16
 8008044:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008048:	bf04      	itt	eq
 800804a:	021b      	lsleq	r3, r3, #8
 800804c:	3008      	addeq	r0, #8
 800804e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008052:	bf04      	itt	eq
 8008054:	011b      	lsleq	r3, r3, #4
 8008056:	3004      	addeq	r0, #4
 8008058:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800805c:	bf04      	itt	eq
 800805e:	009b      	lsleq	r3, r3, #2
 8008060:	3002      	addeq	r0, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	db05      	blt.n	8008072 <__hi0bits+0x3a>
 8008066:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800806a:	f100 0001 	add.w	r0, r0, #1
 800806e:	bf08      	it	eq
 8008070:	2020      	moveq	r0, #32
 8008072:	4770      	bx	lr
 8008074:	2000      	movs	r0, #0
 8008076:	e7e5      	b.n	8008044 <__hi0bits+0xc>

08008078 <__lo0bits>:
 8008078:	6803      	ldr	r3, [r0, #0]
 800807a:	4602      	mov	r2, r0
 800807c:	f013 0007 	ands.w	r0, r3, #7
 8008080:	d00b      	beq.n	800809a <__lo0bits+0x22>
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	d421      	bmi.n	80080ca <__lo0bits+0x52>
 8008086:	0798      	lsls	r0, r3, #30
 8008088:	bf49      	itett	mi
 800808a:	085b      	lsrmi	r3, r3, #1
 800808c:	089b      	lsrpl	r3, r3, #2
 800808e:	2001      	movmi	r0, #1
 8008090:	6013      	strmi	r3, [r2, #0]
 8008092:	bf5c      	itt	pl
 8008094:	2002      	movpl	r0, #2
 8008096:	6013      	strpl	r3, [r2, #0]
 8008098:	4770      	bx	lr
 800809a:	b299      	uxth	r1, r3
 800809c:	b909      	cbnz	r1, 80080a2 <__lo0bits+0x2a>
 800809e:	2010      	movs	r0, #16
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	b2d9      	uxtb	r1, r3
 80080a4:	b909      	cbnz	r1, 80080aa <__lo0bits+0x32>
 80080a6:	3008      	adds	r0, #8
 80080a8:	0a1b      	lsrs	r3, r3, #8
 80080aa:	0719      	lsls	r1, r3, #28
 80080ac:	bf04      	itt	eq
 80080ae:	091b      	lsreq	r3, r3, #4
 80080b0:	3004      	addeq	r0, #4
 80080b2:	0799      	lsls	r1, r3, #30
 80080b4:	bf04      	itt	eq
 80080b6:	089b      	lsreq	r3, r3, #2
 80080b8:	3002      	addeq	r0, #2
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d403      	bmi.n	80080c6 <__lo0bits+0x4e>
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	f100 0001 	add.w	r0, r0, #1
 80080c4:	d003      	beq.n	80080ce <__lo0bits+0x56>
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	4770      	bx	lr
 80080ca:	2000      	movs	r0, #0
 80080cc:	4770      	bx	lr
 80080ce:	2020      	movs	r0, #32
 80080d0:	4770      	bx	lr
	...

080080d4 <__i2b>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	460c      	mov	r4, r1
 80080d8:	2101      	movs	r1, #1
 80080da:	f7ff febb 	bl	8007e54 <_Balloc>
 80080de:	4602      	mov	r2, r0
 80080e0:	b928      	cbnz	r0, 80080ee <__i2b+0x1a>
 80080e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080e6:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <__i2b+0x24>)
 80080e8:	4804      	ldr	r0, [pc, #16]	; (80080fc <__i2b+0x28>)
 80080ea:	f7ff faf1 	bl	80076d0 <__assert_func>
 80080ee:	2301      	movs	r3, #1
 80080f0:	6144      	str	r4, [r0, #20]
 80080f2:	6103      	str	r3, [r0, #16]
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	bf00      	nop
 80080f8:	08009d21 	.word	0x08009d21
 80080fc:	08009dac 	.word	0x08009dac

08008100 <__multiply>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	4691      	mov	r9, r2
 8008106:	690a      	ldr	r2, [r1, #16]
 8008108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800810c:	460c      	mov	r4, r1
 800810e:	429a      	cmp	r2, r3
 8008110:	bfbe      	ittt	lt
 8008112:	460b      	movlt	r3, r1
 8008114:	464c      	movlt	r4, r9
 8008116:	4699      	movlt	r9, r3
 8008118:	6927      	ldr	r7, [r4, #16]
 800811a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	6861      	ldr	r1, [r4, #4]
 8008122:	eb07 060a 	add.w	r6, r7, sl
 8008126:	42b3      	cmp	r3, r6
 8008128:	b085      	sub	sp, #20
 800812a:	bfb8      	it	lt
 800812c:	3101      	addlt	r1, #1
 800812e:	f7ff fe91 	bl	8007e54 <_Balloc>
 8008132:	b930      	cbnz	r0, 8008142 <__multiply+0x42>
 8008134:	4602      	mov	r2, r0
 8008136:	f240 115d 	movw	r1, #349	; 0x15d
 800813a:	4b43      	ldr	r3, [pc, #268]	; (8008248 <__multiply+0x148>)
 800813c:	4843      	ldr	r0, [pc, #268]	; (800824c <__multiply+0x14c>)
 800813e:	f7ff fac7 	bl	80076d0 <__assert_func>
 8008142:	f100 0514 	add.w	r5, r0, #20
 8008146:	462b      	mov	r3, r5
 8008148:	2200      	movs	r2, #0
 800814a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800814e:	4543      	cmp	r3, r8
 8008150:	d321      	bcc.n	8008196 <__multiply+0x96>
 8008152:	f104 0314 	add.w	r3, r4, #20
 8008156:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800815a:	f109 0314 	add.w	r3, r9, #20
 800815e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008162:	9202      	str	r2, [sp, #8]
 8008164:	1b3a      	subs	r2, r7, r4
 8008166:	3a15      	subs	r2, #21
 8008168:	f022 0203 	bic.w	r2, r2, #3
 800816c:	3204      	adds	r2, #4
 800816e:	f104 0115 	add.w	r1, r4, #21
 8008172:	428f      	cmp	r7, r1
 8008174:	bf38      	it	cc
 8008176:	2204      	movcc	r2, #4
 8008178:	9201      	str	r2, [sp, #4]
 800817a:	9a02      	ldr	r2, [sp, #8]
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	429a      	cmp	r2, r3
 8008180:	d80c      	bhi.n	800819c <__multiply+0x9c>
 8008182:	2e00      	cmp	r6, #0
 8008184:	dd03      	ble.n	800818e <__multiply+0x8e>
 8008186:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800818a:	2b00      	cmp	r3, #0
 800818c:	d059      	beq.n	8008242 <__multiply+0x142>
 800818e:	6106      	str	r6, [r0, #16]
 8008190:	b005      	add	sp, #20
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	f843 2b04 	str.w	r2, [r3], #4
 800819a:	e7d8      	b.n	800814e <__multiply+0x4e>
 800819c:	f8b3 a000 	ldrh.w	sl, [r3]
 80081a0:	f1ba 0f00 	cmp.w	sl, #0
 80081a4:	d023      	beq.n	80081ee <__multiply+0xee>
 80081a6:	46a9      	mov	r9, r5
 80081a8:	f04f 0c00 	mov.w	ip, #0
 80081ac:	f104 0e14 	add.w	lr, r4, #20
 80081b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081b4:	f8d9 1000 	ldr.w	r1, [r9]
 80081b8:	fa1f fb82 	uxth.w	fp, r2
 80081bc:	b289      	uxth	r1, r1
 80081be:	fb0a 110b 	mla	r1, sl, fp, r1
 80081c2:	4461      	add	r1, ip
 80081c4:	f8d9 c000 	ldr.w	ip, [r9]
 80081c8:	0c12      	lsrs	r2, r2, #16
 80081ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081ce:	fb0a c202 	mla	r2, sl, r2, ip
 80081d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081d6:	b289      	uxth	r1, r1
 80081d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081dc:	4577      	cmp	r7, lr
 80081de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081e2:	f849 1b04 	str.w	r1, [r9], #4
 80081e6:	d8e3      	bhi.n	80081b0 <__multiply+0xb0>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	f845 c002 	str.w	ip, [r5, r2]
 80081ee:	9a03      	ldr	r2, [sp, #12]
 80081f0:	3304      	adds	r3, #4
 80081f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081f6:	f1b9 0f00 	cmp.w	r9, #0
 80081fa:	d020      	beq.n	800823e <__multiply+0x13e>
 80081fc:	46ae      	mov	lr, r5
 80081fe:	f04f 0a00 	mov.w	sl, #0
 8008202:	6829      	ldr	r1, [r5, #0]
 8008204:	f104 0c14 	add.w	ip, r4, #20
 8008208:	f8bc b000 	ldrh.w	fp, [ip]
 800820c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008210:	b289      	uxth	r1, r1
 8008212:	fb09 220b 	mla	r2, r9, fp, r2
 8008216:	4492      	add	sl, r2
 8008218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800821c:	f84e 1b04 	str.w	r1, [lr], #4
 8008220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008224:	f8be 1000 	ldrh.w	r1, [lr]
 8008228:	0c12      	lsrs	r2, r2, #16
 800822a:	fb09 1102 	mla	r1, r9, r2, r1
 800822e:	4567      	cmp	r7, ip
 8008230:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008238:	d8e6      	bhi.n	8008208 <__multiply+0x108>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	50a9      	str	r1, [r5, r2]
 800823e:	3504      	adds	r5, #4
 8008240:	e79b      	b.n	800817a <__multiply+0x7a>
 8008242:	3e01      	subs	r6, #1
 8008244:	e79d      	b.n	8008182 <__multiply+0x82>
 8008246:	bf00      	nop
 8008248:	08009d21 	.word	0x08009d21
 800824c:	08009dac 	.word	0x08009dac

08008250 <__pow5mult>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4615      	mov	r5, r2
 8008256:	f012 0203 	ands.w	r2, r2, #3
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	d007      	beq.n	8008270 <__pow5mult+0x20>
 8008260:	4c25      	ldr	r4, [pc, #148]	; (80082f8 <__pow5mult+0xa8>)
 8008262:	3a01      	subs	r2, #1
 8008264:	2300      	movs	r3, #0
 8008266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800826a:	f7ff fe55 	bl	8007f18 <__multadd>
 800826e:	4607      	mov	r7, r0
 8008270:	10ad      	asrs	r5, r5, #2
 8008272:	d03d      	beq.n	80082f0 <__pow5mult+0xa0>
 8008274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008276:	b97c      	cbnz	r4, 8008298 <__pow5mult+0x48>
 8008278:	2010      	movs	r0, #16
 800827a:	f7fe f9c5 	bl	8006608 <malloc>
 800827e:	4602      	mov	r2, r0
 8008280:	6270      	str	r0, [r6, #36]	; 0x24
 8008282:	b928      	cbnz	r0, 8008290 <__pow5mult+0x40>
 8008284:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008288:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <__pow5mult+0xac>)
 800828a:	481d      	ldr	r0, [pc, #116]	; (8008300 <__pow5mult+0xb0>)
 800828c:	f7ff fa20 	bl	80076d0 <__assert_func>
 8008290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008294:	6004      	str	r4, [r0, #0]
 8008296:	60c4      	str	r4, [r0, #12]
 8008298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800829c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082a0:	b94c      	cbnz	r4, 80082b6 <__pow5mult+0x66>
 80082a2:	f240 2171 	movw	r1, #625	; 0x271
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff14 	bl	80080d4 <__i2b>
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	f04f 0900 	mov.w	r9, #0
 80082ba:	07eb      	lsls	r3, r5, #31
 80082bc:	d50a      	bpl.n	80082d4 <__pow5mult+0x84>
 80082be:	4639      	mov	r1, r7
 80082c0:	4622      	mov	r2, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ff1c 	bl	8008100 <__multiply>
 80082c8:	4680      	mov	r8, r0
 80082ca:	4639      	mov	r1, r7
 80082cc:	4630      	mov	r0, r6
 80082ce:	f7ff fe01 	bl	8007ed4 <_Bfree>
 80082d2:	4647      	mov	r7, r8
 80082d4:	106d      	asrs	r5, r5, #1
 80082d6:	d00b      	beq.n	80082f0 <__pow5mult+0xa0>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	b938      	cbnz	r0, 80082ec <__pow5mult+0x9c>
 80082dc:	4622      	mov	r2, r4
 80082de:	4621      	mov	r1, r4
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff ff0d 	bl	8008100 <__multiply>
 80082e6:	6020      	str	r0, [r4, #0]
 80082e8:	f8c0 9000 	str.w	r9, [r0]
 80082ec:	4604      	mov	r4, r0
 80082ee:	e7e4      	b.n	80082ba <__pow5mult+0x6a>
 80082f0:	4638      	mov	r0, r7
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	bf00      	nop
 80082f8:	08009ef8 	.word	0x08009ef8
 80082fc:	08009b70 	.word	0x08009b70
 8008300:	08009dac 	.word	0x08009dac

08008304 <__lshift>:
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	460c      	mov	r4, r1
 800830a:	4607      	mov	r7, r0
 800830c:	4691      	mov	r9, r2
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	6849      	ldr	r1, [r1, #4]
 8008312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008316:	68a3      	ldr	r3, [r4, #8]
 8008318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800831c:	f108 0601 	add.w	r6, r8, #1
 8008320:	42b3      	cmp	r3, r6
 8008322:	db0b      	blt.n	800833c <__lshift+0x38>
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fd95 	bl	8007e54 <_Balloc>
 800832a:	4605      	mov	r5, r0
 800832c:	b948      	cbnz	r0, 8008342 <__lshift+0x3e>
 800832e:	4602      	mov	r2, r0
 8008330:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008334:	4b29      	ldr	r3, [pc, #164]	; (80083dc <__lshift+0xd8>)
 8008336:	482a      	ldr	r0, [pc, #168]	; (80083e0 <__lshift+0xdc>)
 8008338:	f7ff f9ca 	bl	80076d0 <__assert_func>
 800833c:	3101      	adds	r1, #1
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	e7ee      	b.n	8008320 <__lshift+0x1c>
 8008342:	2300      	movs	r3, #0
 8008344:	f100 0114 	add.w	r1, r0, #20
 8008348:	f100 0210 	add.w	r2, r0, #16
 800834c:	4618      	mov	r0, r3
 800834e:	4553      	cmp	r3, sl
 8008350:	db37      	blt.n	80083c2 <__lshift+0xbe>
 8008352:	6920      	ldr	r0, [r4, #16]
 8008354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008358:	f104 0314 	add.w	r3, r4, #20
 800835c:	f019 091f 	ands.w	r9, r9, #31
 8008360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008368:	d02f      	beq.n	80083ca <__lshift+0xc6>
 800836a:	468a      	mov	sl, r1
 800836c:	f04f 0c00 	mov.w	ip, #0
 8008370:	f1c9 0e20 	rsb	lr, r9, #32
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	fa02 f209 	lsl.w	r2, r2, r9
 800837a:	ea42 020c 	orr.w	r2, r2, ip
 800837e:	f84a 2b04 	str.w	r2, [sl], #4
 8008382:	f853 2b04 	ldr.w	r2, [r3], #4
 8008386:	4298      	cmp	r0, r3
 8008388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800838c:	d8f2      	bhi.n	8008374 <__lshift+0x70>
 800838e:	1b03      	subs	r3, r0, r4
 8008390:	3b15      	subs	r3, #21
 8008392:	f023 0303 	bic.w	r3, r3, #3
 8008396:	3304      	adds	r3, #4
 8008398:	f104 0215 	add.w	r2, r4, #21
 800839c:	4290      	cmp	r0, r2
 800839e:	bf38      	it	cc
 80083a0:	2304      	movcc	r3, #4
 80083a2:	f841 c003 	str.w	ip, [r1, r3]
 80083a6:	f1bc 0f00 	cmp.w	ip, #0
 80083aa:	d001      	beq.n	80083b0 <__lshift+0xac>
 80083ac:	f108 0602 	add.w	r6, r8, #2
 80083b0:	3e01      	subs	r6, #1
 80083b2:	4638      	mov	r0, r7
 80083b4:	4621      	mov	r1, r4
 80083b6:	612e      	str	r6, [r5, #16]
 80083b8:	f7ff fd8c 	bl	8007ed4 <_Bfree>
 80083bc:	4628      	mov	r0, r5
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083c6:	3301      	adds	r3, #1
 80083c8:	e7c1      	b.n	800834e <__lshift+0x4a>
 80083ca:	3904      	subs	r1, #4
 80083cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d0:	4298      	cmp	r0, r3
 80083d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80083d6:	d8f9      	bhi.n	80083cc <__lshift+0xc8>
 80083d8:	e7ea      	b.n	80083b0 <__lshift+0xac>
 80083da:	bf00      	nop
 80083dc:	08009d21 	.word	0x08009d21
 80083e0:	08009dac 	.word	0x08009dac

080083e4 <__mcmp>:
 80083e4:	4603      	mov	r3, r0
 80083e6:	690a      	ldr	r2, [r1, #16]
 80083e8:	6900      	ldr	r0, [r0, #16]
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	1a80      	subs	r0, r0, r2
 80083ee:	d10d      	bne.n	800840c <__mcmp+0x28>
 80083f0:	3314      	adds	r3, #20
 80083f2:	3114      	adds	r1, #20
 80083f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008404:	4295      	cmp	r5, r2
 8008406:	d002      	beq.n	800840e <__mcmp+0x2a>
 8008408:	d304      	bcc.n	8008414 <__mcmp+0x30>
 800840a:	2001      	movs	r0, #1
 800840c:	bd30      	pop	{r4, r5, pc}
 800840e:	42a3      	cmp	r3, r4
 8008410:	d3f4      	bcc.n	80083fc <__mcmp+0x18>
 8008412:	e7fb      	b.n	800840c <__mcmp+0x28>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	e7f8      	b.n	800840c <__mcmp+0x28>
	...

0800841c <__mdiff>:
 800841c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	460d      	mov	r5, r1
 8008422:	4607      	mov	r7, r0
 8008424:	4611      	mov	r1, r2
 8008426:	4628      	mov	r0, r5
 8008428:	4614      	mov	r4, r2
 800842a:	f7ff ffdb 	bl	80083e4 <__mcmp>
 800842e:	1e06      	subs	r6, r0, #0
 8008430:	d111      	bne.n	8008456 <__mdiff+0x3a>
 8008432:	4631      	mov	r1, r6
 8008434:	4638      	mov	r0, r7
 8008436:	f7ff fd0d 	bl	8007e54 <_Balloc>
 800843a:	4602      	mov	r2, r0
 800843c:	b928      	cbnz	r0, 800844a <__mdiff+0x2e>
 800843e:	f240 2132 	movw	r1, #562	; 0x232
 8008442:	4b3a      	ldr	r3, [pc, #232]	; (800852c <__mdiff+0x110>)
 8008444:	483a      	ldr	r0, [pc, #232]	; (8008530 <__mdiff+0x114>)
 8008446:	f7ff f943 	bl	80076d0 <__assert_func>
 800844a:	2301      	movs	r3, #1
 800844c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008450:	4610      	mov	r0, r2
 8008452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	bfa4      	itt	ge
 8008458:	4623      	movge	r3, r4
 800845a:	462c      	movge	r4, r5
 800845c:	4638      	mov	r0, r7
 800845e:	6861      	ldr	r1, [r4, #4]
 8008460:	bfa6      	itte	ge
 8008462:	461d      	movge	r5, r3
 8008464:	2600      	movge	r6, #0
 8008466:	2601      	movlt	r6, #1
 8008468:	f7ff fcf4 	bl	8007e54 <_Balloc>
 800846c:	4602      	mov	r2, r0
 800846e:	b918      	cbnz	r0, 8008478 <__mdiff+0x5c>
 8008470:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008474:	4b2d      	ldr	r3, [pc, #180]	; (800852c <__mdiff+0x110>)
 8008476:	e7e5      	b.n	8008444 <__mdiff+0x28>
 8008478:	f102 0814 	add.w	r8, r2, #20
 800847c:	46c2      	mov	sl, r8
 800847e:	f04f 0c00 	mov.w	ip, #0
 8008482:	6927      	ldr	r7, [r4, #16]
 8008484:	60c6      	str	r6, [r0, #12]
 8008486:	692e      	ldr	r6, [r5, #16]
 8008488:	f104 0014 	add.w	r0, r4, #20
 800848c:	f105 0914 	add.w	r9, r5, #20
 8008490:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008498:	3410      	adds	r4, #16
 800849a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800849e:	f859 3b04 	ldr.w	r3, [r9], #4
 80084a2:	fa1f f18b 	uxth.w	r1, fp
 80084a6:	448c      	add	ip, r1
 80084a8:	b299      	uxth	r1, r3
 80084aa:	0c1b      	lsrs	r3, r3, #16
 80084ac:	ebac 0101 	sub.w	r1, ip, r1
 80084b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084b8:	b289      	uxth	r1, r1
 80084ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084be:	454e      	cmp	r6, r9
 80084c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80084c4:	f84a 3b04 	str.w	r3, [sl], #4
 80084c8:	d8e7      	bhi.n	800849a <__mdiff+0x7e>
 80084ca:	1b73      	subs	r3, r6, r5
 80084cc:	3b15      	subs	r3, #21
 80084ce:	f023 0303 	bic.w	r3, r3, #3
 80084d2:	3515      	adds	r5, #21
 80084d4:	3304      	adds	r3, #4
 80084d6:	42ae      	cmp	r6, r5
 80084d8:	bf38      	it	cc
 80084da:	2304      	movcc	r3, #4
 80084dc:	4418      	add	r0, r3
 80084de:	4443      	add	r3, r8
 80084e0:	461e      	mov	r6, r3
 80084e2:	4605      	mov	r5, r0
 80084e4:	4575      	cmp	r5, lr
 80084e6:	d30e      	bcc.n	8008506 <__mdiff+0xea>
 80084e8:	f10e 0103 	add.w	r1, lr, #3
 80084ec:	1a09      	subs	r1, r1, r0
 80084ee:	f021 0103 	bic.w	r1, r1, #3
 80084f2:	3803      	subs	r0, #3
 80084f4:	4586      	cmp	lr, r0
 80084f6:	bf38      	it	cc
 80084f8:	2100      	movcc	r1, #0
 80084fa:	4419      	add	r1, r3
 80084fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008500:	b18b      	cbz	r3, 8008526 <__mdiff+0x10a>
 8008502:	6117      	str	r7, [r2, #16]
 8008504:	e7a4      	b.n	8008450 <__mdiff+0x34>
 8008506:	f855 8b04 	ldr.w	r8, [r5], #4
 800850a:	fa1f f188 	uxth.w	r1, r8
 800850e:	4461      	add	r1, ip
 8008510:	140c      	asrs	r4, r1, #16
 8008512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008516:	b289      	uxth	r1, r1
 8008518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800851c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008520:	f846 1b04 	str.w	r1, [r6], #4
 8008524:	e7de      	b.n	80084e4 <__mdiff+0xc8>
 8008526:	3f01      	subs	r7, #1
 8008528:	e7e8      	b.n	80084fc <__mdiff+0xe0>
 800852a:	bf00      	nop
 800852c:	08009d21 	.word	0x08009d21
 8008530:	08009dac 	.word	0x08009dac

08008534 <__ulp>:
 8008534:	4b11      	ldr	r3, [pc, #68]	; (800857c <__ulp+0x48>)
 8008536:	400b      	ands	r3, r1
 8008538:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800853c:	2b00      	cmp	r3, #0
 800853e:	dd02      	ble.n	8008546 <__ulp+0x12>
 8008540:	2000      	movs	r0, #0
 8008542:	4619      	mov	r1, r3
 8008544:	4770      	bx	lr
 8008546:	425b      	negs	r3, r3
 8008548:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800854c:	f04f 0000 	mov.w	r0, #0
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008558:	da04      	bge.n	8008564 <__ulp+0x30>
 800855a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800855e:	fa43 f102 	asr.w	r1, r3, r2
 8008562:	4770      	bx	lr
 8008564:	f1a2 0314 	sub.w	r3, r2, #20
 8008568:	2b1e      	cmp	r3, #30
 800856a:	bfd6      	itet	le
 800856c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008570:	2301      	movgt	r3, #1
 8008572:	fa22 f303 	lsrle.w	r3, r2, r3
 8008576:	4618      	mov	r0, r3
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	7ff00000 	.word	0x7ff00000

08008580 <__b2d>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	6907      	ldr	r7, [r0, #16]
 8008586:	f100 0914 	add.w	r9, r0, #20
 800858a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800858e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008592:	f1a7 0804 	sub.w	r8, r7, #4
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff fd4e 	bl	8008038 <__hi0bits>
 800859c:	f1c0 0320 	rsb	r3, r0, #32
 80085a0:	280a      	cmp	r0, #10
 80085a2:	600b      	str	r3, [r1, #0]
 80085a4:	491f      	ldr	r1, [pc, #124]	; (8008624 <__b2d+0xa4>)
 80085a6:	dc17      	bgt.n	80085d8 <__b2d+0x58>
 80085a8:	45c1      	cmp	r9, r8
 80085aa:	bf28      	it	cs
 80085ac:	2200      	movcs	r2, #0
 80085ae:	f1c0 0c0b 	rsb	ip, r0, #11
 80085b2:	fa26 f30c 	lsr.w	r3, r6, ip
 80085b6:	bf38      	it	cc
 80085b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80085bc:	ea43 0501 	orr.w	r5, r3, r1
 80085c0:	f100 0315 	add.w	r3, r0, #21
 80085c4:	fa06 f303 	lsl.w	r3, r6, r3
 80085c8:	fa22 f20c 	lsr.w	r2, r2, ip
 80085cc:	ea43 0402 	orr.w	r4, r3, r2
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d8:	45c1      	cmp	r9, r8
 80085da:	bf2e      	itee	cs
 80085dc:	2200      	movcs	r2, #0
 80085de:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80085e2:	f1a7 0808 	subcc.w	r8, r7, #8
 80085e6:	f1b0 030b 	subs.w	r3, r0, #11
 80085ea:	d016      	beq.n	800861a <__b2d+0x9a>
 80085ec:	f1c3 0720 	rsb	r7, r3, #32
 80085f0:	fa22 f107 	lsr.w	r1, r2, r7
 80085f4:	45c8      	cmp	r8, r9
 80085f6:	fa06 f603 	lsl.w	r6, r6, r3
 80085fa:	ea46 0601 	orr.w	r6, r6, r1
 80085fe:	bf94      	ite	ls
 8008600:	2100      	movls	r1, #0
 8008602:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008606:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800860a:	fa02 f003 	lsl.w	r0, r2, r3
 800860e:	40f9      	lsrs	r1, r7
 8008610:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008614:	ea40 0401 	orr.w	r4, r0, r1
 8008618:	e7da      	b.n	80085d0 <__b2d+0x50>
 800861a:	4614      	mov	r4, r2
 800861c:	ea46 0501 	orr.w	r5, r6, r1
 8008620:	e7d6      	b.n	80085d0 <__b2d+0x50>
 8008622:	bf00      	nop
 8008624:	3ff00000 	.word	0x3ff00000

08008628 <__d2b>:
 8008628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800862c:	2101      	movs	r1, #1
 800862e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008632:	4690      	mov	r8, r2
 8008634:	461d      	mov	r5, r3
 8008636:	f7ff fc0d 	bl	8007e54 <_Balloc>
 800863a:	4604      	mov	r4, r0
 800863c:	b930      	cbnz	r0, 800864c <__d2b+0x24>
 800863e:	4602      	mov	r2, r0
 8008640:	f240 310a 	movw	r1, #778	; 0x30a
 8008644:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <__d2b+0xb0>)
 8008646:	4825      	ldr	r0, [pc, #148]	; (80086dc <__d2b+0xb4>)
 8008648:	f7ff f842 	bl	80076d0 <__assert_func>
 800864c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008650:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008654:	bb2d      	cbnz	r5, 80086a2 <__d2b+0x7a>
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	f1b8 0300 	subs.w	r3, r8, #0
 800865c:	d026      	beq.n	80086ac <__d2b+0x84>
 800865e:	4668      	mov	r0, sp
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	f7ff fd09 	bl	8008078 <__lo0bits>
 8008666:	9900      	ldr	r1, [sp, #0]
 8008668:	b1f0      	cbz	r0, 80086a8 <__d2b+0x80>
 800866a:	9a01      	ldr	r2, [sp, #4]
 800866c:	f1c0 0320 	rsb	r3, r0, #32
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	430b      	orrs	r3, r1
 8008676:	40c2      	lsrs	r2, r0
 8008678:	6163      	str	r3, [r4, #20]
 800867a:	9201      	str	r2, [sp, #4]
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	bf14      	ite	ne
 8008682:	2102      	movne	r1, #2
 8008684:	2101      	moveq	r1, #1
 8008686:	61a3      	str	r3, [r4, #24]
 8008688:	6121      	str	r1, [r4, #16]
 800868a:	b1c5      	cbz	r5, 80086be <__d2b+0x96>
 800868c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008690:	4405      	add	r5, r0
 8008692:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008696:	603d      	str	r5, [r7, #0]
 8008698:	6030      	str	r0, [r6, #0]
 800869a:	4620      	mov	r0, r4
 800869c:	b002      	add	sp, #8
 800869e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086a6:	e7d6      	b.n	8008656 <__d2b+0x2e>
 80086a8:	6161      	str	r1, [r4, #20]
 80086aa:	e7e7      	b.n	800867c <__d2b+0x54>
 80086ac:	a801      	add	r0, sp, #4
 80086ae:	f7ff fce3 	bl	8008078 <__lo0bits>
 80086b2:	2101      	movs	r1, #1
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	6121      	str	r1, [r4, #16]
 80086b8:	6163      	str	r3, [r4, #20]
 80086ba:	3020      	adds	r0, #32
 80086bc:	e7e5      	b.n	800868a <__d2b+0x62>
 80086be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80086c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086c6:	6038      	str	r0, [r7, #0]
 80086c8:	6918      	ldr	r0, [r3, #16]
 80086ca:	f7ff fcb5 	bl	8008038 <__hi0bits>
 80086ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80086d2:	6031      	str	r1, [r6, #0]
 80086d4:	e7e1      	b.n	800869a <__d2b+0x72>
 80086d6:	bf00      	nop
 80086d8:	08009d21 	.word	0x08009d21
 80086dc:	08009dac 	.word	0x08009dac

080086e0 <__ratio>:
 80086e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4688      	mov	r8, r1
 80086e6:	4669      	mov	r1, sp
 80086e8:	4681      	mov	r9, r0
 80086ea:	f7ff ff49 	bl	8008580 <__b2d>
 80086ee:	460f      	mov	r7, r1
 80086f0:	4604      	mov	r4, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	4640      	mov	r0, r8
 80086f6:	a901      	add	r1, sp, #4
 80086f8:	f7ff ff42 	bl	8008580 <__b2d>
 80086fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008700:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008704:	468b      	mov	fp, r1
 8008706:	eba3 0c02 	sub.w	ip, r3, r2
 800870a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfd5      	itete	le
 8008718:	460a      	movle	r2, r1
 800871a:	462a      	movgt	r2, r5
 800871c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008720:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008724:	bfd8      	it	le
 8008726:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800872a:	465b      	mov	r3, fp
 800872c:	4602      	mov	r2, r0
 800872e:	4639      	mov	r1, r7
 8008730:	4620      	mov	r0, r4
 8008732:	f7f8 f8b9 	bl	80008a8 <__aeabi_ddiv>
 8008736:	b003      	add	sp, #12
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800873c <__copybits>:
 800873c:	3901      	subs	r1, #1
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	1149      	asrs	r1, r1, #5
 8008742:	6914      	ldr	r4, [r2, #16]
 8008744:	3101      	adds	r1, #1
 8008746:	f102 0314 	add.w	r3, r2, #20
 800874a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800874e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008752:	1f05      	subs	r5, r0, #4
 8008754:	42a3      	cmp	r3, r4
 8008756:	d30c      	bcc.n	8008772 <__copybits+0x36>
 8008758:	1aa3      	subs	r3, r4, r2
 800875a:	3b11      	subs	r3, #17
 800875c:	f023 0303 	bic.w	r3, r3, #3
 8008760:	3211      	adds	r2, #17
 8008762:	42a2      	cmp	r2, r4
 8008764:	bf88      	it	hi
 8008766:	2300      	movhi	r3, #0
 8008768:	4418      	add	r0, r3
 800876a:	2300      	movs	r3, #0
 800876c:	4288      	cmp	r0, r1
 800876e:	d305      	bcc.n	800877c <__copybits+0x40>
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	f853 6b04 	ldr.w	r6, [r3], #4
 8008776:	f845 6f04 	str.w	r6, [r5, #4]!
 800877a:	e7eb      	b.n	8008754 <__copybits+0x18>
 800877c:	f840 3b04 	str.w	r3, [r0], #4
 8008780:	e7f4      	b.n	800876c <__copybits+0x30>

08008782 <__any_on>:
 8008782:	f100 0214 	add.w	r2, r0, #20
 8008786:	6900      	ldr	r0, [r0, #16]
 8008788:	114b      	asrs	r3, r1, #5
 800878a:	4298      	cmp	r0, r3
 800878c:	b510      	push	{r4, lr}
 800878e:	db11      	blt.n	80087b4 <__any_on+0x32>
 8008790:	dd0a      	ble.n	80087a8 <__any_on+0x26>
 8008792:	f011 011f 	ands.w	r1, r1, #31
 8008796:	d007      	beq.n	80087a8 <__any_on+0x26>
 8008798:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800879c:	fa24 f001 	lsr.w	r0, r4, r1
 80087a0:	fa00 f101 	lsl.w	r1, r0, r1
 80087a4:	428c      	cmp	r4, r1
 80087a6:	d10b      	bne.n	80087c0 <__any_on+0x3e>
 80087a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d803      	bhi.n	80087b8 <__any_on+0x36>
 80087b0:	2000      	movs	r0, #0
 80087b2:	bd10      	pop	{r4, pc}
 80087b4:	4603      	mov	r3, r0
 80087b6:	e7f7      	b.n	80087a8 <__any_on+0x26>
 80087b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087bc:	2900      	cmp	r1, #0
 80087be:	d0f5      	beq.n	80087ac <__any_on+0x2a>
 80087c0:	2001      	movs	r0, #1
 80087c2:	e7f6      	b.n	80087b2 <__any_on+0x30>

080087c4 <_calloc_r>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	fba1 5402 	umull	r5, r4, r1, r2
 80087ca:	b934      	cbnz	r4, 80087da <_calloc_r+0x16>
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7fd ff9b 	bl	8006708 <_malloc_r>
 80087d2:	4606      	mov	r6, r0
 80087d4:	b928      	cbnz	r0, 80087e2 <_calloc_r+0x1e>
 80087d6:	4630      	mov	r0, r6
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	220c      	movs	r2, #12
 80087dc:	2600      	movs	r6, #0
 80087de:	6002      	str	r2, [r0, #0]
 80087e0:	e7f9      	b.n	80087d6 <_calloc_r+0x12>
 80087e2:	462a      	mov	r2, r5
 80087e4:	4621      	mov	r1, r4
 80087e6:	f7fd ff1f 	bl	8006628 <memset>
 80087ea:	e7f4      	b.n	80087d6 <_calloc_r+0x12>

080087ec <__ssputs_r>:
 80087ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	688e      	ldr	r6, [r1, #8]
 80087f2:	4682      	mov	sl, r0
 80087f4:	429e      	cmp	r6, r3
 80087f6:	460c      	mov	r4, r1
 80087f8:	4690      	mov	r8, r2
 80087fa:	461f      	mov	r7, r3
 80087fc:	d838      	bhi.n	8008870 <__ssputs_r+0x84>
 80087fe:	898a      	ldrh	r2, [r1, #12]
 8008800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008804:	d032      	beq.n	800886c <__ssputs_r+0x80>
 8008806:	6825      	ldr	r5, [r4, #0]
 8008808:	6909      	ldr	r1, [r1, #16]
 800880a:	3301      	adds	r3, #1
 800880c:	eba5 0901 	sub.w	r9, r5, r1
 8008810:	6965      	ldr	r5, [r4, #20]
 8008812:	444b      	add	r3, r9
 8008814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800881c:	106d      	asrs	r5, r5, #1
 800881e:	429d      	cmp	r5, r3
 8008820:	bf38      	it	cc
 8008822:	461d      	movcc	r5, r3
 8008824:	0553      	lsls	r3, r2, #21
 8008826:	d531      	bpl.n	800888c <__ssputs_r+0xa0>
 8008828:	4629      	mov	r1, r5
 800882a:	f7fd ff6d 	bl	8006708 <_malloc_r>
 800882e:	4606      	mov	r6, r0
 8008830:	b950      	cbnz	r0, 8008848 <__ssputs_r+0x5c>
 8008832:	230c      	movs	r3, #12
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	f8ca 3000 	str.w	r3, [sl]
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008848:	464a      	mov	r2, r9
 800884a:	6921      	ldr	r1, [r4, #16]
 800884c:	f7ff fae8 	bl	8007e20 <memcpy>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885a:	81a3      	strh	r3, [r4, #12]
 800885c:	6126      	str	r6, [r4, #16]
 800885e:	444e      	add	r6, r9
 8008860:	6026      	str	r6, [r4, #0]
 8008862:	463e      	mov	r6, r7
 8008864:	6165      	str	r5, [r4, #20]
 8008866:	eba5 0509 	sub.w	r5, r5, r9
 800886a:	60a5      	str	r5, [r4, #8]
 800886c:	42be      	cmp	r6, r7
 800886e:	d900      	bls.n	8008872 <__ssputs_r+0x86>
 8008870:	463e      	mov	r6, r7
 8008872:	4632      	mov	r2, r6
 8008874:	4641      	mov	r1, r8
 8008876:	6820      	ldr	r0, [r4, #0]
 8008878:	f000 ff20 	bl	80096bc <memmove>
 800887c:	68a3      	ldr	r3, [r4, #8]
 800887e:	2000      	movs	r0, #0
 8008880:	1b9b      	subs	r3, r3, r6
 8008882:	60a3      	str	r3, [r4, #8]
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	4433      	add	r3, r6
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	e7db      	b.n	8008844 <__ssputs_r+0x58>
 800888c:	462a      	mov	r2, r5
 800888e:	f000 ff2f 	bl	80096f0 <_realloc_r>
 8008892:	4606      	mov	r6, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d1e1      	bne.n	800885c <__ssputs_r+0x70>
 8008898:	4650      	mov	r0, sl
 800889a:	6921      	ldr	r1, [r4, #16]
 800889c:	f7fd fecc 	bl	8006638 <_free_r>
 80088a0:	e7c7      	b.n	8008832 <__ssputs_r+0x46>
	...

080088a4 <_svfiprintf_r>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	4698      	mov	r8, r3
 80088aa:	898b      	ldrh	r3, [r1, #12]
 80088ac:	4607      	mov	r7, r0
 80088ae:	061b      	lsls	r3, r3, #24
 80088b0:	460d      	mov	r5, r1
 80088b2:	4614      	mov	r4, r2
 80088b4:	b09d      	sub	sp, #116	; 0x74
 80088b6:	d50e      	bpl.n	80088d6 <_svfiprintf_r+0x32>
 80088b8:	690b      	ldr	r3, [r1, #16]
 80088ba:	b963      	cbnz	r3, 80088d6 <_svfiprintf_r+0x32>
 80088bc:	2140      	movs	r1, #64	; 0x40
 80088be:	f7fd ff23 	bl	8006708 <_malloc_r>
 80088c2:	6028      	str	r0, [r5, #0]
 80088c4:	6128      	str	r0, [r5, #16]
 80088c6:	b920      	cbnz	r0, 80088d2 <_svfiprintf_r+0x2e>
 80088c8:	230c      	movs	r3, #12
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e0d1      	b.n	8008a76 <_svfiprintf_r+0x1d2>
 80088d2:	2340      	movs	r3, #64	; 0x40
 80088d4:	616b      	str	r3, [r5, #20]
 80088d6:	2300      	movs	r3, #0
 80088d8:	9309      	str	r3, [sp, #36]	; 0x24
 80088da:	2320      	movs	r3, #32
 80088dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e0:	2330      	movs	r3, #48	; 0x30
 80088e2:	f04f 0901 	mov.w	r9, #1
 80088e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a90 <_svfiprintf_r+0x1ec>
 80088ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088f2:	4623      	mov	r3, r4
 80088f4:	469a      	mov	sl, r3
 80088f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088fa:	b10a      	cbz	r2, 8008900 <_svfiprintf_r+0x5c>
 80088fc:	2a25      	cmp	r2, #37	; 0x25
 80088fe:	d1f9      	bne.n	80088f4 <_svfiprintf_r+0x50>
 8008900:	ebba 0b04 	subs.w	fp, sl, r4
 8008904:	d00b      	beq.n	800891e <_svfiprintf_r+0x7a>
 8008906:	465b      	mov	r3, fp
 8008908:	4622      	mov	r2, r4
 800890a:	4629      	mov	r1, r5
 800890c:	4638      	mov	r0, r7
 800890e:	f7ff ff6d 	bl	80087ec <__ssputs_r>
 8008912:	3001      	adds	r0, #1
 8008914:	f000 80aa 	beq.w	8008a6c <_svfiprintf_r+0x1c8>
 8008918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800891a:	445a      	add	r2, fp
 800891c:	9209      	str	r2, [sp, #36]	; 0x24
 800891e:	f89a 3000 	ldrb.w	r3, [sl]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 80a2 	beq.w	8008a6c <_svfiprintf_r+0x1c8>
 8008928:	2300      	movs	r3, #0
 800892a:	f04f 32ff 	mov.w	r2, #4294967295
 800892e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008932:	f10a 0a01 	add.w	sl, sl, #1
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	9307      	str	r3, [sp, #28]
 800893a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800893e:	931a      	str	r3, [sp, #104]	; 0x68
 8008940:	4654      	mov	r4, sl
 8008942:	2205      	movs	r2, #5
 8008944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008948:	4851      	ldr	r0, [pc, #324]	; (8008a90 <_svfiprintf_r+0x1ec>)
 800894a:	f000 fea9 	bl	80096a0 <memchr>
 800894e:	9a04      	ldr	r2, [sp, #16]
 8008950:	b9d8      	cbnz	r0, 800898a <_svfiprintf_r+0xe6>
 8008952:	06d0      	lsls	r0, r2, #27
 8008954:	bf44      	itt	mi
 8008956:	2320      	movmi	r3, #32
 8008958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800895c:	0711      	lsls	r1, r2, #28
 800895e:	bf44      	itt	mi
 8008960:	232b      	movmi	r3, #43	; 0x2b
 8008962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008966:	f89a 3000 	ldrb.w	r3, [sl]
 800896a:	2b2a      	cmp	r3, #42	; 0x2a
 800896c:	d015      	beq.n	800899a <_svfiprintf_r+0xf6>
 800896e:	4654      	mov	r4, sl
 8008970:	2000      	movs	r0, #0
 8008972:	f04f 0c0a 	mov.w	ip, #10
 8008976:	9a07      	ldr	r2, [sp, #28]
 8008978:	4621      	mov	r1, r4
 800897a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800897e:	3b30      	subs	r3, #48	; 0x30
 8008980:	2b09      	cmp	r3, #9
 8008982:	d94e      	bls.n	8008a22 <_svfiprintf_r+0x17e>
 8008984:	b1b0      	cbz	r0, 80089b4 <_svfiprintf_r+0x110>
 8008986:	9207      	str	r2, [sp, #28]
 8008988:	e014      	b.n	80089b4 <_svfiprintf_r+0x110>
 800898a:	eba0 0308 	sub.w	r3, r0, r8
 800898e:	fa09 f303 	lsl.w	r3, r9, r3
 8008992:	4313      	orrs	r3, r2
 8008994:	46a2      	mov	sl, r4
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	e7d2      	b.n	8008940 <_svfiprintf_r+0x9c>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	1d19      	adds	r1, r3, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	9103      	str	r1, [sp, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bfbb      	ittet	lt
 80089a6:	425b      	neglt	r3, r3
 80089a8:	f042 0202 	orrlt.w	r2, r2, #2
 80089ac:	9307      	strge	r3, [sp, #28]
 80089ae:	9307      	strlt	r3, [sp, #28]
 80089b0:	bfb8      	it	lt
 80089b2:	9204      	strlt	r2, [sp, #16]
 80089b4:	7823      	ldrb	r3, [r4, #0]
 80089b6:	2b2e      	cmp	r3, #46	; 0x2e
 80089b8:	d10c      	bne.n	80089d4 <_svfiprintf_r+0x130>
 80089ba:	7863      	ldrb	r3, [r4, #1]
 80089bc:	2b2a      	cmp	r3, #42	; 0x2a
 80089be:	d135      	bne.n	8008a2c <_svfiprintf_r+0x188>
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	3402      	adds	r4, #2
 80089c4:	1d1a      	adds	r2, r3, #4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	9203      	str	r2, [sp, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bfb8      	it	lt
 80089ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008a94 <_svfiprintf_r+0x1f0>
 80089d8:	2203      	movs	r2, #3
 80089da:	4650      	mov	r0, sl
 80089dc:	7821      	ldrb	r1, [r4, #0]
 80089de:	f000 fe5f 	bl	80096a0 <memchr>
 80089e2:	b140      	cbz	r0, 80089f6 <_svfiprintf_r+0x152>
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	eba0 000a 	sub.w	r0, r0, sl
 80089ea:	fa03 f000 	lsl.w	r0, r3, r0
 80089ee:	9b04      	ldr	r3, [sp, #16]
 80089f0:	3401      	adds	r4, #1
 80089f2:	4303      	orrs	r3, r0
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fa:	2206      	movs	r2, #6
 80089fc:	4826      	ldr	r0, [pc, #152]	; (8008a98 <_svfiprintf_r+0x1f4>)
 80089fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a02:	f000 fe4d 	bl	80096a0 <memchr>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d038      	beq.n	8008a7c <_svfiprintf_r+0x1d8>
 8008a0a:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <_svfiprintf_r+0x1f8>)
 8008a0c:	bb1b      	cbnz	r3, 8008a56 <_svfiprintf_r+0x1b2>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	3307      	adds	r3, #7
 8008a12:	f023 0307 	bic.w	r3, r3, #7
 8008a16:	3308      	adds	r3, #8
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1c:	4433      	add	r3, r6
 8008a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a20:	e767      	b.n	80088f2 <_svfiprintf_r+0x4e>
 8008a22:	460c      	mov	r4, r1
 8008a24:	2001      	movs	r0, #1
 8008a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a2a:	e7a5      	b.n	8008978 <_svfiprintf_r+0xd4>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f04f 0c0a 	mov.w	ip, #10
 8008a32:	4619      	mov	r1, r3
 8008a34:	3401      	adds	r4, #1
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a3e:	3a30      	subs	r2, #48	; 0x30
 8008a40:	2a09      	cmp	r2, #9
 8008a42:	d903      	bls.n	8008a4c <_svfiprintf_r+0x1a8>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0c5      	beq.n	80089d4 <_svfiprintf_r+0x130>
 8008a48:	9105      	str	r1, [sp, #20]
 8008a4a:	e7c3      	b.n	80089d4 <_svfiprintf_r+0x130>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	2301      	movs	r3, #1
 8008a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a54:	e7f0      	b.n	8008a38 <_svfiprintf_r+0x194>
 8008a56:	ab03      	add	r3, sp, #12
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <_svfiprintf_r+0x1fc>)
 8008a60:	a904      	add	r1, sp, #16
 8008a62:	f3af 8000 	nop.w
 8008a66:	1c42      	adds	r2, r0, #1
 8008a68:	4606      	mov	r6, r0
 8008a6a:	d1d6      	bne.n	8008a1a <_svfiprintf_r+0x176>
 8008a6c:	89ab      	ldrh	r3, [r5, #12]
 8008a6e:	065b      	lsls	r3, r3, #25
 8008a70:	f53f af2c 	bmi.w	80088cc <_svfiprintf_r+0x28>
 8008a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a76:	b01d      	add	sp, #116	; 0x74
 8008a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7c:	ab03      	add	r3, sp, #12
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	462a      	mov	r2, r5
 8008a82:	4638      	mov	r0, r7
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <_svfiprintf_r+0x1fc>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	f000 f9d4 	bl	8008e34 <_printf_i>
 8008a8c:	e7eb      	b.n	8008a66 <_svfiprintf_r+0x1c2>
 8008a8e:	bf00      	nop
 8008a90:	08009f04 	.word	0x08009f04
 8008a94:	08009f0a 	.word	0x08009f0a
 8008a98:	08009f0e 	.word	0x08009f0e
 8008a9c:	00000000 	.word	0x00000000
 8008aa0:	080087ed 	.word	0x080087ed

08008aa4 <__sfputc_r>:
 8008aa4:	6893      	ldr	r3, [r2, #8]
 8008aa6:	b410      	push	{r4}
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	6093      	str	r3, [r2, #8]
 8008aae:	da07      	bge.n	8008ac0 <__sfputc_r+0x1c>
 8008ab0:	6994      	ldr	r4, [r2, #24]
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	db01      	blt.n	8008aba <__sfputc_r+0x16>
 8008ab6:	290a      	cmp	r1, #10
 8008ab8:	d102      	bne.n	8008ac0 <__sfputc_r+0x1c>
 8008aba:	bc10      	pop	{r4}
 8008abc:	f000 bafe 	b.w	80090bc <__swbuf_r>
 8008ac0:	6813      	ldr	r3, [r2, #0]
 8008ac2:	1c58      	adds	r0, r3, #1
 8008ac4:	6010      	str	r0, [r2, #0]
 8008ac6:	7019      	strb	r1, [r3, #0]
 8008ac8:	4608      	mov	r0, r1
 8008aca:	bc10      	pop	{r4}
 8008acc:	4770      	bx	lr

08008ace <__sfputs_r>:
 8008ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	460f      	mov	r7, r1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	18d5      	adds	r5, r2, r3
 8008ad8:	42ac      	cmp	r4, r5
 8008ada:	d101      	bne.n	8008ae0 <__sfputs_r+0x12>
 8008adc:	2000      	movs	r0, #0
 8008ade:	e007      	b.n	8008af0 <__sfputs_r+0x22>
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	f7ff ffdc 	bl	8008aa4 <__sfputc_r>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d1f3      	bne.n	8008ad8 <__sfputs_r+0xa>
 8008af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008af4 <_vfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	460d      	mov	r5, r1
 8008afa:	4614      	mov	r4, r2
 8008afc:	4698      	mov	r8, r3
 8008afe:	4606      	mov	r6, r0
 8008b00:	b09d      	sub	sp, #116	; 0x74
 8008b02:	b118      	cbz	r0, 8008b0c <_vfiprintf_r+0x18>
 8008b04:	6983      	ldr	r3, [r0, #24]
 8008b06:	b90b      	cbnz	r3, 8008b0c <_vfiprintf_r+0x18>
 8008b08:	f000 fcc4 	bl	8009494 <__sinit>
 8008b0c:	4b89      	ldr	r3, [pc, #548]	; (8008d34 <_vfiprintf_r+0x240>)
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	d11b      	bne.n	8008b4a <_vfiprintf_r+0x56>
 8008b12:	6875      	ldr	r5, [r6, #4]
 8008b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b16:	07d9      	lsls	r1, r3, #31
 8008b18:	d405      	bmi.n	8008b26 <_vfiprintf_r+0x32>
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	059a      	lsls	r2, r3, #22
 8008b1e:	d402      	bmi.n	8008b26 <_vfiprintf_r+0x32>
 8008b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b22:	f000 fd55 	bl	80095d0 <__retarget_lock_acquire_recursive>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	071b      	lsls	r3, r3, #28
 8008b2a:	d501      	bpl.n	8008b30 <_vfiprintf_r+0x3c>
 8008b2c:	692b      	ldr	r3, [r5, #16]
 8008b2e:	b9eb      	cbnz	r3, 8008b6c <_vfiprintf_r+0x78>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 fb22 	bl	800917c <__swsetup_r>
 8008b38:	b1c0      	cbz	r0, 8008b6c <_vfiprintf_r+0x78>
 8008b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b3c:	07dc      	lsls	r4, r3, #31
 8008b3e:	d50e      	bpl.n	8008b5e <_vfiprintf_r+0x6a>
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	b01d      	add	sp, #116	; 0x74
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <_vfiprintf_r+0x244>)
 8008b4c:	429d      	cmp	r5, r3
 8008b4e:	d101      	bne.n	8008b54 <_vfiprintf_r+0x60>
 8008b50:	68b5      	ldr	r5, [r6, #8]
 8008b52:	e7df      	b.n	8008b14 <_vfiprintf_r+0x20>
 8008b54:	4b79      	ldr	r3, [pc, #484]	; (8008d3c <_vfiprintf_r+0x248>)
 8008b56:	429d      	cmp	r5, r3
 8008b58:	bf08      	it	eq
 8008b5a:	68f5      	ldreq	r5, [r6, #12]
 8008b5c:	e7da      	b.n	8008b14 <_vfiprintf_r+0x20>
 8008b5e:	89ab      	ldrh	r3, [r5, #12]
 8008b60:	0598      	lsls	r0, r3, #22
 8008b62:	d4ed      	bmi.n	8008b40 <_vfiprintf_r+0x4c>
 8008b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b66:	f000 fd34 	bl	80095d2 <__retarget_lock_release_recursive>
 8008b6a:	e7e9      	b.n	8008b40 <_vfiprintf_r+0x4c>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b70:	2320      	movs	r3, #32
 8008b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b76:	2330      	movs	r3, #48	; 0x30
 8008b78:	f04f 0901 	mov.w	r9, #1
 8008b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d40 <_vfiprintf_r+0x24c>
 8008b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b88:	4623      	mov	r3, r4
 8008b8a:	469a      	mov	sl, r3
 8008b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b90:	b10a      	cbz	r2, 8008b96 <_vfiprintf_r+0xa2>
 8008b92:	2a25      	cmp	r2, #37	; 0x25
 8008b94:	d1f9      	bne.n	8008b8a <_vfiprintf_r+0x96>
 8008b96:	ebba 0b04 	subs.w	fp, sl, r4
 8008b9a:	d00b      	beq.n	8008bb4 <_vfiprintf_r+0xc0>
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff93 	bl	8008ace <__sfputs_r>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f000 80aa 	beq.w	8008d02 <_vfiprintf_r+0x20e>
 8008bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb0:	445a      	add	r2, fp
 8008bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80a2 	beq.w	8008d02 <_vfiprintf_r+0x20e>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc8:	f10a 0a01 	add.w	sl, sl, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	9307      	str	r3, [sp, #28]
 8008bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008bd6:	4654      	mov	r4, sl
 8008bd8:	2205      	movs	r2, #5
 8008bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bde:	4858      	ldr	r0, [pc, #352]	; (8008d40 <_vfiprintf_r+0x24c>)
 8008be0:	f000 fd5e 	bl	80096a0 <memchr>
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	b9d8      	cbnz	r0, 8008c20 <_vfiprintf_r+0x12c>
 8008be8:	06d1      	lsls	r1, r2, #27
 8008bea:	bf44      	itt	mi
 8008bec:	2320      	movmi	r3, #32
 8008bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf2:	0713      	lsls	r3, r2, #28
 8008bf4:	bf44      	itt	mi
 8008bf6:	232b      	movmi	r3, #43	; 0x2b
 8008bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008c00:	2b2a      	cmp	r3, #42	; 0x2a
 8008c02:	d015      	beq.n	8008c30 <_vfiprintf_r+0x13c>
 8008c04:	4654      	mov	r4, sl
 8008c06:	2000      	movs	r0, #0
 8008c08:	f04f 0c0a 	mov.w	ip, #10
 8008c0c:	9a07      	ldr	r2, [sp, #28]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c14:	3b30      	subs	r3, #48	; 0x30
 8008c16:	2b09      	cmp	r3, #9
 8008c18:	d94e      	bls.n	8008cb8 <_vfiprintf_r+0x1c4>
 8008c1a:	b1b0      	cbz	r0, 8008c4a <_vfiprintf_r+0x156>
 8008c1c:	9207      	str	r2, [sp, #28]
 8008c1e:	e014      	b.n	8008c4a <_vfiprintf_r+0x156>
 8008c20:	eba0 0308 	sub.w	r3, r0, r8
 8008c24:	fa09 f303 	lsl.w	r3, r9, r3
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	46a2      	mov	sl, r4
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	e7d2      	b.n	8008bd6 <_vfiprintf_r+0xe2>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	1d19      	adds	r1, r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9103      	str	r1, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfbb      	ittet	lt
 8008c3c:	425b      	neglt	r3, r3
 8008c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c42:	9307      	strge	r3, [sp, #28]
 8008c44:	9307      	strlt	r3, [sp, #28]
 8008c46:	bfb8      	it	lt
 8008c48:	9204      	strlt	r2, [sp, #16]
 8008c4a:	7823      	ldrb	r3, [r4, #0]
 8008c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c4e:	d10c      	bne.n	8008c6a <_vfiprintf_r+0x176>
 8008c50:	7863      	ldrb	r3, [r4, #1]
 8008c52:	2b2a      	cmp	r3, #42	; 0x2a
 8008c54:	d135      	bne.n	8008cc2 <_vfiprintf_r+0x1ce>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3402      	adds	r4, #2
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	9203      	str	r2, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfb8      	it	lt
 8008c64:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008d44 <_vfiprintf_r+0x250>
 8008c6e:	2203      	movs	r2, #3
 8008c70:	4650      	mov	r0, sl
 8008c72:	7821      	ldrb	r1, [r4, #0]
 8008c74:	f000 fd14 	bl	80096a0 <memchr>
 8008c78:	b140      	cbz	r0, 8008c8c <_vfiprintf_r+0x198>
 8008c7a:	2340      	movs	r3, #64	; 0x40
 8008c7c:	eba0 000a 	sub.w	r0, r0, sl
 8008c80:	fa03 f000 	lsl.w	r0, r3, r0
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	3401      	adds	r4, #1
 8008c88:	4303      	orrs	r3, r0
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	2206      	movs	r2, #6
 8008c92:	482d      	ldr	r0, [pc, #180]	; (8008d48 <_vfiprintf_r+0x254>)
 8008c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c98:	f000 fd02 	bl	80096a0 <memchr>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d03f      	beq.n	8008d20 <_vfiprintf_r+0x22c>
 8008ca0:	4b2a      	ldr	r3, [pc, #168]	; (8008d4c <_vfiprintf_r+0x258>)
 8008ca2:	bb1b      	cbnz	r3, 8008cec <_vfiprintf_r+0x1f8>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	3307      	adds	r3, #7
 8008ca8:	f023 0307 	bic.w	r3, r3, #7
 8008cac:	3308      	adds	r3, #8
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb2:	443b      	add	r3, r7
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	e767      	b.n	8008b88 <_vfiprintf_r+0x94>
 8008cb8:	460c      	mov	r4, r1
 8008cba:	2001      	movs	r0, #1
 8008cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc0:	e7a5      	b.n	8008c0e <_vfiprintf_r+0x11a>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f04f 0c0a 	mov.w	ip, #10
 8008cc8:	4619      	mov	r1, r3
 8008cca:	3401      	adds	r4, #1
 8008ccc:	9305      	str	r3, [sp, #20]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd4:	3a30      	subs	r2, #48	; 0x30
 8008cd6:	2a09      	cmp	r2, #9
 8008cd8:	d903      	bls.n	8008ce2 <_vfiprintf_r+0x1ee>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c5      	beq.n	8008c6a <_vfiprintf_r+0x176>
 8008cde:	9105      	str	r1, [sp, #20]
 8008ce0:	e7c3      	b.n	8008c6a <_vfiprintf_r+0x176>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cea:	e7f0      	b.n	8008cce <_vfiprintf_r+0x1da>
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <_vfiprintf_r+0x25c>)
 8008cf6:	a904      	add	r1, sp, #16
 8008cf8:	f3af 8000 	nop.w
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	1c78      	adds	r0, r7, #1
 8008d00:	d1d6      	bne.n	8008cb0 <_vfiprintf_r+0x1bc>
 8008d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d04:	07d9      	lsls	r1, r3, #31
 8008d06:	d405      	bmi.n	8008d14 <_vfiprintf_r+0x220>
 8008d08:	89ab      	ldrh	r3, [r5, #12]
 8008d0a:	059a      	lsls	r2, r3, #22
 8008d0c:	d402      	bmi.n	8008d14 <_vfiprintf_r+0x220>
 8008d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d10:	f000 fc5f 	bl	80095d2 <__retarget_lock_release_recursive>
 8008d14:	89ab      	ldrh	r3, [r5, #12]
 8008d16:	065b      	lsls	r3, r3, #25
 8008d18:	f53f af12 	bmi.w	8008b40 <_vfiprintf_r+0x4c>
 8008d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1e:	e711      	b.n	8008b44 <_vfiprintf_r+0x50>
 8008d20:	ab03      	add	r3, sp, #12
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <_vfiprintf_r+0x25c>)
 8008d2a:	a904      	add	r1, sp, #16
 8008d2c:	f000 f882 	bl	8008e34 <_printf_i>
 8008d30:	e7e4      	b.n	8008cfc <_vfiprintf_r+0x208>
 8008d32:	bf00      	nop
 8008d34:	08009f58 	.word	0x08009f58
 8008d38:	08009f78 	.word	0x08009f78
 8008d3c:	08009f38 	.word	0x08009f38
 8008d40:	08009f04 	.word	0x08009f04
 8008d44:	08009f0a 	.word	0x08009f0a
 8008d48:	08009f0e 	.word	0x08009f0e
 8008d4c:	00000000 	.word	0x00000000
 8008d50:	08008acf 	.word	0x08008acf

08008d54 <_printf_common>:
 8008d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	4616      	mov	r6, r2
 8008d5a:	4699      	mov	r9, r3
 8008d5c:	688a      	ldr	r2, [r1, #8]
 8008d5e:	690b      	ldr	r3, [r1, #16]
 8008d60:	4607      	mov	r7, r0
 8008d62:	4293      	cmp	r3, r2
 8008d64:	bfb8      	it	lt
 8008d66:	4613      	movlt	r3, r2
 8008d68:	6033      	str	r3, [r6, #0]
 8008d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d6e:	460c      	mov	r4, r1
 8008d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d74:	b10a      	cbz	r2, 8008d7a <_printf_common+0x26>
 8008d76:	3301      	adds	r3, #1
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	0699      	lsls	r1, r3, #26
 8008d7e:	bf42      	ittt	mi
 8008d80:	6833      	ldrmi	r3, [r6, #0]
 8008d82:	3302      	addmi	r3, #2
 8008d84:	6033      	strmi	r3, [r6, #0]
 8008d86:	6825      	ldr	r5, [r4, #0]
 8008d88:	f015 0506 	ands.w	r5, r5, #6
 8008d8c:	d106      	bne.n	8008d9c <_printf_common+0x48>
 8008d8e:	f104 0a19 	add.w	sl, r4, #25
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	6832      	ldr	r2, [r6, #0]
 8008d96:	1a9b      	subs	r3, r3, r2
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	dc28      	bgt.n	8008dee <_printf_common+0x9a>
 8008d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008da0:	1e13      	subs	r3, r2, #0
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	bf18      	it	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	0692      	lsls	r2, r2, #26
 8008daa:	d42d      	bmi.n	8008e08 <_printf_common+0xb4>
 8008dac:	4649      	mov	r1, r9
 8008dae:	4638      	mov	r0, r7
 8008db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008db4:	47c0      	blx	r8
 8008db6:	3001      	adds	r0, #1
 8008db8:	d020      	beq.n	8008dfc <_printf_common+0xa8>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	68e5      	ldr	r5, [r4, #12]
 8008dbe:	f003 0306 	and.w	r3, r3, #6
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	bf18      	it	ne
 8008dc6:	2500      	movne	r5, #0
 8008dc8:	6832      	ldr	r2, [r6, #0]
 8008dca:	f04f 0600 	mov.w	r6, #0
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	bf08      	it	eq
 8008dd2:	1aad      	subeq	r5, r5, r2
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	bf08      	it	eq
 8008dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bfc4      	itt	gt
 8008de0:	1a9b      	subgt	r3, r3, r2
 8008de2:	18ed      	addgt	r5, r5, r3
 8008de4:	341a      	adds	r4, #26
 8008de6:	42b5      	cmp	r5, r6
 8008de8:	d11a      	bne.n	8008e20 <_printf_common+0xcc>
 8008dea:	2000      	movs	r0, #0
 8008dec:	e008      	b.n	8008e00 <_printf_common+0xac>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4652      	mov	r2, sl
 8008df2:	4649      	mov	r1, r9
 8008df4:	4638      	mov	r0, r7
 8008df6:	47c0      	blx	r8
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d103      	bne.n	8008e04 <_printf_common+0xb0>
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e04:	3501      	adds	r5, #1
 8008e06:	e7c4      	b.n	8008d92 <_printf_common+0x3e>
 8008e08:	2030      	movs	r0, #48	; 0x30
 8008e0a:	18e1      	adds	r1, r4, r3
 8008e0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e16:	4422      	add	r2, r4
 8008e18:	3302      	adds	r3, #2
 8008e1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e1e:	e7c5      	b.n	8008dac <_printf_common+0x58>
 8008e20:	2301      	movs	r3, #1
 8008e22:	4622      	mov	r2, r4
 8008e24:	4649      	mov	r1, r9
 8008e26:	4638      	mov	r0, r7
 8008e28:	47c0      	blx	r8
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	d0e6      	beq.n	8008dfc <_printf_common+0xa8>
 8008e2e:	3601      	adds	r6, #1
 8008e30:	e7d9      	b.n	8008de6 <_printf_common+0x92>
	...

08008e34 <_printf_i>:
 8008e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	7e0f      	ldrb	r7, [r1, #24]
 8008e3a:	4691      	mov	r9, r2
 8008e3c:	2f78      	cmp	r7, #120	; 0x78
 8008e3e:	4680      	mov	r8, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	469a      	mov	sl, r3
 8008e44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e4a:	d807      	bhi.n	8008e5c <_printf_i+0x28>
 8008e4c:	2f62      	cmp	r7, #98	; 0x62
 8008e4e:	d80a      	bhi.n	8008e66 <_printf_i+0x32>
 8008e50:	2f00      	cmp	r7, #0
 8008e52:	f000 80d9 	beq.w	8009008 <_printf_i+0x1d4>
 8008e56:	2f58      	cmp	r7, #88	; 0x58
 8008e58:	f000 80a4 	beq.w	8008fa4 <_printf_i+0x170>
 8008e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e64:	e03a      	b.n	8008edc <_printf_i+0xa8>
 8008e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e6a:	2b15      	cmp	r3, #21
 8008e6c:	d8f6      	bhi.n	8008e5c <_printf_i+0x28>
 8008e6e:	a101      	add	r1, pc, #4	; (adr r1, 8008e74 <_printf_i+0x40>)
 8008e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e74:	08008ecd 	.word	0x08008ecd
 8008e78:	08008ee1 	.word	0x08008ee1
 8008e7c:	08008e5d 	.word	0x08008e5d
 8008e80:	08008e5d 	.word	0x08008e5d
 8008e84:	08008e5d 	.word	0x08008e5d
 8008e88:	08008e5d 	.word	0x08008e5d
 8008e8c:	08008ee1 	.word	0x08008ee1
 8008e90:	08008e5d 	.word	0x08008e5d
 8008e94:	08008e5d 	.word	0x08008e5d
 8008e98:	08008e5d 	.word	0x08008e5d
 8008e9c:	08008e5d 	.word	0x08008e5d
 8008ea0:	08008fef 	.word	0x08008fef
 8008ea4:	08008f11 	.word	0x08008f11
 8008ea8:	08008fd1 	.word	0x08008fd1
 8008eac:	08008e5d 	.word	0x08008e5d
 8008eb0:	08008e5d 	.word	0x08008e5d
 8008eb4:	08009011 	.word	0x08009011
 8008eb8:	08008e5d 	.word	0x08008e5d
 8008ebc:	08008f11 	.word	0x08008f11
 8008ec0:	08008e5d 	.word	0x08008e5d
 8008ec4:	08008e5d 	.word	0x08008e5d
 8008ec8:	08008fd9 	.word	0x08008fd9
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	602a      	str	r2, [r5, #0]
 8008ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008edc:	2301      	movs	r3, #1
 8008ede:	e0a4      	b.n	800902a <_printf_i+0x1f6>
 8008ee0:	6820      	ldr	r0, [r4, #0]
 8008ee2:	6829      	ldr	r1, [r5, #0]
 8008ee4:	0606      	lsls	r6, r0, #24
 8008ee6:	f101 0304 	add.w	r3, r1, #4
 8008eea:	d50a      	bpl.n	8008f02 <_printf_i+0xce>
 8008eec:	680e      	ldr	r6, [r1, #0]
 8008eee:	602b      	str	r3, [r5, #0]
 8008ef0:	2e00      	cmp	r6, #0
 8008ef2:	da03      	bge.n	8008efc <_printf_i+0xc8>
 8008ef4:	232d      	movs	r3, #45	; 0x2d
 8008ef6:	4276      	negs	r6, r6
 8008ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efc:	230a      	movs	r3, #10
 8008efe:	485e      	ldr	r0, [pc, #376]	; (8009078 <_printf_i+0x244>)
 8008f00:	e019      	b.n	8008f36 <_printf_i+0x102>
 8008f02:	680e      	ldr	r6, [r1, #0]
 8008f04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f08:	602b      	str	r3, [r5, #0]
 8008f0a:	bf18      	it	ne
 8008f0c:	b236      	sxthne	r6, r6
 8008f0e:	e7ef      	b.n	8008ef0 <_printf_i+0xbc>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	6820      	ldr	r0, [r4, #0]
 8008f14:	1d19      	adds	r1, r3, #4
 8008f16:	6029      	str	r1, [r5, #0]
 8008f18:	0601      	lsls	r1, r0, #24
 8008f1a:	d501      	bpl.n	8008f20 <_printf_i+0xec>
 8008f1c:	681e      	ldr	r6, [r3, #0]
 8008f1e:	e002      	b.n	8008f26 <_printf_i+0xf2>
 8008f20:	0646      	lsls	r6, r0, #25
 8008f22:	d5fb      	bpl.n	8008f1c <_printf_i+0xe8>
 8008f24:	881e      	ldrh	r6, [r3, #0]
 8008f26:	2f6f      	cmp	r7, #111	; 0x6f
 8008f28:	bf0c      	ite	eq
 8008f2a:	2308      	moveq	r3, #8
 8008f2c:	230a      	movne	r3, #10
 8008f2e:	4852      	ldr	r0, [pc, #328]	; (8009078 <_printf_i+0x244>)
 8008f30:	2100      	movs	r1, #0
 8008f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f36:	6865      	ldr	r5, [r4, #4]
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	bfa8      	it	ge
 8008f3c:	6821      	ldrge	r1, [r4, #0]
 8008f3e:	60a5      	str	r5, [r4, #8]
 8008f40:	bfa4      	itt	ge
 8008f42:	f021 0104 	bicge.w	r1, r1, #4
 8008f46:	6021      	strge	r1, [r4, #0]
 8008f48:	b90e      	cbnz	r6, 8008f4e <_printf_i+0x11a>
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	d04d      	beq.n	8008fea <_printf_i+0x1b6>
 8008f4e:	4615      	mov	r5, r2
 8008f50:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f54:	fb03 6711 	mls	r7, r3, r1, r6
 8008f58:	5dc7      	ldrb	r7, [r0, r7]
 8008f5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f5e:	4637      	mov	r7, r6
 8008f60:	42bb      	cmp	r3, r7
 8008f62:	460e      	mov	r6, r1
 8008f64:	d9f4      	bls.n	8008f50 <_printf_i+0x11c>
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d10b      	bne.n	8008f82 <_printf_i+0x14e>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	07de      	lsls	r6, r3, #31
 8008f6e:	d508      	bpl.n	8008f82 <_printf_i+0x14e>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	6861      	ldr	r1, [r4, #4]
 8008f74:	4299      	cmp	r1, r3
 8008f76:	bfde      	ittt	le
 8008f78:	2330      	movle	r3, #48	; 0x30
 8008f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f82:	1b52      	subs	r2, r2, r5
 8008f84:	6122      	str	r2, [r4, #16]
 8008f86:	464b      	mov	r3, r9
 8008f88:	4621      	mov	r1, r4
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f8cd a000 	str.w	sl, [sp]
 8008f90:	aa03      	add	r2, sp, #12
 8008f92:	f7ff fedf 	bl	8008d54 <_printf_common>
 8008f96:	3001      	adds	r0, #1
 8008f98:	d14c      	bne.n	8009034 <_printf_i+0x200>
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	b004      	add	sp, #16
 8008fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa4:	4834      	ldr	r0, [pc, #208]	; (8009078 <_printf_i+0x244>)
 8008fa6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008faa:	6829      	ldr	r1, [r5, #0]
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fb2:	6029      	str	r1, [r5, #0]
 8008fb4:	061d      	lsls	r5, r3, #24
 8008fb6:	d514      	bpl.n	8008fe2 <_printf_i+0x1ae>
 8008fb8:	07df      	lsls	r7, r3, #31
 8008fba:	bf44      	itt	mi
 8008fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8008fc0:	6023      	strmi	r3, [r4, #0]
 8008fc2:	b91e      	cbnz	r6, 8008fcc <_printf_i+0x198>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	f023 0320 	bic.w	r3, r3, #32
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	2310      	movs	r3, #16
 8008fce:	e7af      	b.n	8008f30 <_printf_i+0xfc>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	f043 0320 	orr.w	r3, r3, #32
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	2378      	movs	r3, #120	; 0x78
 8008fda:	4828      	ldr	r0, [pc, #160]	; (800907c <_printf_i+0x248>)
 8008fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fe0:	e7e3      	b.n	8008faa <_printf_i+0x176>
 8008fe2:	0659      	lsls	r1, r3, #25
 8008fe4:	bf48      	it	mi
 8008fe6:	b2b6      	uxthmi	r6, r6
 8008fe8:	e7e6      	b.n	8008fb8 <_printf_i+0x184>
 8008fea:	4615      	mov	r5, r2
 8008fec:	e7bb      	b.n	8008f66 <_printf_i+0x132>
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	6826      	ldr	r6, [r4, #0]
 8008ff2:	1d18      	adds	r0, r3, #4
 8008ff4:	6961      	ldr	r1, [r4, #20]
 8008ff6:	6028      	str	r0, [r5, #0]
 8008ff8:	0635      	lsls	r5, r6, #24
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	d501      	bpl.n	8009002 <_printf_i+0x1ce>
 8008ffe:	6019      	str	r1, [r3, #0]
 8009000:	e002      	b.n	8009008 <_printf_i+0x1d4>
 8009002:	0670      	lsls	r0, r6, #25
 8009004:	d5fb      	bpl.n	8008ffe <_printf_i+0x1ca>
 8009006:	8019      	strh	r1, [r3, #0]
 8009008:	2300      	movs	r3, #0
 800900a:	4615      	mov	r5, r2
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	e7ba      	b.n	8008f86 <_printf_i+0x152>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	2100      	movs	r1, #0
 8009014:	1d1a      	adds	r2, r3, #4
 8009016:	602a      	str	r2, [r5, #0]
 8009018:	681d      	ldr	r5, [r3, #0]
 800901a:	6862      	ldr	r2, [r4, #4]
 800901c:	4628      	mov	r0, r5
 800901e:	f000 fb3f 	bl	80096a0 <memchr>
 8009022:	b108      	cbz	r0, 8009028 <_printf_i+0x1f4>
 8009024:	1b40      	subs	r0, r0, r5
 8009026:	6060      	str	r0, [r4, #4]
 8009028:	6863      	ldr	r3, [r4, #4]
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	2300      	movs	r3, #0
 800902e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009032:	e7a8      	b.n	8008f86 <_printf_i+0x152>
 8009034:	462a      	mov	r2, r5
 8009036:	4649      	mov	r1, r9
 8009038:	4640      	mov	r0, r8
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	47d0      	blx	sl
 800903e:	3001      	adds	r0, #1
 8009040:	d0ab      	beq.n	8008f9a <_printf_i+0x166>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	079b      	lsls	r3, r3, #30
 8009046:	d413      	bmi.n	8009070 <_printf_i+0x23c>
 8009048:	68e0      	ldr	r0, [r4, #12]
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	4298      	cmp	r0, r3
 800904e:	bfb8      	it	lt
 8009050:	4618      	movlt	r0, r3
 8009052:	e7a4      	b.n	8008f9e <_printf_i+0x16a>
 8009054:	2301      	movs	r3, #1
 8009056:	4632      	mov	r2, r6
 8009058:	4649      	mov	r1, r9
 800905a:	4640      	mov	r0, r8
 800905c:	47d0      	blx	sl
 800905e:	3001      	adds	r0, #1
 8009060:	d09b      	beq.n	8008f9a <_printf_i+0x166>
 8009062:	3501      	adds	r5, #1
 8009064:	68e3      	ldr	r3, [r4, #12]
 8009066:	9903      	ldr	r1, [sp, #12]
 8009068:	1a5b      	subs	r3, r3, r1
 800906a:	42ab      	cmp	r3, r5
 800906c:	dcf2      	bgt.n	8009054 <_printf_i+0x220>
 800906e:	e7eb      	b.n	8009048 <_printf_i+0x214>
 8009070:	2500      	movs	r5, #0
 8009072:	f104 0619 	add.w	r6, r4, #25
 8009076:	e7f5      	b.n	8009064 <_printf_i+0x230>
 8009078:	08009f15 	.word	0x08009f15
 800907c:	08009f26 	.word	0x08009f26

08009080 <nan>:
 8009080:	2000      	movs	r0, #0
 8009082:	4901      	ldr	r1, [pc, #4]	; (8009088 <nan+0x8>)
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	7ff80000 	.word	0x7ff80000

0800908c <nanf>:
 800908c:	4800      	ldr	r0, [pc, #0]	; (8009090 <nanf+0x4>)
 800908e:	4770      	bx	lr
 8009090:	7fc00000 	.word	0x7fc00000

08009094 <strncmp>:
 8009094:	4603      	mov	r3, r0
 8009096:	b510      	push	{r4, lr}
 8009098:	b172      	cbz	r2, 80090b8 <strncmp+0x24>
 800909a:	3901      	subs	r1, #1
 800909c:	1884      	adds	r4, r0, r2
 800909e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80090a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090a6:	4290      	cmp	r0, r2
 80090a8:	d101      	bne.n	80090ae <strncmp+0x1a>
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	d101      	bne.n	80090b2 <strncmp+0x1e>
 80090ae:	1a80      	subs	r0, r0, r2
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d1f3      	bne.n	800909e <strncmp+0xa>
 80090b6:	e7fa      	b.n	80090ae <strncmp+0x1a>
 80090b8:	4610      	mov	r0, r2
 80090ba:	e7f9      	b.n	80090b0 <strncmp+0x1c>

080090bc <__swbuf_r>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	460e      	mov	r6, r1
 80090c0:	4614      	mov	r4, r2
 80090c2:	4605      	mov	r5, r0
 80090c4:	b118      	cbz	r0, 80090ce <__swbuf_r+0x12>
 80090c6:	6983      	ldr	r3, [r0, #24]
 80090c8:	b90b      	cbnz	r3, 80090ce <__swbuf_r+0x12>
 80090ca:	f000 f9e3 	bl	8009494 <__sinit>
 80090ce:	4b21      	ldr	r3, [pc, #132]	; (8009154 <__swbuf_r+0x98>)
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d12b      	bne.n	800912c <__swbuf_r+0x70>
 80090d4:	686c      	ldr	r4, [r5, #4]
 80090d6:	69a3      	ldr	r3, [r4, #24]
 80090d8:	60a3      	str	r3, [r4, #8]
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	071a      	lsls	r2, r3, #28
 80090de:	d52f      	bpl.n	8009140 <__swbuf_r+0x84>
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	b36b      	cbz	r3, 8009140 <__swbuf_r+0x84>
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	b2f6      	uxtb	r6, r6
 80090ea:	1ac0      	subs	r0, r0, r3
 80090ec:	6963      	ldr	r3, [r4, #20]
 80090ee:	4637      	mov	r7, r6
 80090f0:	4283      	cmp	r3, r0
 80090f2:	dc04      	bgt.n	80090fe <__swbuf_r+0x42>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 f938 	bl	800936c <_fflush_r>
 80090fc:	bb30      	cbnz	r0, 800914c <__swbuf_r+0x90>
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	3001      	adds	r0, #1
 8009102:	3b01      	subs	r3, #1
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	6022      	str	r2, [r4, #0]
 800910c:	701e      	strb	r6, [r3, #0]
 800910e:	6963      	ldr	r3, [r4, #20]
 8009110:	4283      	cmp	r3, r0
 8009112:	d004      	beq.n	800911e <__swbuf_r+0x62>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	07db      	lsls	r3, r3, #31
 8009118:	d506      	bpl.n	8009128 <__swbuf_r+0x6c>
 800911a:	2e0a      	cmp	r6, #10
 800911c:	d104      	bne.n	8009128 <__swbuf_r+0x6c>
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f923 	bl	800936c <_fflush_r>
 8009126:	b988      	cbnz	r0, 800914c <__swbuf_r+0x90>
 8009128:	4638      	mov	r0, r7
 800912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <__swbuf_r+0x9c>)
 800912e:	429c      	cmp	r4, r3
 8009130:	d101      	bne.n	8009136 <__swbuf_r+0x7a>
 8009132:	68ac      	ldr	r4, [r5, #8]
 8009134:	e7cf      	b.n	80090d6 <__swbuf_r+0x1a>
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <__swbuf_r+0xa0>)
 8009138:	429c      	cmp	r4, r3
 800913a:	bf08      	it	eq
 800913c:	68ec      	ldreq	r4, [r5, #12]
 800913e:	e7ca      	b.n	80090d6 <__swbuf_r+0x1a>
 8009140:	4621      	mov	r1, r4
 8009142:	4628      	mov	r0, r5
 8009144:	f000 f81a 	bl	800917c <__swsetup_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d0cb      	beq.n	80090e4 <__swbuf_r+0x28>
 800914c:	f04f 37ff 	mov.w	r7, #4294967295
 8009150:	e7ea      	b.n	8009128 <__swbuf_r+0x6c>
 8009152:	bf00      	nop
 8009154:	08009f58 	.word	0x08009f58
 8009158:	08009f78 	.word	0x08009f78
 800915c:	08009f38 	.word	0x08009f38

08009160 <__ascii_wctomb>:
 8009160:	4603      	mov	r3, r0
 8009162:	4608      	mov	r0, r1
 8009164:	b141      	cbz	r1, 8009178 <__ascii_wctomb+0x18>
 8009166:	2aff      	cmp	r2, #255	; 0xff
 8009168:	d904      	bls.n	8009174 <__ascii_wctomb+0x14>
 800916a:	228a      	movs	r2, #138	; 0x8a
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	4770      	bx	lr
 8009174:	2001      	movs	r0, #1
 8009176:	700a      	strb	r2, [r1, #0]
 8009178:	4770      	bx	lr
	...

0800917c <__swsetup_r>:
 800917c:	4b32      	ldr	r3, [pc, #200]	; (8009248 <__swsetup_r+0xcc>)
 800917e:	b570      	push	{r4, r5, r6, lr}
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	4606      	mov	r6, r0
 8009184:	460c      	mov	r4, r1
 8009186:	b125      	cbz	r5, 8009192 <__swsetup_r+0x16>
 8009188:	69ab      	ldr	r3, [r5, #24]
 800918a:	b913      	cbnz	r3, 8009192 <__swsetup_r+0x16>
 800918c:	4628      	mov	r0, r5
 800918e:	f000 f981 	bl	8009494 <__sinit>
 8009192:	4b2e      	ldr	r3, [pc, #184]	; (800924c <__swsetup_r+0xd0>)
 8009194:	429c      	cmp	r4, r3
 8009196:	d10f      	bne.n	80091b8 <__swsetup_r+0x3c>
 8009198:	686c      	ldr	r4, [r5, #4]
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a0:	0719      	lsls	r1, r3, #28
 80091a2:	d42c      	bmi.n	80091fe <__swsetup_r+0x82>
 80091a4:	06dd      	lsls	r5, r3, #27
 80091a6:	d411      	bmi.n	80091cc <__swsetup_r+0x50>
 80091a8:	2309      	movs	r3, #9
 80091aa:	6033      	str	r3, [r6, #0]
 80091ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	e03e      	b.n	8009236 <__swsetup_r+0xba>
 80091b8:	4b25      	ldr	r3, [pc, #148]	; (8009250 <__swsetup_r+0xd4>)
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d101      	bne.n	80091c2 <__swsetup_r+0x46>
 80091be:	68ac      	ldr	r4, [r5, #8]
 80091c0:	e7eb      	b.n	800919a <__swsetup_r+0x1e>
 80091c2:	4b24      	ldr	r3, [pc, #144]	; (8009254 <__swsetup_r+0xd8>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	bf08      	it	eq
 80091c8:	68ec      	ldreq	r4, [r5, #12]
 80091ca:	e7e6      	b.n	800919a <__swsetup_r+0x1e>
 80091cc:	0758      	lsls	r0, r3, #29
 80091ce:	d512      	bpl.n	80091f6 <__swsetup_r+0x7a>
 80091d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d2:	b141      	cbz	r1, 80091e6 <__swsetup_r+0x6a>
 80091d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d8:	4299      	cmp	r1, r3
 80091da:	d002      	beq.n	80091e2 <__swsetup_r+0x66>
 80091dc:	4630      	mov	r0, r6
 80091de:	f7fd fa2b 	bl	8006638 <_free_r>
 80091e2:	2300      	movs	r3, #0
 80091e4:	6363      	str	r3, [r4, #52]	; 0x34
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	2300      	movs	r3, #0
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f043 0308 	orr.w	r3, r3, #8
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	b94b      	cbnz	r3, 8009216 <__swsetup_r+0x9a>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920c:	d003      	beq.n	8009216 <__swsetup_r+0x9a>
 800920e:	4621      	mov	r1, r4
 8009210:	4630      	mov	r0, r6
 8009212:	f000 fa05 	bl	8009620 <__smakebuf_r>
 8009216:	89a0      	ldrh	r0, [r4, #12]
 8009218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800921c:	f010 0301 	ands.w	r3, r0, #1
 8009220:	d00a      	beq.n	8009238 <__swsetup_r+0xbc>
 8009222:	2300      	movs	r3, #0
 8009224:	60a3      	str	r3, [r4, #8]
 8009226:	6963      	ldr	r3, [r4, #20]
 8009228:	425b      	negs	r3, r3
 800922a:	61a3      	str	r3, [r4, #24]
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	b943      	cbnz	r3, 8009242 <__swsetup_r+0xc6>
 8009230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009234:	d1ba      	bne.n	80091ac <__swsetup_r+0x30>
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	0781      	lsls	r1, r0, #30
 800923a:	bf58      	it	pl
 800923c:	6963      	ldrpl	r3, [r4, #20]
 800923e:	60a3      	str	r3, [r4, #8]
 8009240:	e7f4      	b.n	800922c <__swsetup_r+0xb0>
 8009242:	2000      	movs	r0, #0
 8009244:	e7f7      	b.n	8009236 <__swsetup_r+0xba>
 8009246:	bf00      	nop
 8009248:	20000018 	.word	0x20000018
 800924c:	08009f58 	.word	0x08009f58
 8009250:	08009f78 	.word	0x08009f78
 8009254:	08009f38 	.word	0x08009f38

08009258 <abort>:
 8009258:	2006      	movs	r0, #6
 800925a:	b508      	push	{r3, lr}
 800925c:	f000 faa0 	bl	80097a0 <raise>
 8009260:	2001      	movs	r0, #1
 8009262:	f7f9 fc80 	bl	8002b66 <_exit>
	...

08009268 <__sflush_r>:
 8009268:	898a      	ldrh	r2, [r1, #12]
 800926a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926c:	4605      	mov	r5, r0
 800926e:	0710      	lsls	r0, r2, #28
 8009270:	460c      	mov	r4, r1
 8009272:	d457      	bmi.n	8009324 <__sflush_r+0xbc>
 8009274:	684b      	ldr	r3, [r1, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	dc04      	bgt.n	8009284 <__sflush_r+0x1c>
 800927a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	dc01      	bgt.n	8009284 <__sflush_r+0x1c>
 8009280:	2000      	movs	r0, #0
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009286:	2e00      	cmp	r6, #0
 8009288:	d0fa      	beq.n	8009280 <__sflush_r+0x18>
 800928a:	2300      	movs	r3, #0
 800928c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009290:	682f      	ldr	r7, [r5, #0]
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	d032      	beq.n	80092fc <__sflush_r+0x94>
 8009296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	075a      	lsls	r2, r3, #29
 800929c:	d505      	bpl.n	80092aa <__sflush_r+0x42>
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	1ac0      	subs	r0, r0, r3
 80092a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a4:	b10b      	cbz	r3, 80092aa <__sflush_r+0x42>
 80092a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092a8:	1ac0      	subs	r0, r0, r3
 80092aa:	2300      	movs	r3, #0
 80092ac:	4602      	mov	r2, r0
 80092ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b0:	4628      	mov	r0, r5
 80092b2:	6a21      	ldr	r1, [r4, #32]
 80092b4:	47b0      	blx	r6
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	d106      	bne.n	80092ca <__sflush_r+0x62>
 80092bc:	6829      	ldr	r1, [r5, #0]
 80092be:	291d      	cmp	r1, #29
 80092c0:	d82c      	bhi.n	800931c <__sflush_r+0xb4>
 80092c2:	4a29      	ldr	r2, [pc, #164]	; (8009368 <__sflush_r+0x100>)
 80092c4:	40ca      	lsrs	r2, r1
 80092c6:	07d6      	lsls	r6, r2, #31
 80092c8:	d528      	bpl.n	800931c <__sflush_r+0xb4>
 80092ca:	2200      	movs	r2, #0
 80092cc:	6062      	str	r2, [r4, #4]
 80092ce:	6922      	ldr	r2, [r4, #16]
 80092d0:	04d9      	lsls	r1, r3, #19
 80092d2:	6022      	str	r2, [r4, #0]
 80092d4:	d504      	bpl.n	80092e0 <__sflush_r+0x78>
 80092d6:	1c42      	adds	r2, r0, #1
 80092d8:	d101      	bne.n	80092de <__sflush_r+0x76>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	b903      	cbnz	r3, 80092e0 <__sflush_r+0x78>
 80092de:	6560      	str	r0, [r4, #84]	; 0x54
 80092e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092e2:	602f      	str	r7, [r5, #0]
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d0cb      	beq.n	8009280 <__sflush_r+0x18>
 80092e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ec:	4299      	cmp	r1, r3
 80092ee:	d002      	beq.n	80092f6 <__sflush_r+0x8e>
 80092f0:	4628      	mov	r0, r5
 80092f2:	f7fd f9a1 	bl	8006638 <_free_r>
 80092f6:	2000      	movs	r0, #0
 80092f8:	6360      	str	r0, [r4, #52]	; 0x34
 80092fa:	e7c2      	b.n	8009282 <__sflush_r+0x1a>
 80092fc:	6a21      	ldr	r1, [r4, #32]
 80092fe:	2301      	movs	r3, #1
 8009300:	4628      	mov	r0, r5
 8009302:	47b0      	blx	r6
 8009304:	1c41      	adds	r1, r0, #1
 8009306:	d1c7      	bne.n	8009298 <__sflush_r+0x30>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0c4      	beq.n	8009298 <__sflush_r+0x30>
 800930e:	2b1d      	cmp	r3, #29
 8009310:	d001      	beq.n	8009316 <__sflush_r+0xae>
 8009312:	2b16      	cmp	r3, #22
 8009314:	d101      	bne.n	800931a <__sflush_r+0xb2>
 8009316:	602f      	str	r7, [r5, #0]
 8009318:	e7b2      	b.n	8009280 <__sflush_r+0x18>
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009320:	81a3      	strh	r3, [r4, #12]
 8009322:	e7ae      	b.n	8009282 <__sflush_r+0x1a>
 8009324:	690f      	ldr	r7, [r1, #16]
 8009326:	2f00      	cmp	r7, #0
 8009328:	d0aa      	beq.n	8009280 <__sflush_r+0x18>
 800932a:	0793      	lsls	r3, r2, #30
 800932c:	bf18      	it	ne
 800932e:	2300      	movne	r3, #0
 8009330:	680e      	ldr	r6, [r1, #0]
 8009332:	bf08      	it	eq
 8009334:	694b      	ldreq	r3, [r1, #20]
 8009336:	1bf6      	subs	r6, r6, r7
 8009338:	600f      	str	r7, [r1, #0]
 800933a:	608b      	str	r3, [r1, #8]
 800933c:	2e00      	cmp	r6, #0
 800933e:	dd9f      	ble.n	8009280 <__sflush_r+0x18>
 8009340:	4633      	mov	r3, r6
 8009342:	463a      	mov	r2, r7
 8009344:	4628      	mov	r0, r5
 8009346:	6a21      	ldr	r1, [r4, #32]
 8009348:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800934c:	47e0      	blx	ip
 800934e:	2800      	cmp	r0, #0
 8009350:	dc06      	bgt.n	8009360 <__sflush_r+0xf8>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	e790      	b.n	8009282 <__sflush_r+0x1a>
 8009360:	4407      	add	r7, r0
 8009362:	1a36      	subs	r6, r6, r0
 8009364:	e7ea      	b.n	800933c <__sflush_r+0xd4>
 8009366:	bf00      	nop
 8009368:	20400001 	.word	0x20400001

0800936c <_fflush_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	690b      	ldr	r3, [r1, #16]
 8009370:	4605      	mov	r5, r0
 8009372:	460c      	mov	r4, r1
 8009374:	b913      	cbnz	r3, 800937c <_fflush_r+0x10>
 8009376:	2500      	movs	r5, #0
 8009378:	4628      	mov	r0, r5
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	b118      	cbz	r0, 8009386 <_fflush_r+0x1a>
 800937e:	6983      	ldr	r3, [r0, #24]
 8009380:	b90b      	cbnz	r3, 8009386 <_fflush_r+0x1a>
 8009382:	f000 f887 	bl	8009494 <__sinit>
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <_fflush_r+0x6c>)
 8009388:	429c      	cmp	r4, r3
 800938a:	d11b      	bne.n	80093c4 <_fflush_r+0x58>
 800938c:	686c      	ldr	r4, [r5, #4]
 800938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0ef      	beq.n	8009376 <_fflush_r+0xa>
 8009396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009398:	07d0      	lsls	r0, r2, #31
 800939a:	d404      	bmi.n	80093a6 <_fflush_r+0x3a>
 800939c:	0599      	lsls	r1, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_fflush_r+0x3a>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f000 f915 	bl	80095d0 <__retarget_lock_acquire_recursive>
 80093a6:	4628      	mov	r0, r5
 80093a8:	4621      	mov	r1, r4
 80093aa:	f7ff ff5d 	bl	8009268 <__sflush_r>
 80093ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093b0:	4605      	mov	r5, r0
 80093b2:	07da      	lsls	r2, r3, #31
 80093b4:	d4e0      	bmi.n	8009378 <_fflush_r+0xc>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	059b      	lsls	r3, r3, #22
 80093ba:	d4dd      	bmi.n	8009378 <_fflush_r+0xc>
 80093bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093be:	f000 f908 	bl	80095d2 <__retarget_lock_release_recursive>
 80093c2:	e7d9      	b.n	8009378 <_fflush_r+0xc>
 80093c4:	4b05      	ldr	r3, [pc, #20]	; (80093dc <_fflush_r+0x70>)
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d101      	bne.n	80093ce <_fflush_r+0x62>
 80093ca:	68ac      	ldr	r4, [r5, #8]
 80093cc:	e7df      	b.n	800938e <_fflush_r+0x22>
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <_fflush_r+0x74>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	bf08      	it	eq
 80093d4:	68ec      	ldreq	r4, [r5, #12]
 80093d6:	e7da      	b.n	800938e <_fflush_r+0x22>
 80093d8:	08009f58 	.word	0x08009f58
 80093dc:	08009f78 	.word	0x08009f78
 80093e0:	08009f38 	.word	0x08009f38

080093e4 <std>:
 80093e4:	2300      	movs	r3, #0
 80093e6:	b510      	push	{r4, lr}
 80093e8:	4604      	mov	r4, r0
 80093ea:	e9c0 3300 	strd	r3, r3, [r0]
 80093ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093f2:	6083      	str	r3, [r0, #8]
 80093f4:	8181      	strh	r1, [r0, #12]
 80093f6:	6643      	str	r3, [r0, #100]	; 0x64
 80093f8:	81c2      	strh	r2, [r0, #14]
 80093fa:	6183      	str	r3, [r0, #24]
 80093fc:	4619      	mov	r1, r3
 80093fe:	2208      	movs	r2, #8
 8009400:	305c      	adds	r0, #92	; 0x5c
 8009402:	f7fd f911 	bl	8006628 <memset>
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <std+0x38>)
 8009408:	6224      	str	r4, [r4, #32]
 800940a:	6263      	str	r3, [r4, #36]	; 0x24
 800940c:	4b04      	ldr	r3, [pc, #16]	; (8009420 <std+0x3c>)
 800940e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <std+0x40>)
 8009412:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009414:	4b04      	ldr	r3, [pc, #16]	; (8009428 <std+0x44>)
 8009416:	6323      	str	r3, [r4, #48]	; 0x30
 8009418:	bd10      	pop	{r4, pc}
 800941a:	bf00      	nop
 800941c:	080097d9 	.word	0x080097d9
 8009420:	080097fb 	.word	0x080097fb
 8009424:	08009833 	.word	0x08009833
 8009428:	08009857 	.word	0x08009857

0800942c <_cleanup_r>:
 800942c:	4901      	ldr	r1, [pc, #4]	; (8009434 <_cleanup_r+0x8>)
 800942e:	f000 b8af 	b.w	8009590 <_fwalk_reent>
 8009432:	bf00      	nop
 8009434:	0800936d 	.word	0x0800936d

08009438 <__sfmoreglue>:
 8009438:	2268      	movs	r2, #104	; 0x68
 800943a:	b570      	push	{r4, r5, r6, lr}
 800943c:	1e4d      	subs	r5, r1, #1
 800943e:	4355      	muls	r5, r2
 8009440:	460e      	mov	r6, r1
 8009442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009446:	f7fd f95f 	bl	8006708 <_malloc_r>
 800944a:	4604      	mov	r4, r0
 800944c:	b140      	cbz	r0, 8009460 <__sfmoreglue+0x28>
 800944e:	2100      	movs	r1, #0
 8009450:	e9c0 1600 	strd	r1, r6, [r0]
 8009454:	300c      	adds	r0, #12
 8009456:	60a0      	str	r0, [r4, #8]
 8009458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800945c:	f7fd f8e4 	bl	8006628 <memset>
 8009460:	4620      	mov	r0, r4
 8009462:	bd70      	pop	{r4, r5, r6, pc}

08009464 <__sfp_lock_acquire>:
 8009464:	4801      	ldr	r0, [pc, #4]	; (800946c <__sfp_lock_acquire+0x8>)
 8009466:	f000 b8b3 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 800946a:	bf00      	nop
 800946c:	20000531 	.word	0x20000531

08009470 <__sfp_lock_release>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__sfp_lock_release+0x8>)
 8009472:	f000 b8ae 	b.w	80095d2 <__retarget_lock_release_recursive>
 8009476:	bf00      	nop
 8009478:	20000531 	.word	0x20000531

0800947c <__sinit_lock_acquire>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__sinit_lock_acquire+0x8>)
 800947e:	f000 b8a7 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 8009482:	bf00      	nop
 8009484:	20000532 	.word	0x20000532

08009488 <__sinit_lock_release>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__sinit_lock_release+0x8>)
 800948a:	f000 b8a2 	b.w	80095d2 <__retarget_lock_release_recursive>
 800948e:	bf00      	nop
 8009490:	20000532 	.word	0x20000532

08009494 <__sinit>:
 8009494:	b510      	push	{r4, lr}
 8009496:	4604      	mov	r4, r0
 8009498:	f7ff fff0 	bl	800947c <__sinit_lock_acquire>
 800949c:	69a3      	ldr	r3, [r4, #24]
 800949e:	b11b      	cbz	r3, 80094a8 <__sinit+0x14>
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a4:	f7ff bff0 	b.w	8009488 <__sinit_lock_release>
 80094a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094ac:	6523      	str	r3, [r4, #80]	; 0x50
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <__sinit+0x68>)
 80094b0:	4a13      	ldr	r2, [pc, #76]	; (8009500 <__sinit+0x6c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094b6:	42a3      	cmp	r3, r4
 80094b8:	bf08      	it	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	4620      	mov	r0, r4
 80094be:	bf08      	it	eq
 80094c0:	61a3      	streq	r3, [r4, #24]
 80094c2:	f000 f81f 	bl	8009504 <__sfp>
 80094c6:	6060      	str	r0, [r4, #4]
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 f81b 	bl	8009504 <__sfp>
 80094ce:	60a0      	str	r0, [r4, #8]
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 f817 	bl	8009504 <__sfp>
 80094d6:	2200      	movs	r2, #0
 80094d8:	2104      	movs	r1, #4
 80094da:	60e0      	str	r0, [r4, #12]
 80094dc:	6860      	ldr	r0, [r4, #4]
 80094de:	f7ff ff81 	bl	80093e4 <std>
 80094e2:	2201      	movs	r2, #1
 80094e4:	2109      	movs	r1, #9
 80094e6:	68a0      	ldr	r0, [r4, #8]
 80094e8:	f7ff ff7c 	bl	80093e4 <std>
 80094ec:	2202      	movs	r2, #2
 80094ee:	2112      	movs	r1, #18
 80094f0:	68e0      	ldr	r0, [r4, #12]
 80094f2:	f7ff ff77 	bl	80093e4 <std>
 80094f6:	2301      	movs	r3, #1
 80094f8:	61a3      	str	r3, [r4, #24]
 80094fa:	e7d1      	b.n	80094a0 <__sinit+0xc>
 80094fc:	08009b10 	.word	0x08009b10
 8009500:	0800942d 	.word	0x0800942d

08009504 <__sfp>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	4607      	mov	r7, r0
 8009508:	f7ff ffac 	bl	8009464 <__sfp_lock_acquire>
 800950c:	4b1e      	ldr	r3, [pc, #120]	; (8009588 <__sfp+0x84>)
 800950e:	681e      	ldr	r6, [r3, #0]
 8009510:	69b3      	ldr	r3, [r6, #24]
 8009512:	b913      	cbnz	r3, 800951a <__sfp+0x16>
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ffbd 	bl	8009494 <__sinit>
 800951a:	3648      	adds	r6, #72	; 0x48
 800951c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009520:	3b01      	subs	r3, #1
 8009522:	d503      	bpl.n	800952c <__sfp+0x28>
 8009524:	6833      	ldr	r3, [r6, #0]
 8009526:	b30b      	cbz	r3, 800956c <__sfp+0x68>
 8009528:	6836      	ldr	r6, [r6, #0]
 800952a:	e7f7      	b.n	800951c <__sfp+0x18>
 800952c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009530:	b9d5      	cbnz	r5, 8009568 <__sfp+0x64>
 8009532:	4b16      	ldr	r3, [pc, #88]	; (800958c <__sfp+0x88>)
 8009534:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009538:	60e3      	str	r3, [r4, #12]
 800953a:	6665      	str	r5, [r4, #100]	; 0x64
 800953c:	f000 f847 	bl	80095ce <__retarget_lock_init_recursive>
 8009540:	f7ff ff96 	bl	8009470 <__sfp_lock_release>
 8009544:	2208      	movs	r2, #8
 8009546:	4629      	mov	r1, r5
 8009548:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800954c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009550:	6025      	str	r5, [r4, #0]
 8009552:	61a5      	str	r5, [r4, #24]
 8009554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009558:	f7fd f866 	bl	8006628 <memset>
 800955c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009564:	4620      	mov	r0, r4
 8009566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009568:	3468      	adds	r4, #104	; 0x68
 800956a:	e7d9      	b.n	8009520 <__sfp+0x1c>
 800956c:	2104      	movs	r1, #4
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff ff62 	bl	8009438 <__sfmoreglue>
 8009574:	4604      	mov	r4, r0
 8009576:	6030      	str	r0, [r6, #0]
 8009578:	2800      	cmp	r0, #0
 800957a:	d1d5      	bne.n	8009528 <__sfp+0x24>
 800957c:	f7ff ff78 	bl	8009470 <__sfp_lock_release>
 8009580:	230c      	movs	r3, #12
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	e7ee      	b.n	8009564 <__sfp+0x60>
 8009586:	bf00      	nop
 8009588:	08009b10 	.word	0x08009b10
 800958c:	ffff0001 	.word	0xffff0001

08009590 <_fwalk_reent>:
 8009590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009594:	4606      	mov	r6, r0
 8009596:	4688      	mov	r8, r1
 8009598:	2700      	movs	r7, #0
 800959a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800959e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095a2:	f1b9 0901 	subs.w	r9, r9, #1
 80095a6:	d505      	bpl.n	80095b4 <_fwalk_reent+0x24>
 80095a8:	6824      	ldr	r4, [r4, #0]
 80095aa:	2c00      	cmp	r4, #0
 80095ac:	d1f7      	bne.n	800959e <_fwalk_reent+0xe>
 80095ae:	4638      	mov	r0, r7
 80095b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095b4:	89ab      	ldrh	r3, [r5, #12]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d907      	bls.n	80095ca <_fwalk_reent+0x3a>
 80095ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095be:	3301      	adds	r3, #1
 80095c0:	d003      	beq.n	80095ca <_fwalk_reent+0x3a>
 80095c2:	4629      	mov	r1, r5
 80095c4:	4630      	mov	r0, r6
 80095c6:	47c0      	blx	r8
 80095c8:	4307      	orrs	r7, r0
 80095ca:	3568      	adds	r5, #104	; 0x68
 80095cc:	e7e9      	b.n	80095a2 <_fwalk_reent+0x12>

080095ce <__retarget_lock_init_recursive>:
 80095ce:	4770      	bx	lr

080095d0 <__retarget_lock_acquire_recursive>:
 80095d0:	4770      	bx	lr

080095d2 <__retarget_lock_release_recursive>:
 80095d2:	4770      	bx	lr

080095d4 <__swhatbuf_r>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	460e      	mov	r6, r1
 80095d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095dc:	4614      	mov	r4, r2
 80095de:	2900      	cmp	r1, #0
 80095e0:	461d      	mov	r5, r3
 80095e2:	b096      	sub	sp, #88	; 0x58
 80095e4:	da08      	bge.n	80095f8 <__swhatbuf_r+0x24>
 80095e6:	2200      	movs	r2, #0
 80095e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	061a      	lsls	r2, r3, #24
 80095f0:	d410      	bmi.n	8009614 <__swhatbuf_r+0x40>
 80095f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f6:	e00e      	b.n	8009616 <__swhatbuf_r+0x42>
 80095f8:	466a      	mov	r2, sp
 80095fa:	f000 f953 	bl	80098a4 <_fstat_r>
 80095fe:	2800      	cmp	r0, #0
 8009600:	dbf1      	blt.n	80095e6 <__swhatbuf_r+0x12>
 8009602:	9a01      	ldr	r2, [sp, #4]
 8009604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800960c:	425a      	negs	r2, r3
 800960e:	415a      	adcs	r2, r3
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	e7ee      	b.n	80095f2 <__swhatbuf_r+0x1e>
 8009614:	2340      	movs	r3, #64	; 0x40
 8009616:	2000      	movs	r0, #0
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	b016      	add	sp, #88	; 0x58
 800961c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009620 <__smakebuf_r>:
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009624:	079d      	lsls	r5, r3, #30
 8009626:	4606      	mov	r6, r0
 8009628:	460c      	mov	r4, r1
 800962a:	d507      	bpl.n	800963c <__smakebuf_r+0x1c>
 800962c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2301      	movs	r3, #1
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	b002      	add	sp, #8
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	466a      	mov	r2, sp
 800963e:	ab01      	add	r3, sp, #4
 8009640:	f7ff ffc8 	bl	80095d4 <__swhatbuf_r>
 8009644:	9900      	ldr	r1, [sp, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	4630      	mov	r0, r6
 800964a:	f7fd f85d 	bl	8006708 <_malloc_r>
 800964e:	b948      	cbnz	r0, 8009664 <__smakebuf_r+0x44>
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	059a      	lsls	r2, r3, #22
 8009656:	d4ef      	bmi.n	8009638 <__smakebuf_r+0x18>
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	f043 0302 	orr.w	r3, r3, #2
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	e7e3      	b.n	800962c <__smakebuf_r+0xc>
 8009664:	4b0d      	ldr	r3, [pc, #52]	; (800969c <__smakebuf_r+0x7c>)
 8009666:	62b3      	str	r3, [r6, #40]	; 0x28
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	6120      	str	r0, [r4, #16]
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	b15b      	cbz	r3, 8009694 <__smakebuf_r+0x74>
 800967c:	4630      	mov	r0, r6
 800967e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009682:	f000 f921 	bl	80098c8 <_isatty_r>
 8009686:	b128      	cbz	r0, 8009694 <__smakebuf_r+0x74>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	89a0      	ldrh	r0, [r4, #12]
 8009696:	4305      	orrs	r5, r0
 8009698:	81a5      	strh	r5, [r4, #12]
 800969a:	e7cd      	b.n	8009638 <__smakebuf_r+0x18>
 800969c:	0800942d 	.word	0x0800942d

080096a0 <memchr>:
 80096a0:	4603      	mov	r3, r0
 80096a2:	b510      	push	{r4, lr}
 80096a4:	b2c9      	uxtb	r1, r1
 80096a6:	4402      	add	r2, r0
 80096a8:	4293      	cmp	r3, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	d101      	bne.n	80096b2 <memchr+0x12>
 80096ae:	2000      	movs	r0, #0
 80096b0:	e003      	b.n	80096ba <memchr+0x1a>
 80096b2:	7804      	ldrb	r4, [r0, #0]
 80096b4:	3301      	adds	r3, #1
 80096b6:	428c      	cmp	r4, r1
 80096b8:	d1f6      	bne.n	80096a8 <memchr+0x8>
 80096ba:	bd10      	pop	{r4, pc}

080096bc <memmove>:
 80096bc:	4288      	cmp	r0, r1
 80096be:	b510      	push	{r4, lr}
 80096c0:	eb01 0402 	add.w	r4, r1, r2
 80096c4:	d902      	bls.n	80096cc <memmove+0x10>
 80096c6:	4284      	cmp	r4, r0
 80096c8:	4623      	mov	r3, r4
 80096ca:	d807      	bhi.n	80096dc <memmove+0x20>
 80096cc:	1e43      	subs	r3, r0, #1
 80096ce:	42a1      	cmp	r1, r4
 80096d0:	d008      	beq.n	80096e4 <memmove+0x28>
 80096d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096da:	e7f8      	b.n	80096ce <memmove+0x12>
 80096dc:	4601      	mov	r1, r0
 80096de:	4402      	add	r2, r0
 80096e0:	428a      	cmp	r2, r1
 80096e2:	d100      	bne.n	80096e6 <memmove+0x2a>
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ee:	e7f7      	b.n	80096e0 <memmove+0x24>

080096f0 <_realloc_r>:
 80096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f4:	4680      	mov	r8, r0
 80096f6:	4614      	mov	r4, r2
 80096f8:	460e      	mov	r6, r1
 80096fa:	b921      	cbnz	r1, 8009706 <_realloc_r+0x16>
 80096fc:	4611      	mov	r1, r2
 80096fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009702:	f7fd b801 	b.w	8006708 <_malloc_r>
 8009706:	b92a      	cbnz	r2, 8009714 <_realloc_r+0x24>
 8009708:	f7fc ff96 	bl	8006638 <_free_r>
 800970c:	4625      	mov	r5, r4
 800970e:	4628      	mov	r0, r5
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	f000 f8fa 	bl	800990c <_malloc_usable_size_r>
 8009718:	4284      	cmp	r4, r0
 800971a:	4607      	mov	r7, r0
 800971c:	d802      	bhi.n	8009724 <_realloc_r+0x34>
 800971e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009722:	d812      	bhi.n	800974a <_realloc_r+0x5a>
 8009724:	4621      	mov	r1, r4
 8009726:	4640      	mov	r0, r8
 8009728:	f7fc ffee 	bl	8006708 <_malloc_r>
 800972c:	4605      	mov	r5, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	d0ed      	beq.n	800970e <_realloc_r+0x1e>
 8009732:	42bc      	cmp	r4, r7
 8009734:	4622      	mov	r2, r4
 8009736:	4631      	mov	r1, r6
 8009738:	bf28      	it	cs
 800973a:	463a      	movcs	r2, r7
 800973c:	f7fe fb70 	bl	8007e20 <memcpy>
 8009740:	4631      	mov	r1, r6
 8009742:	4640      	mov	r0, r8
 8009744:	f7fc ff78 	bl	8006638 <_free_r>
 8009748:	e7e1      	b.n	800970e <_realloc_r+0x1e>
 800974a:	4635      	mov	r5, r6
 800974c:	e7df      	b.n	800970e <_realloc_r+0x1e>

0800974e <_raise_r>:
 800974e:	291f      	cmp	r1, #31
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	460d      	mov	r5, r1
 8009756:	d904      	bls.n	8009762 <_raise_r+0x14>
 8009758:	2316      	movs	r3, #22
 800975a:	6003      	str	r3, [r0, #0]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	bd38      	pop	{r3, r4, r5, pc}
 8009762:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009764:	b112      	cbz	r2, 800976c <_raise_r+0x1e>
 8009766:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800976a:	b94b      	cbnz	r3, 8009780 <_raise_r+0x32>
 800976c:	4620      	mov	r0, r4
 800976e:	f000 f831 	bl	80097d4 <_getpid_r>
 8009772:	462a      	mov	r2, r5
 8009774:	4601      	mov	r1, r0
 8009776:	4620      	mov	r0, r4
 8009778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800977c:	f000 b818 	b.w	80097b0 <_kill_r>
 8009780:	2b01      	cmp	r3, #1
 8009782:	d00a      	beq.n	800979a <_raise_r+0x4c>
 8009784:	1c59      	adds	r1, r3, #1
 8009786:	d103      	bne.n	8009790 <_raise_r+0x42>
 8009788:	2316      	movs	r3, #22
 800978a:	6003      	str	r3, [r0, #0]
 800978c:	2001      	movs	r0, #1
 800978e:	e7e7      	b.n	8009760 <_raise_r+0x12>
 8009790:	2400      	movs	r4, #0
 8009792:	4628      	mov	r0, r5
 8009794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009798:	4798      	blx	r3
 800979a:	2000      	movs	r0, #0
 800979c:	e7e0      	b.n	8009760 <_raise_r+0x12>
	...

080097a0 <raise>:
 80097a0:	4b02      	ldr	r3, [pc, #8]	; (80097ac <raise+0xc>)
 80097a2:	4601      	mov	r1, r0
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	f7ff bfd2 	b.w	800974e <_raise_r>
 80097aa:	bf00      	nop
 80097ac:	20000018 	.word	0x20000018

080097b0 <_kill_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	2300      	movs	r3, #0
 80097b4:	4d06      	ldr	r5, [pc, #24]	; (80097d0 <_kill_r+0x20>)
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	f7f9 f9c2 	bl	8002b46 <_kill>
 80097c2:	1c43      	adds	r3, r0, #1
 80097c4:	d102      	bne.n	80097cc <_kill_r+0x1c>
 80097c6:	682b      	ldr	r3, [r5, #0]
 80097c8:	b103      	cbz	r3, 80097cc <_kill_r+0x1c>
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
 80097ce:	bf00      	nop
 80097d0:	2000052c 	.word	0x2000052c

080097d4 <_getpid_r>:
 80097d4:	f7f9 b9b0 	b.w	8002b38 <_getpid>

080097d8 <__sread>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	460c      	mov	r4, r1
 80097dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e0:	f000 f89c 	bl	800991c <_read_r>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	bfab      	itete	ge
 80097e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ea:	89a3      	ldrhlt	r3, [r4, #12]
 80097ec:	181b      	addge	r3, r3, r0
 80097ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097f2:	bfac      	ite	ge
 80097f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80097f6:	81a3      	strhlt	r3, [r4, #12]
 80097f8:	bd10      	pop	{r4, pc}

080097fa <__swrite>:
 80097fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097fe:	461f      	mov	r7, r3
 8009800:	898b      	ldrh	r3, [r1, #12]
 8009802:	4605      	mov	r5, r0
 8009804:	05db      	lsls	r3, r3, #23
 8009806:	460c      	mov	r4, r1
 8009808:	4616      	mov	r6, r2
 800980a:	d505      	bpl.n	8009818 <__swrite+0x1e>
 800980c:	2302      	movs	r3, #2
 800980e:	2200      	movs	r2, #0
 8009810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009814:	f000 f868 	bl	80098e8 <_lseek_r>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	4632      	mov	r2, r6
 800981c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	4628      	mov	r0, r5
 8009824:	463b      	mov	r3, r7
 8009826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800982a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800982e:	f000 b817 	b.w	8009860 <_write_r>

08009832 <__sseek>:
 8009832:	b510      	push	{r4, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983a:	f000 f855 	bl	80098e8 <_lseek_r>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	bf15      	itete	ne
 8009844:	6560      	strne	r0, [r4, #84]	; 0x54
 8009846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800984a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800984e:	81a3      	strheq	r3, [r4, #12]
 8009850:	bf18      	it	ne
 8009852:	81a3      	strhne	r3, [r4, #12]
 8009854:	bd10      	pop	{r4, pc}

08009856 <__sclose>:
 8009856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985a:	f000 b813 	b.w	8009884 <_close_r>
	...

08009860 <_write_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	2200      	movs	r2, #0
 800986a:	4d05      	ldr	r5, [pc, #20]	; (8009880 <_write_r+0x20>)
 800986c:	602a      	str	r2, [r5, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	f7f9 f9a0 	bl	8002bb4 <_write>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d102      	bne.n	800987e <_write_r+0x1e>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	b103      	cbz	r3, 800987e <_write_r+0x1e>
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	2000052c 	.word	0x2000052c

08009884 <_close_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	2300      	movs	r3, #0
 8009888:	4d05      	ldr	r5, [pc, #20]	; (80098a0 <_close_r+0x1c>)
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	f7f9 f9ac 	bl	8002bec <_close>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_close_r+0x1a>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_close_r+0x1a>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	2000052c 	.word	0x2000052c

080098a4 <_fstat_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	2300      	movs	r3, #0
 80098a8:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_fstat_r+0x20>)
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	4611      	mov	r1, r2
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	f7f9 f9a6 	bl	8002c02 <_fstat>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d102      	bne.n	80098c0 <_fstat_r+0x1c>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	b103      	cbz	r3, 80098c0 <_fstat_r+0x1c>
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
 80098c2:	bf00      	nop
 80098c4:	2000052c 	.word	0x2000052c

080098c8 <_isatty_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	2300      	movs	r3, #0
 80098cc:	4d05      	ldr	r5, [pc, #20]	; (80098e4 <_isatty_r+0x1c>)
 80098ce:	4604      	mov	r4, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	f7f9 f9a4 	bl	8002c20 <_isatty>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_isatty_r+0x1a>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_isatty_r+0x1a>
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	2000052c 	.word	0x2000052c

080098e8 <_lseek_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	2200      	movs	r2, #0
 80098f2:	4d05      	ldr	r5, [pc, #20]	; (8009908 <_lseek_r+0x20>)
 80098f4:	602a      	str	r2, [r5, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f7f9 f99c 	bl	8002c34 <_lseek>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_lseek_r+0x1e>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_lseek_r+0x1e>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	2000052c 	.word	0x2000052c

0800990c <_malloc_usable_size_r>:
 800990c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009910:	1f18      	subs	r0, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	bfbc      	itt	lt
 8009916:	580b      	ldrlt	r3, [r1, r0]
 8009918:	18c0      	addlt	r0, r0, r3
 800991a:	4770      	bx	lr

0800991c <_read_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	2200      	movs	r2, #0
 8009926:	4d05      	ldr	r5, [pc, #20]	; (800993c <_read_r+0x20>)
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7f9 f925 	bl	8002b7a <_read>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_read_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_read_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	2000052c 	.word	0x2000052c

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
